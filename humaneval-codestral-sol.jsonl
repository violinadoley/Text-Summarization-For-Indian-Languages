{"task_id": "0", "prompt": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n", "code_1": "def has_close_elements(numbers, threshold):\n    numbers.sort()\n    return any(numbers[i+1] - numbers[i] < threshold for i in range(len(numbers) - 1))", "code_2": "def has_close_elements(numbers, threshold):\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "code_3": "def has_close_elements(numbers, threshold):\n    return len(set(num // threshold for num in numbers)) < len(numbers)", "code_4": "def has_close_elements(numbers, threshold):\n    from itertools import combinations\n    return any(abs(x - y) < threshold for x, y in combinations(numbers, 2))", "code_5": "def has_close_elements(numbers, threshold):\n    import numpy as np\n    return np.any(np.abs(np.subtract.outer(numbers, numbers)) < threshold)", "code_6": "def has_close_elements(numbers, threshold):\n    from scipy.spatial.distance import pdist, squareform\n    return np.any(squareform(pdist(numbers)) < threshold)", "code_7": "def has_close_elements(numbers, threshold):\n    import heapq\n    heapq.heapify(numbers)\n    while len(numbers) > 1:\n        if heapq.heappop(numbers) + threshold > numbers[0]:\n            return True\n    return False", "code_8": "def has_close_elements(numbers, threshold):\n    from bisect import insort\n    numbers = sorted(numbers)\n    for i in range(len(numbers) - 1):\n        if numbers[i] + threshold > numbers[i + 1]:\n            return True\n    return False", "code_9": "def has_close_elements(numbers, threshold):\n    from collections import deque\n    numbers = deque(sorted(numbers))\n    while len(numbers) > 1:\n        if numbers.popleft() + threshold > numbers[0]:\n            return True\n    return False", "code_10": "def has_close_elements(numbers, threshold):\n    from sortedcontainers import SortedList\n    numbers = SortedList(numbers)\n    for i in range(len(numbers) - 1):\n        if numbers[i] + threshold > numbers[i + 1]:\n            return True\n    return False"}
{"task_id": "1", "prompt": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n", "code_1": "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups, group, count = [], '', 0\n    for char in paren_string.replace(' ', ''):\n        if char == '(':\n            count += 1\n        elif char == ')':\n            count -= 1\n        group += char\n        if count == 0:\n            groups.append(group)\n            group = ''\n    return groups", "code_2": "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups, stack = [], []\n    for char in paren_string.replace(' ', ''):\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            stack.pop()\n            if not stack:\n                groups.append(''.join(stack) + char)\n        if stack:\n            stack.append(char)\n    return groups", "code_3": "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups, count, start = [], 0, 0\n    for i, char in enumerate(paren_string.replace(' ', '')):\n        if char == '(':\n            count += 1\n        elif char == ')':\n            count -= 1\n        if count == 0:\n            groups.append(paren_string[start:i+1])\n            start = i + 1\n    return groups", "code_4": "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups, count, start = [], 0, 0\n    for i, char in enumerate(paren_string):\n        if char == '(':\n            count += 1\n        elif char == ')':\n            count -= 1\n            if count == 0:\n                groups.append(paren_string[start:i+1])\n                start = i + 1\n    return groups", "code_5": "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups, stack = [], []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            stack.pop()\n            if not stack:\n                groups.append(''.join(stack) + char)\n        if stack:\n            stack.append(char)\n    return groups", "code_6": "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups, count, start = [], 0, 0\n    for i, char in enumerate(paren_string):\n        if char == '(':\n            count += 1\n        elif char == ')':\n            count -= 1\n            if count == 0:\n                groups.append(paren_string[start:i+1])\n                start = i + 1\n    return groups", "code_7": "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups, stack = [], []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            stack.pop()\n            if not stack:\n                groups.append(''.join(stack) + char)\n        if stack:\n            stack.append(char)\n    return groups", "code_8": "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups, count, start = [], 0, 0\n    for i, char in enumerate(paren_string):\n        if char == '(':\n            count += 1\n        elif char == ')':\n            count -= 1\n            if count == 0:\n                groups.append(paren_string[start:i+1])\n                start = i + 1\n    return groups", "code_9": "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups, stack = [], []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            stack.pop()\n            if not stack:\n                groups.append(''.join(stack) + char)\n        if stack:\n            stack.append(char)\n    return groups", "code_10": "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups, count, start = [], 0, 0\n    for i, char in enumerate(paren_string):\n        if char == '(':\n            count += 1\n        elif char == ')':\n            count -= 1\n            if count == 0:\n                groups.append(paren_string[start:i+1])\n                start = i + 1\n    return groups"}
{"task_id": "2", "prompt": "\n\ndef truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n", "code_1": "def truncate_number(number):\n    return number - int(number)", "code_2": "def truncate_number(number):\n    return number % 1", "code_3": "def truncate_number(number):\n    return math.modf(number)[0]", "code_4": "def truncate_number(number):\n    return fractions.Fraction(number).limit_denominator()[1] / fractions.Fraction(number).limit_denominator()[0]", "code_5": "def truncate_number(number):\n    return Decimal(number) % 1", "code_6": "def truncate_number(number):\n    return number - math.floor(number)", "code_7": "def truncate_number(number):\n    return number - np.floor(number)", "code_8": "def truncate_number(number):\n    return number - tf.floor(number)", "code_9": "def truncate_number(number):\n    return number - torch.floor(number)", "code_10": "def truncate_number(number):\n    return number - jnp.floor(number)"}
{"task_id": "3", "prompt": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n", "code_1": "def below_zero(operations):\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "code_2": "def below_zero(operations):\n    return any(sum(operations[:i+1]) < 0 for i in range(len(operations)))", "code_3": "def below_zero(operations):\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return balance < 0", "code_4": "def below_zero(operations):\n    return min(accumulate(operations)) < 0", "code_5": "def below_zero(operations):\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return balance < 0", "code_6": "def below_zero(operations):\n    return any(map(lambda x: x < 0, accumulate(operations)))", "code_7": "def below_zero(operations):\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return balance < 0", "code_8": "def below_zero(operations):\n    return min(reduce(lambda acc, op: acc + [acc[-1] + op], operations, [0])) < 0", "code_9": "def below_zero(operations):\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "code_10": "def below_zero(operations):\n    return any(sum(operations[:i]) < 0 for i in range(1, len(operations) + 1))"}
{"task_id": "4", "prompt": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n", "code_1": "def mean_absolute_deviation(numbers):\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "code_2": "import numpy as np\ndef mean_absolute_deviation(numbers):\n    return np.mean(np.abs(numbers - np.mean(numbers)))", "code_3": "import statistics\ndef mean_absolute_deviation(numbers):\n    mean = statistics.mean(numbers)\n    return statistics.mean(abs(x - mean) for x in numbers)", "code_4": "def mean_absolute_deviation(numbers):\n    mean = sum(numbers) / len(numbers)\n    return sum(map(lambda x: abs(x - mean), numbers)) / len(numbers)", "code_5": "from scipy import stats\ndef mean_absolute_deviation(numbers):\n    return stats.median_absolute_deviation(numbers)", "code_6": "def mean_absolute_deviation(numbers):\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "code_7": "import pandas as pd\ndef mean_absolute_deviation(numbers):\n    return pd.Series(numbers).mad()", "code_8": "def mean_absolute_deviation(numbers):\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "code_9": "def mean_absolute_deviation(numbers):\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "code_10": "def mean_absolute_deviation(numbers):\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)"}
{"task_id": "5", "prompt": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n", "code_1": "def intersperse(numbers, delimeter):\n    return [i for n in numbers for i in (n, delimeter)][:-1]", "code_2": "def intersperse(numbers, delimeter):\n    return sum([[i, delimeter] for i in numbers], [])[:-1]", "code_3": "def intersperse(numbers, delimeter):\n    return [i for n in numbers for i in (n, delimeter)][:-1]", "code_4": "def intersperse(numbers, delimeter):\n    return [i for n in numbers for i in (n, delimeter)][:-1]", "code_5": "def intersperse(numbers, delimeter):\n    return [i for n in numbers for i in (n, delimeter) if i != delimeter or n != numbers[-1]]", "code_6": "def intersperse(numbers, delimeter):\n    return [i for n in numbers for i in (n, delimeter)][:-1]", "code_7": "def intersperse(numbers, delimeter):\n    return [i for n in numbers for i in (n, delimeter)][:-1]", "code_8": "def intersperse(numbers, delimeter):\n    return [i for n in numbers for i in (n, delimeter)][:-1]", "code_9": "def intersperse(numbers, delimeter):\n    return [i for n in numbers for i in (n, delimeter)][:-1]", "code_10": "def intersperse(numbers, delimeter):\n    return [i for n in numbers for i in (n, delimeter)][:-1]"}
{"task_id": "6", "prompt": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n", "code_1": "def parse_nested_parens(paren_string: str) -> List[int]:\n    return [max(len(re.findall(r'\\(+', p)) for p in group.split('()')) for group in paren_string.split()]", "code_2": "def parse_nested_parens(paren_string: str) -> List[int]:\n    return [max(len(s) for s in p.split('()')) for p in paren_string.split()]", "code_3": "def parse_nested_parens(paren_string: str) -> List[int]:\n    return [max(p.count('(') for p in group.split('()')) for group in paren_string.split()]", "code_4": "def parse_nested_parens(paren_string: str) -> List[int]:\n    return [max(map(len, p.split('()'))) for p in paren_string.split()]", "code_5": "def parse_nested_parens(paren_string: str) -> List[int]:\n    return [max(p.count('(') for p in group.replace('()', ' ').split()) for group in paren_string.split()]", "code_6": "def parse_nested_parens(paren_string: str) -> List[int]:\n    return [max(len(p) for p in re.split(r'\\(\\)', group)) for group in paren_string.split()]", "code_7": "def parse_nested_parens(paren_string: str) -> List[int]:\n    return [max(len(p) for p in group.replace('()', ' ').split()) for group in paren_string.split()]", "code_8": "def parse_nested_parens(paren_string: str) -> List[int]:\n    return [max(p.count('(') for p in re.split(r'\\(\\)', group)) for group in paren_string.split()]", "code_9": "def parse_nested_parens(paren_string: str) -> List[int]:\n    return [max(len(re.findall(r'\\(', p)) for p in group.split('()')) for group in paren_string.split()]", "code_10": "def parse_nested_parens(paren_string: str) -> List[int]:\n    return [max(p.count('(') for p in group.replace('()', ' ').split()) for group in re.split(r'\\s+', paren_string)]"}
{"task_id": "7", "prompt": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n", "code_1": "def filter_by_substring(strings, substring):\n    return [s for s in strings if substring in s]", "code_2": "def filter_by_substring(strings, substring):\n    return list(filter(lambda s: substring in s, strings))", "code_3": "def filter_by_substring(strings, substring):\n    return [s for s in strings if s.find(substring) != -1]", "code_4": "def filter_by_substring(strings, substring):\n    return [s for s in strings if s.count(substring) > 0]", "code_5": "def filter_by_substring(strings, substring):\n    return [s for s in strings if any(substring in t for t in s)]", "code_6": "def filter_by_substring(strings, substring):\n    return [s for s in strings if s.index(substring) >= 0]", "code_7": "def filter_by_substring(strings, substring):\n    return [s for s in strings if re.search(substring, s)]", "code_8": "def filter_by_substring(strings, substring):\n    return [s for s in strings if s.startswith(substring[:1]) and s.endswith(substring[-1:])]", "code_9": "def filter_by_substring(strings, substring):\n    return [s for s in strings if s.rfind(substring) != -1]", "code_10": "def filter_by_substring(strings, substring):\n    return [s for s in strings if s.split(substring)[0] != s]"}
{"task_id": "8", "prompt": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n", "code_1": "def sum_product(numbers):\n    s, p = 0, 1\n    for num in numbers:\n        s += num\n        p *= num\n    return s, p", "code_2": "def sum_product(numbers):\n    return sum(numbers), math.prod(numbers) if numbers else (0, 1)", "code_3": "def sum_product(numbers):\n    return (sum(numbers), reduce(lambda x, y: x*y, numbers, 1))", "code_4": "def sum_product(numbers):\n    return (sum(numbers), functools.reduce(operator.mul, numbers, 1))", "code_5": "def sum_product(numbers):\n    s = p = 1\n    for num in numbers:\n        s += num\n        p *= num\n    return (s - 1 if numbers else 0, p if numbers else 1)", "code_6": "def sum_product(numbers):\n    return (sum(numbers), numpy.prod(numbers) if numbers else 1)", "code_7": "def sum_product(numbers):\n    s = sum(numbers)\n    p = 1\n    for num in numbers:\n        p *= num\n    return (s, p)", "code_8": "def sum_product(numbers):\n    return (sum(numbers), functools.reduce(lambda x, y: x*y, numbers, 1) if numbers else 1)", "code_9": "def sum_product(numbers):\n    s = p = 0\n    for num in numbers:\n        s += num\n        p = p*num if p else num\n    return (s, p if numbers else 1)", "code_10": "def sum_product(numbers):\n    s = sum(numbers)\n    p = math.prod(numbers) if numbers else 1\n    return (s, p)"}
{"task_id": "9", "prompt": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n", "code_1": "def rolling_max(numbers):\n    max_so_far = float('-inf')\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result", "code_2": "def rolling_max(numbers):\n    return [max(numbers[:i+1]) for i in range(len(numbers))]", "code_3": "import itertools\ndef rolling_max(numbers):\n    return list(itertools.accumulate(numbers, max))", "code_4": "import numpy as np\ndef rolling_max(numbers):\n    return np.maximum.accumulate(numbers).tolist()", "code_5": "def rolling_max(numbers):\n    max_so_far = float('-inf')\n    return [max_so_far := max(max_so_far, num) for num in numbers]", "code_6": "def rolling_max(numbers):\n    max_so_far = float('-inf')\n    result = [0] * len(numbers)\n    for i, num in enumerate(numbers):\n        max_so_far = max(max_so_far, num)\n        result[i] = max_so_far\n    return result", "code_7": "def rolling_max(numbers):\n    max_so_far = float('-inf')\n    result = []\n    for i in range(len(numbers)):\n        max_so_far = max(max_so_far, numbers[i])\n        result.append(max_so_far)\n    return result", "code_8": "def rolling_max(numbers):\n    max_so_far = float('-inf')\n    result = [max_so_far := max(max_so_far, num) for num in numbers]\n    return result", "code_9": "def rolling_max(numbers):\n    max_so_far = float('-inf')\n    result = [max(max_so_far, num) for num in numbers]\n    for i in range(1, len(numbers)):\n        result[i] = max(result[i-1], result[i])\n    return result", "code_10": "def rolling_max(numbers):\n    max_so_far = float('-inf')\n    result = [0] * len(numbers)\n    for i in range(len(numbers)):\n        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n        result[i] = max_so_far\n    return result"}
{"task_id": "10", "prompt": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n", "code_1": "def make_palindrome(s):\n    i = 0\n    for j in range(len(s)-1, -1, -1):\n        if s[i] == s[j]:\n            i += 1\n    return s + s[:i-len(s)-1:-1]", "code_2": "def make_palindrome(s):\n    i = 0\n    for j in reversed(range(len(s))):\n        if s[i] == s[j]:\n            i += 1\n    return s + s[i:][::-1]", "code_3": "def make_palindrome(s):\n    i = 0\n    for j in range(len(s)-1, -1, -1):\n        if s[i] == s[j]:\n            i += 1\n    return s + s[i:].replace(s[i], '')[::-1]", "code_4": "def make_palindrome(s):\n    i = 0\n    for j in range(len(s)-1, -1, -1):\n        if s[i] == s[j]:\n            i += 1\n    return s + s[i:][::-1].replace(s[i], '', 1)", "code_5": "def make_palindrome(s):\n    i = 0\n    for j in range(len(s)-1, -1, -1):\n        if s[i] == s[j]:\n            i += 1\n    return s + s[i-1::-1]", "code_6": "def make_palindrome(s):\n    i = 0\n    for j in range(len(s)-1, -1, -1):\n        if s[i] == s[j]:\n            i += 1\n    return s + s[:i-1:-1]", "code_7": "def make_palindrome(s):\n    i = 0\n    for j in range(len(s)-1, -1, -1):\n        if s[i] == s[j]:\n            i += 1\n    return s + s[i-1:][::-1]", "code_8": "def make_palindrome(s):\n    i = 0\n    for j in range(len(s)-1, -1, -1):\n        if s[i] == s[j]:\n            i += 1\n    return s + s[i:].replace(s[i], '', 1)[::-1]", "code_9": "def make_palindrome(s):\n    i = 0\n    for j in range(len(s)-1, -1, -1):\n        if s[i] == s[j]:\n            i += 1\n    return s + s[i-1:][::-1].replace(s[i-1], '', 1)", "code_10": "def make_palindrome(s):\n    i = 0\n    for j in range(len(s)-1, -1, -1):\n        if s[i] == s[j]:\n            i += 1\n    return s + s[i-1:][::-1].lstrip(s[i-1])"}
{"task_id": "11", "prompt": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n", "code_1": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "code_2": "def string_xor(a: str, b: str) -> str:\n    return ''.join(chr(ord(x) ^ ord(y)) for x, y in zip(a, b))", "code_3": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) != int(y)) for x, y in zip(a, b))", "code_4": "def string_xor(a: str, b: str) -> str:\n    return ''.join(map(lambda x: str(int(x[0]) ^ int(x[1])), zip(a, b)))", "code_5": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) + int(y) - 2 * int(x) * int(y)) for x, y in zip(a, b))", "code_6": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(bool(int(x)) ^ bool(int(y))) for x, y in zip(a, b))", "code_7": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(1) if x != y else str(0) for x, y in zip(a, b))", "code_8": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) != int(y)) for x, y in zip(a, b))", "code_9": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "code_10": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) != int(y)) for x, y in zip(a, b))"}
{"task_id": "12", "prompt": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n", "code_1": "def longest(strings: List[str]) -> Optional[str]:\n    return max(strings, key=len, default=None)", "code_2": "def longest(strings: List[str]) -> Optional[str]:\n    return sorted(strings, key=len, reverse=True)[0] if strings else None", "code_3": "def longest(strings: List[str]) -> Optional[str]:\n    return next((s for s in sorted(strings, key=len, reverse=True)), None)", "code_4": "def longest(strings: List[str]) -> Optional[str]:\n    return strings[0] if strings else None if len(strings) == 1 else max(strings, key=len)", "code_5": "def longest(strings: List[str]) -> Optional[str]:\n    return max(strings, key=lambda s: (len(s), s), default=None)", "code_6": "def longest(strings: List[str]) -> Optional[str]:\n    return reduce((lambda x, y: y if len(y) > len(x) else x), strings, None)", "code_7": "def longest(strings: List[str]) -> Optional[str]:\n    return heapq.nlargest(1, strings, key=len)[0] if strings else None", "code_8": "def longest(strings: List[str]) -> Optional[str]:\n    return min(strings, key=lambda s: (-len(s), s)) if strings else None", "code_9": "def longest(strings: List[str]) -> Optional[str]:\n    return functools.reduce(lambda a, b: a if len(a) >= len(b) else b, strings, None)", "code_10": "def longest(strings: List[str]) -> Optional[str]:\n    return next(iter(sorted(strings, key=len, reverse=True)), None)"}
{"task_id": "13", "prompt": "\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n", "code_1": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "code_2": "import math\ndef greatest_common_divisor(a: int, b: int) -> int:\n    return math.gcd(a, b)", "code_3": "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)", "code_4": "def greatest_common_divisor(a: int, b: int) -> int:\n    return a if b == 0 else greatest_common_divisor(b, a % b)", "code_5": "from functools import reduce\nimport math\ndef greatest_common_divisor(a: int, b: int) -> int:\n    return reduce(math.gcd, (a, b))", "code_6": "def greatest_common_divisor(a: int, b: int) -> int:\n    return abs(a) if b == 0 else greatest_common_divisor(b, a % b)", "code_7": "def greatest_common_divisor(a: int, b: int) -> int:\n    return a if b == 0 else greatest_common_divisor(b, a - b * (a // b))", "code_8": "def greatest_common_divisor(a: int, b: int) -> int:\n    while a != b:\n        if a > b:\n            a -= b\n        else:\n            b -= a\n    return a", "code_9": "def greatest_common_divisor(a: int, b: int) -> int:\n    while a != 0 and b != 0:\n        if a > b:\n            a %= b\n        else:\n            b %= a\n    return a + b", "code_10": "def greatest_common_divisor(a: int, b: int) -> int:\n    while a != 0:\n        a, b = b % a, a\n    return b"}
{"task_id": "14", "prompt": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n", "code_1": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]", "code_2": "def all_prefixes(string: str) -> List[str]:\n    return [string[0:i] for i in range(1, len(string) + 1)]", "code_3": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]", "code_4": "def all_prefixes(string: str) -> List[str]:\n    return [string[0:i] for i in range(len(string))]", "code_5": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string)) if i < len(string)]", "code_6": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1) if i <= len(string)]", "code_7": "def all_prefixes(string: str) -> List[str]:\n    return [string[0:i] for i in range(1, len(string) + 1) if i <= len(string)]", "code_8": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(len(string)) if i < len(string)]", "code_9": "def all_prefixes(string: str) -> List[str]:\n    return [string[0:i] for i in range(len(string)) if i < len(string)]", "code_10": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1) if i != len(string) + 1]"}
{"task_id": "15", "prompt": "\n\ndef string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n", "code_1": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n + 1)))", "code_2": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))", "code_3": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in xrange(n + 1))", "code_4": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in itertools.chain(range(n), [n]))", "code_5": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in numpy.arange(n + 1))", "code_6": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in pandas.Series(range(n + 1)))", "code_7": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in polars.Series(range(n + 1)))", "code_8": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in pyspark.sql.functions.sequence(0, n))", "code_9": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in dask.array.arange(n + 1))", "code_10": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in vaex.array(range(n + 1)))"}
{"task_id": "16", "prompt": "\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n", "code_1": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "code_2": "def count_distinct_characters(string: str) -> int:\n    return len({c.lower() for c in string})", "code_3": "from collections import Counter\ndef count_distinct_characters(string: str) -> int:\n    return len(Counter(string.lower()))", "code_4": "def count_distinct_characters(string: str) -> int:\n    return sum(1 for c in set(string.lower()))", "code_5": "def count_distinct_characters(string: str) -> int:\n    return sum(map(lambda c: 1, set(string.lower())))", "code_6": "def count_distinct_characters(string: str) -> int:\n    chars = [0] * 128\n    for c in string.lower():\n        chars[ord(c)] = 1\n    return sum(chars)", "code_7": "def count_distinct_characters(string: str) -> int:\n    chars = [False] * 128\n    for c in string.lower():\n        chars[ord(c)] = True\n    return sum(chars)", "code_8": "def count_distinct_characters(string: str) -> int:\n    return len(string.lower()) - len(string.lower().replace('', '').replace(' ', ''))", "code_9": "def count_distinct_characters(string: str) -> int:\n    return len(''.join(sorted(set(string.lower()))))", "code_10": "def count_distinct_characters(string: str) -> int:\n    return len(''.join(dict.fromkeys(string.lower())))"}
{"task_id": "17", "prompt": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n", "code_1": "def parse_music(music_string: str) -> List[int]:\n    return [4 if note == 'o' else 2 if note == 'o|' else 1 for note in music_string.split()]", "code_2": "def parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    return [{'o': 4, 'o|': 2, '.|': 1}[note] for note in notes]", "code_3": "def parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        else:\n            beats.append(1)\n    return beats", "code_4": "def parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    return [beats[note] for note in notes]", "code_5": "def parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    return list(map(lambda note: 4 if note == 'o' else 2 if note == 'o|' else 1, notes))", "code_6": "def parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        beats.extend([4, 2, 1][['o', 'o|', '.|'].index(note)])\n    return beats", "code_7": "def parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats = {\n        'o': [4],\n        'o|': [2],\n        '.|': [1]\n    }\n    return [beat for note in notes for beat in beats[note]]", "code_8": "def parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        beats += [4] if note == 'o' else [2] if note == 'o|' else [1]\n    return beats", "code_9": "def parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        beats.extend([4, 2, 1][['o', 'o|', '.|'].index(note)])\n    return beats", "code_10": "def parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    return [beats.get(note, 0) for note in notes]"}
{"task_id": "18", "prompt": "\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n", "code_1": "def how_many_times(string: str, substring: str) -> int:\n    return sum(string[i:].startswith(substring) for i in range(len(string)))", "code_2": "def how_many_times(string: str, substring: str) -> int:\n    return sum(1 for i in range(len(string)) if string[i:].startswith(substring))", "code_3": "def how_many_times(string: str, substring: str) -> int:\n    return len([i for i in range(len(string)) if string[i:].startswith(substring)])", "code_4": "def how_many_times(string: str, substring: str) -> int:\n    count = start = 0\n    while start < len(string):\n        pos = string.find(substring, start)\n        if pos != -1:\n            start = pos + 1\n            count += 1\n        else:\n            break\n    return count", "code_5": "def how_many_times(string: str, substring: str) -> int:\n    count = start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            return count", "code_6": "def how_many_times(string: str, substring: str) -> int:\n    count = start = 0\n    while start != -1:\n        start = string.find(substring, start)\n        if start != -1:\n            start += 1\n            count += 1\n    return count", "code_7": "def how_many_times(string: str, substring: str) -> int:\n    return string.count(substring) + string[len(substring):].count(substring)", "code_8": "def how_many_times(string: str, substring: str) -> int:\n    return (len(string) - len(string.replace(substring, ''))) // len(substring)", "code_9": "import re\ndef how_many_times(string: str, substring: str) -> int:\n    return len(re.findall(f'(?={substring})', string))", "code_10": "def how_many_times(string: str, substring: str) -> int:\n    return len([m.start() for m in re.finditer(f'(?={substring})', string)])"}
{"task_id": "19", "prompt": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n", "code_1": "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    return ' '.join(sorted(numbers.split(), key=lambda x: num_dict[x]))", "code_2": "def sort_numbers(numbers: str) -> str:\n    num_list = numbers.split()\n    num_list.sort(key=['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine'].index)\n    return ' '.join(num_list)", "code_3": "def sort_numbers(numbers: str) -> str:\n    num_dict = {v: k for k, v in enumerate(['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine'])}\n    return ' '.join(sorted(numbers.split(), key=num_dict.get))", "code_4": "def sort_numbers(numbers: str) -> str:\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine'].index(x))\n    return ' '.join(num_list)", "code_5": "def sort_numbers(numbers: str) -> str:\n    num_dict = dict(zip(['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine'], range(10)))\n    return ' '.join(sorted(numbers.split(), key=num_dict.get))", "code_6": "def sort_numbers(numbers: str) -> str:\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine'].index(x))\n    return ' '.join(num_list)", "code_7": "def sort_numbers(numbers: str) -> str:\n    num_dict = {k: v for v, k in enumerate(['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine'])}\n    return ' '.join(sorted(numbers.split(), key=num_dict.get))", "code_8": "def sort_numbers(numbers: str) -> str:\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine'].index(x))\n    return ' '.join(num_list)", "code_9": "def sort_numbers(numbers: str) -> str:\n    num_dict = dict(enumerate(['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']))\n    return ' '.join(sorted(numbers.split(), key=lambda x: list(num_dict.keys())[list(num_dict.values()).index(x)]))", "code_10": "def sort_numbers(numbers: str) -> str:\n    num_dict = {k: v for v, k in enumerate(['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine'])}\n    return ' '.join(sorted(numbers.split(), key=lambda x: num_dict[x]))"}
{"task_id": "20", "prompt": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n", "code_1": "def find_closest_elements(numbers):\n    numbers.sort()\n    return min((numbers[i], numbers[i + 1]) for i in range(len(numbers) - 1), key=lambda x: x[1] - x[0])", "code_2": "def find_closest_elements(numbers):\n    numbers = sorted(numbers)\n    return min(zip(numbers, numbers[1:]), key=lambda x: x[1] - x[0])", "code_3": "def find_closest_elements(numbers):\n    numbers.sort()\n    return min(zip(numbers, numbers[1:]), key=lambda x: x[1] - x[0])", "code_4": "def find_closest_elements(numbers):\n    numbers.sort()\n    return min((numbers[i], numbers[i + 1]) for i in range(len(numbers) - 1), key=lambda x: abs(x[1] - x[0]))", "code_5": "def find_closest_elements(numbers):\n    numbers = sorted(numbers)\n    return min(zip(numbers, numbers[1:]), key=lambda x: abs(x[1] - x[0]))", "code_6": "def find_closest_elements(numbers):\n    numbers.sort()\n    return min((numbers[i], numbers[i + 1]) for i in range(len(numbers) - 1), key=lambda x: x[1] - x[0])", "code_7": "def find_closest_elements(numbers):\n    numbers = sorted(numbers)\n    return min(zip(numbers, numbers[1:]), key=lambda x: x[1] - x[0])", "code_8": "def find_closest_elements(numbers):\n    numbers.sort()\n    return min((numbers[i], numbers[i + 1]) for i in range(len(numbers) - 1), key=lambda x: abs(x[1] - x[0]))", "code_9": "def find_closest_elements(numbers):\n    numbers = sorted(numbers)\n    return min(zip(numbers, numbers[1:]), key=lambda x: abs(x[1] - x[0]))", "code_10": "def find_closest_elements(numbers):\n    numbers.sort()\n    return min((numbers[i], numbers[i + 1]) for i in range(len(numbers) - 1), key=lambda x: abs(x[1] - x[0]))"}
{"task_id": "21", "prompt": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n", "code_1": "def rescale_to_unit(numbers):\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]", "code_2": "def rescale_to_unit(numbers):\n    min_num = float('inf')\n    max_num = float('-inf')\n    for num in numbers:\n        if num < min_num:\n            min_num = num\n        if num > max_num:\n            max_num = num\n    return [(num - min_num) / (max_num - min_num) for num in numbers]", "code_3": "def rescale_to_unit(numbers):\n    min_num = numbers[0]\n    max_num = numbers[0]\n    for num in numbers:\n        if num < min_num:\n            min_num = num\n        elif num > max_num:\n            max_num = num\n    return [(num - min_num) / (max_num - min_num) for num in numbers]", "code_4": "def rescale_to_unit(numbers):\n    min_num = min(numbers)\n    range_num = max(numbers) - min_num\n    return [(num - min_num) / range_num for num in numbers]", "code_5": "def rescale_to_unit(numbers):\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return list(map(lambda num: (num - min_num) / (max_num - min_num), numbers))", "code_6": "def rescale_to_unit(numbers):\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) if max_num != min_num else 0 for num in numbers]", "code_7": "def rescale_to_unit(numbers):\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(num - min_num) / range_num if range_num != 0 else 0 for num in numbers]", "code_8": "def rescale_to_unit(numbers):\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(num - min_num) / range_num for num in numbers] if range_num != 0 else [0] * len(numbers)", "code_9": "def rescale_to_unit(numbers):\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(num - min_num) / range_num if range_num else 0 for num in numbers]", "code_10": "def rescale_to_unit(numbers):\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(num - min_num) / range_num if range_num else 0 for num in numbers] if numbers else []"}
{"task_id": "22", "prompt": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n", "code_1": "def filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]", "code_2": "def filter_integers(values: List[Any]) -> List[int]:\n    return list(filter(lambda x: isinstance(x, int), values))", "code_3": "def filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if type(value) is int]", "code_4": "def filter_integers(values: List[Any]) -> List[int]:\n    return list(filter(lambda x: type(x) is int, values))", "code_5": "def filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if type(value) == int]", "code_6": "def filter_integers(values: List[Any]) -> List[int]:\n    return list(filter(lambda x: type(x) == int, values))", "code_7": "def filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, (int,))]", "code_8": "def filter_integers(values: List[Any]) -> List[int]:\n    return list(filter(lambda x: isinstance(x, (int,)), values))", "code_9": "def filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if type(value) in (int,)]", "code_10": "def filter_integers(values: List[Any]) -> List[int]:\n    return list(filter(lambda x: type(x) in (int,), values))"}
{"task_id": "23", "prompt": "\n\ndef strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n", "code_1": "def strlen(string: str) -> int:\n    return len(string)", "code_2": "def strlen(string: str) -> int:\n    count = 0\n    for _ in string:\n        count += 1\n    return count", "code_3": "def strlen(string: str) -> int:\n    return sum(1 for _ in string)", "code_4": "def strlen(string: str) -> int:\n    return string.count('') - 1", "code_5": "def strlen(string: str) -> int:\n    try:\n        return string.index('\\0')\n    except ValueError:\n        return len(string)", "code_6": "def strlen(string: str) -> int:\n    return reduce(lambda x, _: x + 1, string, 0)", "code_7": "def strlen(string: str) -> int:\n    return len(list(string))", "code_8": "def strlen(string: str) -> int:\n    return len(tuple(string))", "code_9": "def strlen(string: str) -> int:\n    return len(set(string))", "code_10": "def strlen(string: str) -> int:\n    return len(dict.fromkeys(string))"}
{"task_id": "24", "prompt": "\n\ndef largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n", "code_1": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "code_2": "def largest_divisor(n: int) -> int:\n    return next(i for i in range(n-1, 0, -1) if n % i == 0)", "code_3": "def largest_divisor(n: int) -> int:\n    return max(i for i in range(1, n) if n % i == 0)", "code_4": "def largest_divisor(n: int) -> int:\n    return [i for i in range(n-1, 0, -1) if n % i == 0][0]", "code_5": "def largest_divisor(n: int) -> int:\n    return list(filter(lambda i: n % i == 0, range(n-1, 0, -1)))[0]", "code_6": "def largest_divisor(n: int) -> int:\n    return reduce(lambda x, y: x if n % x == 0 else y, range(n-1, 0, -1))", "code_7": "def largest_divisor(n: int) -> int:\n    return functools.reduce(lambda x, y: x if n % x == 0 else y, range(n-1, 0, -1))", "code_8": "def largest_divisor(n: int) -> int:\n    return max(filter(lambda i: n % i == 0, range(n-1, 0, -1)))", "code_9": "def largest_divisor(n: int) -> int:\n    return max(i for i in range(n-1, 0, -1) if n % i == 0)", "code_10": "def largest_divisor(n: int) -> int:\n    return max(filter(lambda i: n % i == 0, range(n-1, 0, -1)))"}
{"task_id": "25", "prompt": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n", "code_1": "def factorize(n: int) -> List[int]:\n    i, factors = 2, []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors", "code_2": "def factorize(n: int) -> List[int]:\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 2:\n        factors.append(n)\n    return factors", "code_3": "def factorize(n: int) -> List[int]:\n    factors = []\n    for i in range(2, int(n**0.5) + 1):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 1:\n        factors.append(n)\n    return factors", "code_4": "def factorize(n: int) -> List[int]:\n    i, factors = 2, []\n    while i * i <= n:\n        while n % i:\n            i += 1\n        n //= i\n        factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors", "code_5": "def factorize(n: int) -> List[int]:\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    for i in range(3, int(n**0.5) + 1):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 2:\n        factors.append(n)\n    return factors", "code_6": "def factorize(n: int) -> List[int]:\n    i, factors = 2, []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors", "code_7": "def factorize(n: int) -> List[int]:\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 2:\n        factors.append(n)\n    return factors", "code_8": "def factorize(n: int) -> List[int]:\n    i, factors = 2, []\n    while i * i <= n:\n        while n % i:\n            i += 1\n        n //= i\n        factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors", "code_9": "def factorize(n: int) -> List[int]:\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    for i in range(3, int(n**0.5) + 1):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 2:\n        factors.append(n)\n    return factors", "code_10": "def factorize(n: int) -> List[int]:\n    i, factors = 2, []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors"}
{"task_id": "26", "prompt": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n", "code_1": "def remove_duplicates(numbers):\n    return list(dict.fromkeys(numbers))", "code_2": "def remove_duplicates(numbers):\n    return sorted(set(numbers), key=numbers.index)", "code_3": "def remove_duplicates(numbers):\n    seen = set()\n    return [x for x in numbers if not (x in seen or seen.add(x))]", "code_4": "def remove_duplicates(numbers):\n    return [num for num in numbers if numbers.count(num) == 1]", "code_5": "def remove_duplicates(numbers):\n    from collections import OrderedDict\n    return list(OrderedDict.fromkeys(numbers))", "code_6": "def remove_duplicates(numbers):\n    return list(dict.fromkeys(numbers).keys())", "code_7": "def remove_duplicates(numbers):\n    return [num for i, num in enumerate(numbers) if numbers.index(num) == i]", "code_8": "def remove_duplicates(numbers):\n    return [num for num in numbers if numbers.count(num) == 1]", "code_9": "def remove_duplicates(numbers):\n    from collections import Counter\n    return [num for num, count in Counter(numbers).items() if count == 1]", "code_10": "def remove_duplicates(numbers):\n    return [num for num in numbers if numbers.count(num) == 1]"}
{"task_id": "27", "prompt": "\n\ndef flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n", "code_1": "def flip_case(string: str) -> str:\n    return string.swapcase()", "code_2": "def flip_case(string: str) -> str:\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)", "code_3": "def flip_case(string: str) -> str:\n    return ''.join([c.upper() if c.islower() else c.lower() for c in string])", "code_4": "def flip_case(string: str) -> str:\n    return ''.join(chr(ord(c) ^ 32) if 'a' <= c <= 'z' or 'A' <= c <= 'Z' else c for c in string)", "code_5": "def flip_case(string: str) -> str:\n    return string.translate(str.maketrans('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ', 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'))", "code_6": "def flip_case(string: str) -> str:\n    return ''.join([c.lower() if c.isupper() else c.upper() if c.islower() else c for c in string])", "code_7": "def flip_case(string: str) -> str:\n    return ''.join(map(lambda c: c.lower() if c.isupper() else c.upper(), string))", "code_8": "def flip_case(string: str) -> str:\n    return ''.join([chr(i ^ 32) if 65 <= ord(i) <= 90 or 97 <= ord(i) <= 122 else i for i in string])", "code_9": "def flip_case(string: str) -> str:\n    return ''.join([c.upper() if c.islower() else c.lower() if c.isupper() else c for c in string])", "code_10": "def flip_case(string: str) -> str:\n    return ''.join([chr(ord(c) ^ 32) if 'a' <= c <= 'z' or 'A' <= c <= 'Z' else c for c in string])"}
{"task_id": "28", "prompt": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n", "code_1": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "code_2": "def concatenate(strings: List[str]) -> str:\n    result = ''\n    for s in strings:\n        result += s\n    return result", "code_3": "def concatenate(strings: List[str]) -> str:\n    return ''.join(map(str, strings))", "code_4": "def concatenate(strings: List[str]) -> str:\n    return reduce(lambda x, y: x + y, strings, '')", "code_5": "def concatenate(strings: List[str]) -> str:\n    return ''.join(itertools.chain(*strings))", "code_6": "def concatenate(strings: List[str]) -> str:\n    return ''.join(string for string in strings)", "code_7": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings) if strings else ''", "code_8": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings) if len(strings) > 0 else ''", "code_9": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings) if strings != [] else ''", "code_10": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings) if strings is not None else ''"}
{"task_id": "29", "prompt": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n", "code_1": "def filter_by_prefix(strings, prefix):\n    return [s for s in strings if s.startswith(prefix)]", "code_2": "def filter_by_prefix(strings, prefix):\n    return list(filter(lambda s: s.startswith(prefix), strings))", "code_3": "def filter_by_prefix(strings, prefix):\n    return [s for s in strings if s[:len(prefix)] == prefix]", "code_4": "def filter_by_prefix(strings, prefix):\n    return [s for s in strings if s.find(prefix) == 0]", "code_5": "def filter_by_prefix(strings, prefix):\n    return [s for s in strings if s.index(prefix) == 0]", "code_6": "def filter_by_prefix(strings, prefix):\n    return [s for s in strings if s.lstrip(prefix) != s]", "code_7": "def filter_by_prefix(strings, prefix):\n    return [s for s in strings if s.partition(prefix)[1] == prefix]", "code_8": "def filter_by_prefix(strings, prefix):\n    return [s for s in strings if re.match(f'^{prefix}', s)]", "code_9": "def filter_by_prefix(strings, prefix):\n    return [s for s in strings if s.split(prefix, 1)[0] == '']", "code_10": "def filter_by_prefix(strings, prefix):\n    return [s for s in strings if s.rpartition(prefix)[0] == '' and s.rpartition(prefix)[1] == prefix]"}
{"task_id": "30", "prompt": "\n\ndef get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n", "code_1": "def get_positive(l):\n    return [i for i in l if i > 0]", "code_2": "def get_positive(l):\n    return list(filter(lambda x: x > 0, l))", "code_3": "def get_positive(l):\n    return [x for x in l if x > 0]", "code_4": "def get_positive(l):\n    return [i for i in l if i > 0]", "code_5": "def get_positive(l):\n    return [x for x in l if x > 0]", "code_6": "def get_positive(l):\n    return [i for i in l if i > 0]", "code_7": "def get_positive(l):\n    return [x for x in l if x > 0]", "code_8": "def get_positive(l):\n    return [i for i in l if i > 0]", "code_9": "def get_positive(l):\n    return [x for x in l if x > 0]", "code_10": "def get_positive(l):\n    return [i for i in l if i > 0]"}
{"task_id": "31", "prompt": "\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n", "code_1": "def is_prime(n):\n    if n < 2: return False\n    if n == 2 or n == 3: return True\n    if n % 2 == 0 or n % 3 == 0: return False\n    i = 5\n    w = 2\n    while i * i <= n:\n        if n % i == 0: return False\n        i += w\n        w = 6 - w\n    return True", "code_2": "def is_prime(n):\n    if n < 2: return False\n    if n == 2 or n == 3: return True\n    if n % 2 == 0 or n % 3 == 0: return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0: return False\n        i += 6\n    return True", "code_3": "def is_prime(n):\n    if n < 2: return False\n    if n == 2: return True\n    if n % 2 == 0: return False\n    max_div = int(n**0.5) + 1\n    for div in range(3, max_div, 2):\n        if n % div == 0: return False\n    return True", "code_4": "def is_prime(n):\n    if n < 2: return False\n    if n == 2 or n == 3: return True\n    if n % 2 == 0 or n % 3 == 0: return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0: return False\n        i += 2\n        if n % i == 0: return False\n        i += 4\n    return True", "code_5": "def is_prime(n):\n    if n < 2: return False\n    if n == 2 or n == 3: return True\n    if n % 2 == 0 or n % 3 == 0: return False\n    i = 5\n    j = 2\n    while i * i <= n:\n        if n % i == 0: return False\n        i += j\n        j = 6 - j\n    return True", "code_6": "def is_prime(n):\n    if n < 2: return False\n    if n == 2: return True\n    if n % 2 == 0: return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0: return False\n    return True", "code_7": "def is_prime(n):\n    if n < 2: return False\n    if n == 2 or n == 3: return True\n    if n % 2 == 0 or n % 3 == 0: return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0: return False\n        i += 2\n        if i * i <= n and n % i == 0: return False\n        i += 4\n    return True", "code_8": "def is_prime(n):\n    if n < 2: return False\n    if n == 2: return True\n    if n % 2 == 0: return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0: return False\n    return True", "code_9": "def is_prime(n):\n    if n < 2: return False\n    if n == 2 or n == 3: return True\n    if n % 2 == 0 or n % 3 == 0: return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0: return False\n        i += 2\n        if i * i <= n and n % i == 0: return False\n        i += 4\n    return True", "code_10": "def is_prime(n):\n    if n < 2: return False\n    if n == 2 or n == 3: return True\n    if n % 2 == 0 or n % 3 == 0: return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0: return False\n        i += 2\n        if i * i <= n and n % i == 0: return False\n        i += 4\n    return True"}
{"task_id": "32", "prompt": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n", "code_1": "def poly(xs, x):\n    return sum(coeff * x**i for i, coeff in enumerate(xs))", "code_2": "def find_zero(xs):\n    return next(x for x in range(len(xs)) if poly(xs, x) == 0)", "code_3": "def poly(xs, x):\n    return sum(coeff * x**i for i, coeff in enumerate(xs))", "code_4": "def find_zero(xs):\n    return next(filter(lambda x: poly(xs, x) == 0, range(len(xs))))", "code_5": "def poly(xs, x):\n    return sum(coeff * x**i for i, coeff in enumerate(xs))", "code_6": "def find_zero(xs):\n    return [x for x in range(len(xs)) if poly(xs, x) == 0][0]", "code_7": "def poly(xs, x):\n    return sum(coeff * x**i for i, coeff in enumerate(xs))", "code_8": "def find_zero(xs):\n    return [x for x in range(len(xs)) if not poly(xs, x)][0]", "code_9": "def poly(xs, x):\n    return sum(coeff * x**i for i, coeff in enumerate(xs))", "code_10": "def find_zero(xs):\n    return [x for x in range(len(xs)) if abs(poly(xs, x)) < 1e-9][0]", "code_11": "def poly(xs, x):\n    return sum(coeff * x**i for i, coeff in enumerate(xs))", "code_12": "def find_zero(xs):\n    return [x for x in range(len(xs)) if round(poly(xs, x), 9) == 0][0]", "code_13": "def poly(xs, x):\n    return sum(coeff * x**i for i, coeff in enumerate(xs))", "code_14": "def find_zero(xs):\n    return [x for x in range(len(xs)) if math.isclose(poly(xs, x), 0, rel_tol=1e-9)][0]", "code_15": "def poly(xs, x):\n    return sum(coeff * x**i for i, coeff in enumerate(xs))", "code_16": "def find_zero(xs):\n    return [x for x in range(len(xs)) if abs(poly(xs, x)) < sys.float_info.epsilon][0]", "code_17": "def poly(xs, x):\n    return sum(coeff * x**i for i, coeff in enumerate(xs))", "code_18": "def find_zero(xs):\n    return [x for x in range(len(xs)) if math.isclose(poly(xs, x), 0, abs_tol=0.0)][0]", "code_19": "def poly(xs, x):\n    return sum(coeff * x**i for i, coeff in enumerate(xs))", "code_20": "def find_zero(xs):\n    return [x for x in range(len(xs)) if decimal.Decimal(poly(xs, x)) == 0][0]"}
{"task_id": "33", "prompt": "\n\ndef sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n", "code_1": "def sort_third(l):\n    l[::3] = sorted(l[::3])\n    return l", "code_2": "def sort_third(l):\n    thirds = sorted(l[i] for i in range(0, len(l), 3))\n    for i, val in enumerate(thirds):\n        l[i * 3] = val\n    return l", "code_3": "def sort_third(l):\n    thirds = sorted(l[i] for i in range(len(l)) if i % 3 == 0)\n    return [thirds[i // 3] if i % 3 == 0 else val for i, val in enumerate(l)]", "code_4": "def sort_third(l):\n    thirds = sorted(l[i] for i in range(0, len(l), 3))\n    return [thirds[i // 3] if i % 3 == 0 else l[i] for i in range(len(l))]", "code_5": "def sort_third(l):\n    thirds = sorted(l[i] for i in range(len(l)) if not i % 3)\n    l[::3] = thirds\n    return l", "code_6": "def sort_third(l):\n    thirds = sorted(l[i] for i in range(0, len(l), 3))\n    for i in range(0, len(l), 3):\n        l[i] = thirds[i // 3]\n    return l", "code_7": "def sort_third(l):\n    thirds = sorted(l[i] for i in range(len(l)) if i % 3 == 0)\n    l = [thirds[i // 3] if i % 3 == 0 else l[i] for i in range(len(l))]\n    return l", "code_8": "def sort_third(l):\n    thirds = sorted(l[i] for i in range(0, len(l), 3))\n    l = [thirds[i // 3] if not i % 3 else val for i, val in enumerate(l)]\n    return l", "code_9": "def sort_third(l):\n    thirds = sorted(l[i] for i in range(len(l)) if i % 3 == 0)\n    l = [thirds[i // 3] if i % 3 == 0 else l[i] for i in range(len(l))]\n    return l", "code_10": "def sort_third(l):\n    thirds = sorted(l[i] for i in range(0, len(l), 3))\n    l = [thirds[i // 3] if i % 3 == 0 else val for i, val in enumerate(l)]\n    return l"}
{"task_id": "34", "prompt": "\n\ndef unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n", "code_1": "def unique(l):\n    return sorted(set(l))", "code_2": "def unique(l):\n    return list(dict.fromkeys(l)).sort()", "code_3": "def unique(l):\n    return sorted(list(set(l)))", "code_4": "def unique(l):\n    return sorted({i for i in l})", "code_5": "def unique(l):\n    return sorted(list(set(l)))", "code_6": "def unique(l):\n    return sorted(list({*l}))", "code_7": "def unique(l):\n    return sorted(list(set(l)))", "code_8": "def unique(l):\n    return sorted(set(l))", "code_9": "def unique(l):\n    return sorted(list(set(l)))", "code_10": "def unique(l):\n    return sorted(set(l))"}
{"task_id": "35", "prompt": "\n\ndef max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n", "code_1": "def max_element(l):\n    return max(l)", "code_2": "def max_element(l):\n    m = l[0]\n    for i in l:\n        if i > m:\n            m = i\n    return m", "code_3": "def max_element(l):\n    return sorted(l)[-1]", "code_4": "def max_element(l):\n    return reduce(lambda a, b: a if a > b else b, l)", "code_5": "def max_element(l):\n    return heapq.nlargest(1, l)[0]", "code_6": "def max_element(l):\n    return max(l, key=int)", "code_7": "def max_element(l):\n    return max(l, default=None)", "code_8": "def max_element(l):\n    return max(l, default=float('-inf'))", "code_9": "def max_element(l):\n    return max(l, default=l[0])", "code_10": "def max_element(l):\n    return max(l, default=min(l))"}
{"task_id": "36", "prompt": "\n\ndef fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n", "code_1": "def fizz_buzz(n: int):\n    return sum(str(i).count('7') for i in range(11, n, 11)) + sum(str(i).count('7') for i in range(13, n, 13)) - sum(str(i).count('7') for i in range(11*13, n, 11*13))", "code_2": "def fizz_buzz(n: int):\n    return sum(str(i).count('7') for i in range(n) if i % 11 == 0 or i % 13 == 0)", "code_3": "def fizz_buzz(n: int):\n    return sum(str(i).count('7') for i in set(range(11, n, 11)) | set(range(13, n, 13)))", "code_4": "def fizz_buzz(n: int):\n    return sum(str(i).count('7') for i in filter(lambda x: x % 11 == 0 or x % 13 == 0, range(n)))", "code_5": "def fizz_buzz(n: int):\n    return sum(str(i).count('7') for i in range(n) if i % 11 == 0 or i % 13 == 0)", "code_6": "def fizz_buzz(n: int):\n    return sum(str(i).count('7') for i in range(n) if i % 11 == 0) + sum(str(i).count('7') for i in range(n) if i % 13 == 0) - sum(str(i).count('7') for i in range(n) if i % (11*13) == 0)", "code_7": "def fizz_buzz(n: int):\n    return sum(str(i).count('7') for i in range(n) if i % 11 == 0 or i % 13 == 0)", "code_8": "def fizz_buzz(n: int):\n    return sum(str(i).count('7') for i in range(n) if i % 11 == 0) + sum(str(i).count('7') for i in range(n) if i % 13 == 0) - sum(str(i).count('7') for i in range(n) if i % (11*13) == 0)", "code_9": "def fizz_buzz(n: int):\n    return sum(str(i).count('7') for i in range(n) if i % 11 == 0 or i % 13 == 0)", "code_10": "def fizz_buzz(n: int):\n    return sum(str(i).count('7') for i in range(n) if i % 11 == 0) + sum(str(i).count('7') for i in range(n) if i % 13 == 0) - sum(str(i).count('7') for i in range(n) if i % (11*13) == 0)"}
{"task_id": "37", "prompt": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n", "code_1": "def sort_even(l):\n    evens = sorted(l[::2])\n    l[::2] = evens\n    return l", "code_2": "def sort_even(l):\n    evens = l[::2]\n    evens.sort()\n    l[::2] = evens\n    return l", "code_3": "def sort_even(l):\n    evens = sorted(v for i, v in enumerate(l) if i % 2 == 0)\n    l[::2] = evens\n    return l", "code_4": "def sort_even(l):\n    evens = sorted(filter(lambda x: l.index(x) % 2 == 0, l))\n    l[::2] = evens\n    return l", "code_5": "def sort_even(l):\n    evens = sorted([v for i, v in enumerate(l) if i % 2 == 0])\n    l[::2] = evens\n    return l", "code_6": "def sort_even(l):\n    evens = sorted(l[i] for i in range(0, len(l), 2))\n    l[::2] = evens\n    return l", "code_7": "def sort_even(l):\n    evens = sorted(l[i] for i in range(len(l)) if i % 2 == 0)\n    l[::2] = evens\n    return l", "code_8": "def sort_even(l):\n    evens = sorted([x for x in l if l.index(x) % 2 == 0])\n    l[::2] = evens\n    return l", "code_9": "def sort_even(l):\n    evens = sorted(v for i, v in enumerate(l) if not i % 2)\n    l[::2] = evens\n    return l", "code_10": "def sort_even(l):\n    evens = sorted(l[i] for i in range(len(l)) if not i % 2)\n    l[::2] = evens\n    return l"}
{"task_id": "38", "prompt": "\n\ndef encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n", "code_1": "def encode_cyclic(s): return ''.join(t[1:] + t[0] if len(t) == 3 else t for t in [s[i:i+3] for i in range(0, len(s), 3)])\ndef decode_cyclic(s): return ''.join(t[-1] + t[:-1] if len(t) == 3 else t for t in [s[i:i+3] for i in range(0, len(s), 3)])", "code_2": "def encode_cyclic(s): return ''.join(g[1:] + g[0] if len(g) == 3 else g for g in (s[i:i+3] for i in range(0, len(s), 3)))\ndef decode_cyclic(s): return ''.join(g[-1] + g[:-1] if len(g) == 3 else g for g in (s[i:i+3] for i in range(0, len(s), 3)))", "code_3": "def encode_cyclic(s): return ''.join(g[1:] + g[0] if len(g) == 3 else g for g in map(''.join, zip(*[iter(s)]*3)))\ndef decode_cyclic(s): return ''.join(g[-1] + g[:-1] if len(g) == 3 else g for g in map(''.join, zip(*[iter(s)]*3)))", "code_4": "def encode_cyclic(s): return ''.join(g[1:] + g[0] if len(g) == 3 else g for g in [s[i:i+3] for i in range(0, len(s), 3)])\ndef decode_cyclic(s): return ''.join(g[-1] + g[:-1] if len(g) == 3 else g for g in [s[i:i+3] for i in range(0, len(s), 3)])", "code_5": "def encode_cyclic(s): return ''.join([g[1:] + g[0] if len(g) == 3 else g for g in [s[i:i+3] for i in range(0, len(s), 3)]])\ndef decode_cyclic(s): return ''.join([g[-1] + g[:-1] if len(g) == 3 else g for g in [s[i:i+3] for i in range(0, len(s), 3)]])", "code_6": "def encode_cyclic(s): return ''.join(map(lambda g: g[1:] + g[0] if len(g) == 3 else g, [s[i:i+3] for i in range(0, len(s), 3)]))\ndef decode_cyclic(s): return ''.join(map(lambda g: g[-1] + g[:-1] if len(g) == 3 else g, [s[i:i+3] for i in range(0, len(s), 3)]))", "code_7": "def encode_cyclic(s): return ''.join(map(lambda g: g[1:] + g[0] if len(g) == 3 else g, (s[i:i+3] for i in range(0, len(s), 3))))\ndef decode_cyclic(s): return ''.join(map(lambda g: g[-1] + g[:-1] if len(g) == 3 else g, (s[i:i+3] for i in range(0, len(s), 3))))", "code_8": "def encode_cyclic(s): return ''.join(map(lambda g: g[1:] + g[0] if len(g) == 3 else g, map(''.join, zip(*[iter(s)]*3))))\ndef decode_cyclic(s): return ''.join(map(lambda g: g[-1] + g[:-1] if len(g) == 3 else g, map(''.join, zip(*[iter(s)]*3))))", "code_9": "def encode_cyclic(s): return ''.join([g[1:] + g[0] if len(g) == 3 else g for g in map(''.join, zip(*[iter(s)]*3))])\ndef decode_cyclic(s): return ''.join([g[-1] + g[:-1] if len(g) == 3 else g for g in map(''.join, zip(*[iter(s)]*3))])", "code_10": "def encode_cyclic(s): return ''.join(map(lambda g: g[1:] + g[0] if len(g) == 3 else g, [s[i:i+3] for i in range(0, len(s), 3)]))\ndef decode_cyclic(s): return ''.join(map(lambda g: g[-1] + g[:-1] if len(g) == 3 else g, [s[i:i+3] for i in range(0, len(s), 3)]))"}
{"task_id": "39", "prompt": "\n\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n", "code_1": "def prime_fib(n):\n    def is_prime(num):\n        if num < 2: return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0: return False\n        return True\n    a, b, count = 0, 1, 0\n    while count < n:\n        a, b = b, a + b\n        if is_prime(a): count += 1\n    return a", "code_2": "def prime_fib(n):\n    def is_prime(num):\n        if num < 2: return False\n        if num == 2: return True\n        if num % 2 == 0: return False\n        for i in range(3, int(num**0.5) + 1, 2):\n            if num % i == 0: return False\n        return True\n    a, b, count = 0, 1, 0\n    while count < n:\n        a, b = b, a + b\n        if is_prime(a): count += 1\n    return a", "code_3": "def prime_fib(n):\n    def is_prime(num):\n        if num < 2: return False\n        if num == 2 or num == 3: return True\n        if num % 2 == 0 or num % 3 == 0: return False\n        i = 5\n        w = 2\n        while i * i <= num:\n            if num % i == 0: return False\n            i += w\n            w = 6 - w\n        return True\n    a, b, count = 0, 1, 0\n    while count < n:\n        a, b = b, a + b\n        if is_prime(a): count += 1\n    return a", "code_4": "def prime_fib(n):\n    def is_prime(num):\n        if num < 2: return False\n        if num == 2 or num == 3: return True\n        if num % 2 == 0 or num % 3 == 0: return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0: return False\n            i += 6\n        return True\n    a, b, count = 0, 1, 0\n    while count < n:\n        a, b = b, a + b\n        if is_prime(a): count += 1\n    return a", "code_5": "def prime_fib(n):\n    def is_prime(num):\n        if num < 2: return False\n        if num == 2: return True\n        if num % 2 == 0: return False\n        max_div = int(num**0.5) + 1\n        for div in range(3, max_div, 2):\n            if num % div == 0: return False\n        return True\n    a, b, count = 0, 1, 0\n    while count < n:\n        a, b = b, a + b\n        if is_prime(a): count += 1\n    return a", "code_6": "def prime_fib(n):\n    def is_prime(num):\n        if num < 2: return False\n        if num == 2 or num == 3: return True\n        if num % 2 == 0 or num % 3 == 0: return False\n        i = 5\n        w = 2\n        while i * i <= num:\n            if num % i == 0: return False\n            i += w\n            w = 6 - w\n        return True\n    a, b = 0, 1\n    primes = []\n    while len(primes) < n:\n        a, b = b, a + b\n        if is_prime(a): primes.append(a)\n    return primes[-1]", "code_7": "def prime_fib(n):\n    def is_prime(num):\n        if num < 2: return False\n        if num == 2 or num == 3: return True\n        if num % 2 == 0 or num % 3 == 0: return False\n        i = 5\n        w = 2\n        while i * i <= num:\n            if num % i == 0: return False\n            i += w\n            w = 6 - w\n        return True\n    primes = [2]\n    a, b = 0, 1\n    while len(primes) < n:\n        a, b = b, a + b\n        if all(a % p > 0 for p in primes): primes.append(a)\n    return primes[-1]", "code_8": "def prime_fib(n):\n    def is_prime(num):\n        if num < 2: return False\n        if num == 2 or num == 3: return True\n        if num % 2 == 0 or num % 3 == 0: return False\n        i = 5\n        w = 2\n        while i * i <= num:\n            if num % i == 0: return False\n            i += w\n            w = 6 - w\n        return True\n    primes = []\n    a, b = 0, 1\n    while len(primes) < n:\n        a, b = b, a + b\n        if all(a % p > 0 for p in range(2, int(a**0.5) + 1)): primes.append(a)\n    return primes[-1]", "code_9": "def prime_fib(n):\n    def is_prime(num):\n        if num < 2: return False\n        if num == 2 or num == 3: return True\n        if num % 2 == 0 or num % 3 == 0: return False\n        i = 5\n        w = 2\n        while i * i <= num:\n            if num % i == 0: return False\n            i += w\n            w = 6 - w\n        return True\n    primes = []\n    a, b = 0, 1\n    while len(primes) < n:\n        a, b = b, a + b\n        if all(a % p > 0 for p in [2, 3] + [i for i in range(5, int(a**0.5) + 1, 6)] + [i for i in range(7, int(a**0.5) + 1, 6)]): primes.append(a)\n    return primes[-1]", "code_10": "def prime_fib(n):\n    def is_prime(num):\n        if num < 2: return False\n        if num == 2 or num == 3: return True\n        if num % 2 == 0 or num % 3 == 0: return False\n        i = 5\n        w = 2\n        while i * i <= num:\n            if num % i == 0: return False\n            i += w\n            w = 6 - w\n        return True\n    primes = []\n    a, b = 0, 1\n    while len(primes) < n:\n        a, b = b, a + b\n        if all(a % p > 0 for p in [2, 3] + [i for i in range(5, int(a**0.5) + 1, 6)] + [i for i in range(7, int(a**0.5) + 1, 6)] if i * i <= a): primes.append(a)\n    return primes[-1]"}
{"task_id": "40", "prompt": "\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n", "code_1": "def triples_sum_to_zero(l):\n    l.sort()\n    for i in range(len(l) - 2):\n        if i > 0 and l[i] == l[i - 1]:\n            continue\n        left, right = i + 1, len(l) - 1\n        while left < right:\n            if l[i] + l[left] + l[right] < 0:\n                left += 1\n            elif l[i] + l[left] + l[right] > 0:\n                right -= 1\n            else:\n                return True\n    return False", "code_2": "def triples_sum_to_zero(l):\n    l.sort()\n    for i in range(len(l) - 2):\n        if i > 0 and l[i] == l[i - 1]:\n            continue\n        target = -l[i]\n        left, right = i + 1, len(l) - 1\n        while left < right:\n            if l[left] + l[right] < target:\n                left += 1\n            elif l[left] + l[right] > target:\n                right -= 1\n            else:\n                return True\n    return False", "code_3": "def triples_sum_to_zero(l):\n    l.sort()\n    for i in range(len(l) - 2):\n        if i > 0 and l[i] == l[i - 1]:\n            continue\n        target = -l[i]\n        seen = set()\n        for j in range(i + 1, len(l)):\n            complement = target - l[j]\n            if complement in seen:\n                return True\n            seen.add(l[j])\n    return False", "code_4": "def triples_sum_to_zero(l):\n    l.sort()\n    for i in range(len(l) - 2):\n        if i > 0 and l[i] == l[i - 1]:\n            continue\n        left, right = i + 1, len(l) - 1\n        while left < right:\n            if l[i] + l[left] + l[right] == 0:\n                return True\n            elif l[i] + l[left] + l[right] < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "code_5": "def triples_sum_to_zero(l):\n    l.sort()\n    for i in range(len(l) - 2):\n        if i > 0 and l[i] == l[i - 1]:\n            continue\n        target = -l[i]\n        left, right = i + 1, len(l) - 1\n        while left < right:\n            current_sum = l[left] + l[right]\n            if current_sum == target:\n                return True\n            elif current_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return False", "code_6": "def triples_sum_to_zero(l):\n    l.sort()\n    for i in range(len(l) - 2):\n        if i > 0 and l[i] == l[i - 1]:\n            continue\n        left, right = i + 1, len(l) - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "code_7": "def triples_sum_to_zero(l):\n    l.sort()\n    for i in range(len(l) - 2):\n        if i > 0 and l[i] == l[i - 1]:\n            continue\n        target = -l[i]\n        left, right = i + 1, len(l) - 1\n        while left < right:\n            current_sum = l[left] + l[right]\n            if current_sum == target:\n                return True\n            elif current_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return False", "code_8": "def triples_sum_to_zero(l):\n    l.sort()\n    for i in range(len(l) - 2):\n        if i > 0 and l[i] == l[i - 1]:\n            continue\n        left, right = i + 1, len(l) - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "code_9": "def triples_sum_to_zero(l):\n    l.sort()\n    for i in range(len(l) - 2):\n        if i > 0 and l[i] == l[i - 1]:\n            continue\n        target = -l[i]\n        left, right = i + 1, len(l) - 1\n        while left < right:\n            current_sum = l[left] + l[right]\n            if current_sum == target:\n                return True\n            elif current_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return False", "code_10": "def triples_sum_to_zero(l):\n    l.sort()\n    for i in range(len(l) - 2):\n        if i > 0 and l[i] == l[i - 1]:\n            continue\n        left, right = i + 1, len(l) - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False"}
{"task_id": "41", "prompt": "\n\ndef car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n", "code_1": "def car_race_collision(n: int) -> int:\n    return n * n", "code_2": "car_race_collision = lambda n: n * n", "code_3": "def car_race_collision(n: int) -> int:\n    return n ** 2", "code_4": "def car_race_collision(n: int) -> int:\n    collisions = 0\n    for _ in range(n):\n        collisions += n\n    return collisions", "code_5": "def car_race_collision(n: int) -> int:\n    return sum(n for _ in range(n))", "code_6": "def car_race_collision(n: int) -> int:\n    return sum([n] * n)", "code_7": "def car_race_collision(n: int) -> int:\n    return len([(x, y) for x in range(n) for y in range(n)])", "code_8": "def car_race_collision(n: int) -> int:\n    return reduce(lambda x, y: x + y, [n] * n)", "code_9": "def car_race_collision(n: int) -> int:\n    return functools.reduce(operator.add, [n] * n)", "code_10": "def car_race_collision(n: int) -> int:\n    return n * n if n > 0 else 0"}
{"task_id": "42", "prompt": "\n\ndef incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n", "code_1": "def incr_list(l):\n    return [i + 1 for i in l]", "code_2": "def incr_list(l):\n    return list(map(lambda x: x + 1, l))", "code_3": "def incr_list(l):\n    return [x.__add__(1) for x in l]", "code_4": "def incr_list(l):\n    return [x + 1 for x in l if isinstance(x, int)]", "code_5": "def incr_list(l):\n    return [x.__iadd__(1) for x in l]", "code_6": "def incr_list(l):\n    return [x + 1 for x in l if type(x) is int]", "code_7": "def incr_list(l):\n    return [x.__add__(1) for x in l if type(x) is int]", "code_8": "def incr_list(l):\n    return [x.__iadd__(1) for x in l if isinstance(x, int)]", "code_9": "def incr_list(l):\n    return [x + 1 for x in l if type(x) == int]", "code_10": "def incr_list(l):\n    return [x.__add__(1) for x in l if type(x) == int]"}
{"task_id": "43", "prompt": "\n\ndef pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n", "code_1": "def pairs_sum_to_zero(l):\n    s = set()\n    for i in l:\n        if -i in s:\n            return True\n        s.add(i)\n    return False", "code_2": "def pairs_sum_to_zero(l):\n    l.sort()\n    left, right = 0, len(l) - 1\n    while left < right:\n        s = l[left] + l[right]\n        if s == 0:\n            return True\n        elif s < 0:\n            left += 1\n        else:\n            right -= 1\n    return False", "code_3": "def pairs_sum_to_zero(l):\n    d = {}\n    for i in l:\n        if i in d:\n            return True\n        d[-i] = True\n    return False", "code_4": "def pairs_sum_to_zero(l):\n    return any(i + j == 0 for i in l for j in l if i != j)", "code_5": "def pairs_sum_to_zero(l):\n    return len(l) != len(set(l + [-i for i in l]))", "code_6": "def pairs_sum_to_zero(l):\n    s = set(l)\n    return any(i in s for i in (-x for x in l))", "code_7": "def pairs_sum_to_zero(l):\n    return any(l.count(-i) > 0 for i in l)", "code_8": "def pairs_sum_to_zero(l):\n    return sum(l.count(-i) for i in l) > 0", "code_9": "def pairs_sum_to_zero(l):\n    return len([i for i in l if -i in l]) > 1", "code_10": "def pairs_sum_to_zero(l):\n    return len(set(l) & set(-i for i in l)) > 0"}
{"task_id": "44", "prompt": "\n\ndef change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n", "code_1": "def change_base(x: int, base: int) -> str:\n    return '{0:0{1}b}'.format(x, (x.bit_length() + base - 1) // base)", "code_2": "def change_base(x: int, base: int) -> str:\n    return np.base_repr(x, base)", "code_3": "def change_base(x: int, base: int) -> str:\n    return int(bin(x)[2:], 2).__format__('{:b}'.format(base))", "code_4": "def change_base(x: int, base: int) -> str:\n    return ''.join(reversed([str(x % base) for x in iter(lambda: x // base, 0)]))", "code_5": "def change_base(x: int, base: int) -> str:\n    return ''.join(divmod(x, base) if x < base else divmod(x, base) + (change_base(x // base, base),))", "code_6": "def change_base(x: int, base: int) -> str:\n    return ('0123456789'[x % base] + change_base(x // base, base)) if x > 0 else ''", "code_7": "def change_base(x: int, base: int) -> str:\n    return ''.join(iter(lambda: '0123456789'[x % base] if x > 0 else '', x := x // base))[::-1]", "code_8": "def change_base(x: int, base: int) -> str:\n    return ''.join(reversed([str(x % base) for x in iter(lambda: x // base, 0)]))", "code_9": "def change_base(x: int, base: int) -> str:\n    return ''.join(reversed([str(x % base) for x in iter(lambda: x // base, 0)]))", "code_10": "def change_base(x: int, base: int) -> str:\n    return ''.join(reversed([str(x % base) for x in iter(lambda: x // base, 0)]))", "code_11": "Note: The last three solutions are the same to avoid duplication."}
{"task_id": "45", "prompt": "\n\ndef triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n", "code_1": "def triangle_area(a, h):\n    return 0.5 * a * h", "code_2": "triangle_area = lambda a, h: 0.5 * a * h", "code_3": "def triangle_area(a, h):\n    return a * h / 2", "code_4": "triangle_area = lambda a, h: a * h / 2", "code_5": "def triangle_area(a, h):\n    return a * h >> 1", "code_6": "triangle_area = lambda a, h: a * h >> 1", "code_7": "def triangle_area(a, h):\n    return a * h / 2.0", "code_8": "triangle_area = lambda a, h: a * h / 2.0", "code_9": "def triangle_area(a, h):\n    return (a * h) / 2.0", "code_10": "triangle_area = lambda a, h: (a * h) / 2.0"}
{"task_id": "46", "prompt": "\n\ndef fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n", "code_1": "def fib4(n):\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(n - 3):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d", "code_2": "def fib4(n):\n    fib = [0, 0, 2, 0] + [0] * (n - 3)\n    for i in range(4, n + 1):\n        fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3] + fib[i - 4]\n    return fib[n]", "code_3": "def fib4(n):\n    if n < 4:\n        return [0, 0, 2, 0][n]\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(n - 3):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d", "code_4": "def fib4(n):\n    if n < 4:\n        return [0, 0, 2, 0][n]\n    fib = [0] * (n + 1)\n    fib[2] = 2\n    for i in range(4, n + 1):\n        fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3] + fib[i - 4]\n    return fib[n]", "code_5": "def fib4(n):\n    if n < 4:\n        return [0, 0, 2, 0][n]\n    fib = [0, 0, 2, 0]\n    for _ in range(4, n + 1):\n        fib.append(sum(fib[-4:]))\n    return fib[n]", "code_6": "def fib4(n):\n    if n < 4:\n        return [0, 0, 2, 0][n]\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(n - 3):\n        a, b, c, d = b, c, d, a + b + c + d\n    return a + b + c + d", "code_7": "def fib4(n):\n    if n < 4:\n        return [0, 0, 2, 0][n]\n    fib = [0] * (n + 1)\n    fib[2] = 2\n    for i in range(4, n + 1):\n        fib[i] = sum(fib[i - 4:i])\n    return fib[n]", "code_8": "def fib4(n):\n    if n < 4:\n        return [0, 0, 2, 0][n]\n    fib = [0, 0, 2, 0]\n    for _ in range(4, n + 1):\n        fib = fib[1:] + [sum(fib)]\n    return fib[-1]", "code_9": "def fib4(n):\n    if n < 4:\n        return [0, 0, 2, 0][n]\n    fib = [0, 0, 2, 0]\n    for _ in range(4, n + 1):\n        fib = fib[-3:] + [sum(fib)]\n    return fib[-1]", "code_10": "def fib4(n):\n    if n < 4:\n        return [0, 0, 2, 0][n]\n    fib = [0, 0, 2, 0]\n    for _ in range(4, n + 1):\n        fib = fib[1:] + [sum(fib[-3:])]\n    return fib[-1]"}
{"task_id": "47", "prompt": "\n\ndef median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n", "code_1": "def median(l):\n    l.sort()\n    n = len(l)\n    return l[n//2] if n % 2 else (l[n//2 - 1] + l[n//2]) / 2", "code_2": "def median(l):\n    l = sorted(l)\n    n = len(l)\n    return (l[n//2] + l[-(n//2 + 1)]) / 2", "code_3": "import statistics\ndef median(l):\n    return statistics.median(l)", "code_4": "import numpy as np\ndef median(l):\n    return np.median(l)", "code_5": "def median(l):\n    l.sort()\n    mid = len(l) // 2\n    return (l[mid] + l[-mid - 1]) / 2", "code_6": "def median(l):\n    l = sorted(l)\n    mid = len(l) // 2\n    return (l[mid] + l[-mid - 1]) / 2", "code_7": "import heapq\ndef median(l):\n    min_heap, max_heap = [], []\n    for num in l:\n        if not max_heap or num < -max_heap[0]:\n            heapq.heappush(max_heap, -num)\n        else:\n            heapq.heappush(min_heap, num)\n        if len(min_heap) > len(max_heap):\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) > len(min_heap) + 1:\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n    if len(min_heap) == len(max_heap):\n        return (-max_heap[0] + min_heap[0]) / 2\n    return -max_heap[0]", "code_8": "def median(l):\n    l = sorted(l)\n    n = len(l)\n    return l[n//2] if n % 2 else sum(l[n//2-1:n//2+1])/2", "code_9": "def median(l):\n    l.sort()\n    n = len(l)\n    return l[n//2] if n % 2 else (l[n//2 - 1] + l[n//2]) / 2.0", "code_10": "def median(l):\n    l = sorted(l)\n    n = len(l)\n    return l[n//2] if n % 2 else (l[n//2 - 1] + l[n//2]) / 2.0"}
{"task_id": "48", "prompt": "\n\ndef is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n", "code_1": "def is_palindrome(text: str):\n    return text == text[::-1]", "code_2": "def is_palindrome(text: str):\n    return all(text[i] == text[-i-1] for i in range(len(text)//2))", "code_3": "def is_palindrome(text: str):\n    i, j = 0, len(text) - 1\n    while i < j:\n        if text[i] != text[j]:\n            return False\n        i, j = i + 1, j - 1\n    return True", "code_4": "def is_palindrome(text: str):\n    return ''.join(reversed(text)) == text", "code_5": "def is_palindrome(text: str):\n    return text[::-1].startswith(text)", "code_6": "def is_palindrome(text: str):\n    return text[::-1].endswith(text)", "code_7": "def is_palindrome(text: str):\n    return text[::-1].find(text) == 0", "code_8": "def is_palindrome(text: str):\n    return text[::-1].rfind(text) == len(text) - len(text)", "code_9": "def is_palindrome(text: str):\n    return text[::-1].index(text) == 0", "code_10": "def is_palindrome(text: str):\n    return text[::-1].rindex(text) == len(text) - len(text)"}
{"task_id": "49", "prompt": "\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n", "code_1": "def modp(n: int, p: int):\n    return pow(2, n, p)", "code_2": "def modp(n: int, p: int):\n    result = 1\n    base = 2\n    while n > 0:\n        if n % 2 == 1:\n            result = (result * base) % p\n        base = (base * base) % p\n        n //= 2\n    return result", "code_3": "def modp(n: int, p: int):\n    if n == 0:\n        return 1\n    elif n % 2 == 0:\n        half_power = modp(n // 2, p)\n        return (half_power * half_power) % p\n    else:\n        return (2 * modp(n - 1, p)) % p", "code_4": "def modp(n: int, p: int):\n    if n == 0:\n        return 1\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n    else:\n        return 2 * modp(n - 1, p) % p", "code_5": "def modp(n: int, p: int):\n    return (1 << n) % p", "code_6": "def modp(n: int, p: int):\n    return 2 ** n % p", "code_7": "def modp(n: int, p: int):\n    return pow(2, n, p)", "code_8": "def modp(n: int, p: int):\n    return (2 ** n) % p", "code_9": "def modp(n: int, p: int):\n    return pow(2, n, p)", "code_10": "def modp(n: int, p: int):\n    return (2 ** n) % p"}
{"task_id": "50", "prompt": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n", "code_1": "def encode_shift(s): return ''.join(chr((ord(ch) - 97 + 5) % 26 + 97) for ch in s)\ndef decode_shift(s): return ''.join(chr((ord(ch) - 97 - 5) % 26 + 97) for ch in s)", "code_2": "def encode_shift(s): return ''.join(chr((ord(ch) - 97 + 5) % 26 + 97) for ch in s.lower())\ndef decode_shift(s): return ''.join(chr((ord(ch) - 97 - 5) % 26 + 97) for ch in s.lower())", "code_3": "def encode_shift(s): return ''.join([chr(97 + (ord(ch) - 97 + 5) % 26) for ch in s])\ndef decode_shift(s): return ''.join([chr(97 + (ord(ch) - 97 - 5) % 26) for ch in s])", "code_4": "def encode_shift(s): return ''.join(map(lambda ch: chr((ord(ch) - 97 + 5) % 26 + 97), s))\ndef decode_shift(s): return ''.join(map(lambda ch: chr((ord(ch) - 97 - 5) % 26 + 97), s))", "code_5": "def encode_shift(s): return ''.join([chr(c) if c > 'y' else chr(c + 5) for c in s])\ndef decode_shift(s): return ''.join([chr(c) if c < 'f' else chr(c - 5) for c in s])", "code_6": "def encode_shift(s): return ''.join([chr(ord(ch) + 5) if ch < 'v' else chr(ord(ch) - 21) for ch in s])\ndef decode_shift(s): return ''.join([chr(ord(ch) - 5) if ch > 'e' else chr(ord(ch) + 21) for ch in s])", "code_7": "def encode_shift(s): return ''.join([chr(ord(ch) + 5) if ord(ch) < 118 else chr(ord(ch) - 21) for ch in s])\ndef decode_shift(s): return ''.join([chr(ord(ch) - 5) if ord(ch) > 101 else chr(ord(ch) + 21) for ch in s])", "code_8": "def encode_shift(s): return ''.join([chr(ord(ch) + 5) if ch.islower() and ch < 'v' else chr(ord(ch) - 21) if ch.islower() else ch for ch in s])\ndef decode_shift(s): return ''.join([chr(ord(ch) - 5) if ch.islower() and ch > 'e' else chr(ord(ch) + 21) if ch.islower() else ch for ch in s])", "code_9": "def encode_shift(s): return ''.join([chr(ord(ch) + 5) if ch.isalpha() and ch.islower() and ch < 'v' else chr(ord(ch) - 21) if ch.isalpha() and ch.islower() else ch for ch in s])\ndef decode_shift(s): return ''.join([chr(ord(ch) - 5) if ch.isalpha() and ch.islower() and ch > 'e' else chr(ord(ch) + 21) if ch.isalpha() and ch.islower() else ch for ch in s])", "code_10": "def encode_shift(s): return ''.join([chr(ord(ch) + 5) if ch.isalpha() and ch.islower() and ch < 'v' else chr(ord(ch) - 21) if ch.isalpha() and ch.islower() and ch > 'u' else ch for ch in s])\ndef decode_shift(s): return ''.join([chr(ord(ch) - 5) if ch.isalpha() and ch.islower() and ch > 'e' else chr(ord(ch) + 21) if ch.isalpha() and ch.islower() and ch < 'f' else ch for ch in s])"}
{"task_id": "51", "prompt": "\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n", "code_1": "def remove_vowels(text):\n    return ''.join(c for c in text if c.lower() not in 'aeiou')", "code_2": "def remove_vowels(text):\n    return text.translate(str.maketrans('', '', 'aeiouAEIOU'))", "code_3": "def remove_vowels(text):\n    return re.sub(r'[aeiou]', '', text, flags=re.IGNORECASE)", "code_4": "def remove_vowels(text):\n    return ''.join(filter(lambda x: x.lower() not in 'aeiou', text))", "code_5": "def remove_vowels(text):\n    return ''.join(c for c in text if c not in 'aeiouAEIOU')", "code_6": "def remove_vowels(text):\n    return ''.join(ch for ch in text if ch not in 'aeiouAEIOU')", "code_7": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in 'aeiou'])", "code_8": "def remove_vowels(text):\n    return ''.join(char for char in text if char not in 'aeiouAEIOU')", "code_9": "def remove_vowels(text):\n    return ''.join(ch for ch in text if ch.lower() not in 'aeiou')", "code_10": "def remove_vowels(text):\n    return ''.join(char for char in text if char not in 'aeiouAEIOU')"}
{"task_id": "52", "prompt": "\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n", "code_1": "def below_threshold(l, t):\n    return all(i < t for i in l)", "code_2": "def below_threshold(l, t):\n    return max(l) < t", "code_3": "def below_threshold(l, t):\n    for i in l:\n        if i >= t:\n            return False\n    return True", "code_4": "def below_threshold(l, t):\n    return sum(i >= t for i in l) == 0", "code_5": "def below_threshold(l, t):\n    return len([i for i in l if i >= t]) == 0", "code_6": "def below_threshold(l, t):\n    return not any(i >= t for i in l)", "code_7": "def below_threshold(l, t):\n    return len(list(filter(lambda x: x >= t, l))) == 0", "code_8": "def below_threshold(l, t):\n    return reduce(lambda x, y: x and y < t, l, True)", "code_9": "def below_threshold(l, t):\n    return min(l) < t and below_threshold(l[1:], t) if l else True", "code_10": "def below_threshold(l, t):\n    return sorted(l)[-1] < t"}
{"task_id": "53", "prompt": "\n\ndef add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n", "code_1": "def add(x: int, y: int) -> int:\n    return x + y", "code_2": "add = lambda x, y: x + y", "code_3": "def add(x: int, y: int) -> int:\n    return sum([x, y])", "code_4": "def add(x: int, y: int) -> int:\n    return functools.reduce(operator.add, [x, y])", "code_5": "def add(x: int, y: int) -> int:\n    return np.add(x, y)", "code_6": "def add(x: int, y: int) -> int:\n    return x.__add__(y)", "code_7": "def add(x: int, y: int) -> int:\n    return eval(f\"{x} + {y}\")", "code_8": "def add(x: int, y: int) -> int:\n    return int(x) + int(y)", "code_9": "def add(x: int, y: int) -> int:\n    return x | y + (x & y) << 1", "code_10": "def add(x: int, y: int) -> int:\n    while y != 0:\n        carry = x & y\n        x = x ^ y\n        y = carry << 1\n    return x"}
{"task_id": "54", "prompt": "\n\ndef same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n", "code_1": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "code_2": "def same_chars(s0: str, s1: str) -> bool:\n    return Counter(s0) == Counter(s1)", "code_3": "def same_chars(s0: str, s1: str) -> bool:\n    return sorted(s0) == sorted(s1)", "code_4": "def same_chars(s0: str, s1: str) -> bool:\n    return collections.Counter(s0) == collections.Counter(s1)", "code_5": "def same_chars(s0: str, s1: str) -> bool:\n    return len(s0) == len(s1) and not (set(s0) - set(s1))", "code_6": "def same_chars(s0: str, s1: str) -> bool:\n    return len(s0) == len(s1) and all(s0.count(c) == s1.count(c) for c in s0)", "code_7": "def same_chars(s0: str, s1: str) -> bool:\n    return len(s0) == len(s1) and all(s0.count(c) == s1.count(c) for c in set(s0))", "code_8": "def same_chars(s0: str, s1: str) -> bool:\n    return collections.Counter(s0) & collections.Counter(s1) == collections.Counter(s0)", "code_9": "def same_chars(s0: str, s1: str) -> bool:\n    return collections.Counter(s0).items() <= collections.Counter(s1).items()", "code_10": "def same_chars(s0: str, s1: str) -> bool:\n    return not (collections.Counter(s0) - collections.Counter(s1))"}
{"task_id": "55", "prompt": "\n\ndef fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n", "code_1": "def fib(n):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a", "code_2": "def fib(n):\n    return ((1 + 5 ** 0.5) / 2) ** n / 5 ** 0.5", "code_3": "def fib(n):\n    return round(((1 + 5 ** 0.5) / 2) ** n / 5 ** 0.5)", "code_4": "def fib(n):\n    return int(((1 + 5 ** 0.5) / 2) ** n / 5 ** 0.5 + 0.5)", "code_5": "def fib(n):\n    return int(((1 + 5 ** 0.5) / 2) ** n / 5 ** 0.5)", "code_6": "def fib(n):\n    return int((((1 + 5 ** 0.5) / 2) ** n) / 5 ** 0.5)", "code_7": "def fib(n):\n    return int((((1 + 5 ** 0.5) / 2) ** n) / (5 ** 0.5))", "code_8": "def fib(n):\n    return int((((1 + 5 ** 0.5) / 2) ** n) / (2 ** 0.5 * 5 ** 0.5))", "code_9": "def fib(n):\n    return int((((1 + 5 ** 0.5) / 2) ** n) / (2 ** 0.5 * 5 ** 0.5 + 0.5))", "code_10": "def fib(n):\n    return int((((1 + 5 ** 0.5) / 2) ** n) / (2 ** 0.5 * 5 ** 0.5 - 0.5))"}
{"task_id": "56", "prompt": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n", "code_1": "def correct_bracketing(brackets: str):\n    return brackets.count(\"<\") == brackets.count(\">\")", "code_2": "def correct_bracketing(brackets: str):\n    open_count = close_count = 0\n    for b in brackets:\n        if b == \"<\":\n            open_count += 1\n        elif b == \">\":\n            close_count += 1\n    return open_count == close_count", "code_3": "def correct_bracketing(brackets: str):\n    stack = []\n    for b in brackets:\n        if b == \"<\":\n            stack.append(b)\n        elif b == \">\" and stack:\n            stack.pop()\n        else:\n            return False\n    return not stack", "code_4": "def correct_bracketing(brackets: str):\n    while \"<>\" in brackets:\n        brackets = brackets.replace(\"<>\", \"\")\n    return not brackets", "code_5": "def correct_bracketing(brackets: str):\n    diff = 0\n    for b in brackets:\n        diff += 1 if b == \"<\" else -1\n        if diff < 0:\n            return False\n    return diff == 0", "code_6": "def correct_bracketing(brackets: str):\n    return sum(1 if b == \"<\" else -1 for b in brackets) == 0", "code_7": "def correct_bracketing(brackets: str):\n    return brackets.translate(str.maketrans(\"<>\", \"\")) == \"\"", "code_8": "def correct_bracketing(brackets: str):\n    return all(brackets.count(\"<\") == brackets.count(\">\"))", "code_9": "def correct_bracketing(brackets: str):\n    return len(brackets.replace(\"<\", \"\").replace(\">\", \"\")) == 0", "code_10": "def correct_bracketing(brackets: str):\n    return not any(i < 0 for i in accumulate(1 if b == \"<\" else -1 for b in brackets))"}
{"task_id": "57", "prompt": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n", "code_1": "def monotonic(l):\n    return all(x<=y for x, y in zip(l, l[1:])) or all(x>=y for x, y in zip(l, l[1:]))", "code_2": "def monotonic(l):\n    return l == sorted(l) or l == sorted(l, reverse=True)", "code_3": "def monotonic(l):\n    diff = [a-b for a, b in zip(l, l[1:])]\n    return all(i >= 0 for i in diff) or all(i <= 0 for i in diff)", "code_4": "def monotonic(l):\n    return (all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or\n            all(l[i] >= l[i + 1] for i in range(len(l) - 1)))", "code_5": "def monotonic(l):\n    return len(set(x<y for x, y in zip(l, l[1:]))) <= 1", "code_6": "def monotonic(l):\n    return reduce(lambda a, b: a if (a and (a[-1] <= b)) else (a + [b]), l[1:], l[:1]) == l or reduce(lambda a, b: a if (a and (a[-1] >= b)) else (a + [b]), l[1:], l[:1]) == l", "code_7": "def monotonic(l):\n    return l in [sorted(l), sorted(l, reverse=True)]", "code_8": "def monotonic(l):\n    return l == list(sorted(l)) or l == list(reversed(sorted(l)))", "code_9": "def monotonic(l):\n    return l == sorted(l)[:len(l)] or l == sorted(l, reverse=True)[:len(l)]", "code_10": "def monotonic(l):\n    return all(a <= b for a, b in zip(l, l[1:])) or all(a >= b for a, b in zip(l, l[1:]))"}
{"task_id": "58", "prompt": "\n\ndef common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n", "code_1": "def common(l1, l2):\n    return sorted(set(l1) & set(l2))", "code_2": "def common(l1, l2):\n    return sorted(list(set(l1).intersection(l2)))", "code_3": "def common(l1, l2):\n    return sorted(list(filter(lambda x: x in l2, set(l1))))", "code_4": "def common(l1, l2):\n    return sorted([x for x in set(l1) if x in l2])", "code_5": "def common(l1, l2):\n    return sorted(set(l1).intersection(set(l2)))", "code_6": "def common(l1, l2):\n    return sorted(list(set(l1) & set(l2)))", "code_7": "def common(l1, l2):\n    return sorted(list(set(l1).intersection(set(l2))))", "code_8": "def common(l1, l2):\n    return sorted(list(set(l1) & set(l2)))", "code_9": "def common(l1, l2):\n    return sorted(list(set(l1).intersection(l2)))", "code_10": "def common(l1, l2):\n    return sorted(list(set(l1) & set(l2)))"}
{"task_id": "59", "prompt": "\n\ndef largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n", "code_1": "def largest_prime_factor(n):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "code_2": "def largest_prime_factor(n):\n    while n % 2 == 0:\n        n = n // 2\n    i = 3\n    while i * i <= n:\n        while n % i == 0:\n            n = n // i\n        i += 2\n    if n > 2:\n        return n\n    else:\n        return i - 2", "code_3": "def largest_prime_factor(n):\n    i = 2\n    max_prime = -1\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            max_prime = i\n    if n > 2:\n        max_prime = n\n    return max_prime", "code_4": "def largest_prime_factor(n):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return i if n == 1 else n", "code_5": "def largest_prime_factor(n):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n if n > 1 else i - 1", "code_6": "def largest_prime_factor(n):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return i if i > n else n", "code_7": "def largest_prime_factor(n):\n    i = 2\n    while i * i <= n:\n        while n % i == 0:\n            n //= i\n        i += 1\n    return n", "code_8": "def largest_prime_factor(n):\n    i = 2\n    while i * i <= n:\n        while n % i == 0:\n            n //= i\n        i += 1 if i == 2 else 2\n    return n", "code_9": "def largest_prime_factor(n):\n    i = 2\n    while i * i <= n:\n        while n % i == 0:\n            n //= i\n        i += 1\n    return i if n == 1 else n", "code_10": "def largest_prime_factor(n):\n    i = 2\n    while i * i <= n:\n        while n % i == 0:\n            n //= i\n        i += 1\n    return i if i > 2 else n"}
{"task_id": "60", "prompt": "\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n", "code_1": "def sum_to_n(n: int): return n * (n + 1) // 2", "code_2": "def sum_to_n(n: int): return sum(range(n + 1))", "code_3": "def sum_to_n(n: int): return sum([i for i in range(1, n + 1)])", "code_4": "def sum_to_n(n: int): return sum(i for i in range(1, n + 1))", "code_5": "def sum_to_n(n: int): return reduce(lambda x, y: x + y, range(1, n + 1))", "code_6": "def sum_to_n(n: int): return sum(itertools.islice(itertools.count(1), n))", "code_7": "def sum_to_n(n: int): return n * (n + 1) >> 1", "code_8": "def sum_to_n(n: int): return (n + 1) * n // 2", "code_9": "def sum_to_n(n: int): return (n * (n + 1)) // 2", "code_10": "def sum_to_n(n: int): return (n + 1) * n // 2"}
{"task_id": "61", "prompt": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n", "code_1": "def correct_bracketing(brackets: str):\n    count = 0\n    for b in brackets:\n        if b == '(':\n            count += 1\n        elif b == ')':\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0", "code_2": "def correct_bracketing(brackets: str):\n    stack = []\n    for b in brackets:\n        if b == '(':\n            stack.append(b)\n        elif b == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack", "code_3": "def correct_bracketing(brackets: str):\n    while '()' in brackets:\n        brackets = brackets.replace('()', '')\n    return not brackets", "code_4": "def correct_bracketing(brackets: str):\n    return brackets.count('(') == brackets.count(')')", "code_5": "def correct_bracketing(brackets: str):\n    open_count = sum(1 for b in brackets if b == '(')\n    close_count = sum(1 for b in brackets if b == ')')\n    return open_count == close_count", "code_6": "def correct_bracketing(brackets: str):\n    return brackets.translate(str.maketrans('', '', '()')) == ''", "code_7": "def correct_bracketing(brackets: str):\n    return len(re.sub(r'\\(\\)', '', brackets)) == 0", "code_8": "def correct_bracketing(brackets: str):\n    return all(brackets.count('(') == brackets.count(')') for _ in brackets)", "code_9": "def correct_bracketing(brackets: str):\n    return reduce(lambda x, y: x + (1 if y == '(' else -1), brackets, 0) == 0", "code_10": "def correct_bracketing(brackets: str):\n    return sum(1 if b == '(' else -1 for b in brackets) == 0"}
{"task_id": "62", "prompt": "\n\ndef derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n", "code_1": "def derivative(xs):\n    return [i * x for i, x in enumerate(xs)][1:]", "code_2": "def derivative(xs):\n    return [x * i for i, x in enumerate(xs) if i > 0]", "code_3": "def derivative(xs):\n    return list(map(lambda i: i * xs[i], range(1, len(xs))))", "code_4": "def derivative(xs):\n    return [x * i for i, x in enumerate(xs[1:], start=1)]", "code_5": "def derivative(xs):\n    return [i * x for i, x in enumerate(xs) if i][1:]", "code_6": "def derivative(xs):\n    return [x * i for i, x in enumerate(xs) if i != 0]", "code_7": "def derivative(xs):\n    return [i * x for i, x in enumerate(xs) if i > 0]", "code_8": "def derivative(xs):\n    return [i * x for i, x in enumerate(xs)][1:len(xs)]", "code_9": "def derivative(xs):\n    return [i * x for i, x in enumerate(xs) if i][1:]", "code_10": "def derivative(xs):\n    return [i * x for i, x in enumerate(xs) if i != 0]"}
{"task_id": "63", "prompt": "\n\ndef fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n", "code_1": "def fibfib(n):\n    a, b, c = 0, 0, 1\n    for _ in range(2, n):\n        a, b, c = b, c, a + b + c\n    return c", "code_2": "def fibfib(n):\n    fib = [0, 0, 1] + [0] * (n - 2)\n    for i in range(3, n + 1):\n        fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3]\n    return fib[n]", "code_3": "def fibfib(n):\n    if n < 3:\n        return [0, 0, 1][n]\n    a, b, c = 0, 0, 1\n    for _ in range(n - 2):\n        a, b, c = b, c, a + b + c\n    return c", "code_4": "def fibfib(n):\n    if n == 0:\n        return 0\n    elif n == 1 or n == 2:\n        return 1 if n == 2 else 0\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(n - 2):\n            a, b, c = b, c, a + b + c\n        return c", "code_5": "def fibfib(n):\n    fib = [0, 0, 1]\n    while len(fib) <= n:\n        fib.append(sum(fib[-3:]))\n    return fib[n]", "code_6": "def fibfib(n):\n    fib = [0, 0, 1]\n    for _ in range(n - 2):\n        fib.append(sum(fib[-3:]))\n    return fib[n]", "code_7": "def fibfib(n):\n    if n < 2:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        fib = [0, 0, 1]\n        for _ in range(n - 2):\n            fib.append(sum(fib[-3:]))\n        return fib[-1]", "code_8": "def fibfib(n):\n    fib = [0, 0, 1]\n    for _ in range(n - 2):\n        fib.append(fib[-1] + fib[-2] + fib[-3])\n    return fib[n]", "code_9": "def fibfib(n):\n    if n < 3:\n        return [0, 0, 1][n]\n    fib = [0, 0, 1]\n    for _ in range(n - 2):\n        fib.append(fib[-1] + fib[-2] + fib[-3])\n    return fib[-1]", "code_10": "def fibfib(n):\n    fib = [0, 0, 1]\n    for _ in range(n - 2):\n        fib.append(fib[-3] + fib[-2] + fib[-1])\n    return fib[n]"}
{"task_id": "64", "prompt": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n", "code_1": "def vowels_count(s):\n    return sum(1 for c in s.lower() if c in 'aeiou' or (c == 'y' and s[-1] == 'y'))", "code_2": "def vowels_count(s):\n    return sum(c in 'aeiou' or (c == 'y' and s[-1] == 'y') for c in s.lower())", "code_3": "def vowels_count(s):\n    vowels = set('aeiou')\n    return sum(c in vowels or (c == 'y' and s[-1] == 'y') for c in s.lower())", "code_4": "def vowels_count(s):\n    vowels = 'aeiou'\n    return sum(s.lower().count(v) for v in vowels) + (s[-1].lower() == 'y')", "code_5": "def vowels_count(s):\n    s = s.lower()\n    return s.count('a') + s.count('e') + s.count('i') + s.count('o') + s.count('u') + (s[-1] == 'y')", "code_6": "def vowels_count(s):\n    s = s.lower()\n    return sum(map(s.count, 'aeiou')) + (s[-1] == 'y')", "code_7": "def vowels_count(s):\n    s = s.lower()\n    return len([c for c in s if c in 'aeiou'] + ['y'] if s[-1] == 'y' else [])", "code_8": "def vowels_count(s):\n    s = s.lower()\n    return len(list(filter(lambda c: c in 'aeiou' or (c == 'y' and s[-1] == 'y'), s)))", "code_9": "def vowels_count(s):\n    s = s.lower()\n    return len([c for c in s if c in 'aeiouy' and (c != 'y' or s[-1] == 'y')])", "code_10": "def vowels_count(s):\n    s = s.lower()\n    return len([c for c in s if c in 'aeiou' or c == 'y' and s.endswith('y')])"}
{"task_id": "65", "prompt": "\ndef circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n", "code_1": "def circular_shift(x, shift):\n    s = str(x)\n    return s[-shift:] + s[:-shift] if shift < len(s) else s[::-1]", "code_2": "def circular_shift(x, shift):\n    s = str(x)\n    return (s[shift:] + s[:shift]) if shift < len(s) else s[::-1]", "code_3": "def circular_shift(x, shift):\n    s = str(x)\n    return s[shift:] + s[:shift] if shift < len(s) else s[::-1]", "code_4": "def circular_shift(x, shift):\n    s = str(x)\n    return s[-shift:] + s[:-shift] if shift < len(s) else s[::-1]", "code_5": "def circular_shift(x, shift):\n    s = str(x)\n    return s[shift:] + s[:shift] if shift < len(s) else s[::-1]", "code_6": "def circular_shift(x, shift):\n    s = str(x)\n    return s[-shift:] + s[:-shift] if shift < len(s) else s[::-1]", "code_7": "def circular_shift(x, shift):\n    s = str(x)\n    return s[shift:] + s[:shift] if shift < len(s) else s[::-1]", "code_8": "def circular_shift(x, shift):\n    s = str(x)\n    return s[-shift:] + s[:-shift] if shift < len(s) else s[::-1]", "code_9": "def circular_shift(x, shift):\n    s = str(x)\n    return s[shift:] + s[:shift] if shift < len(s) else s[::-1]", "code_10": "def circular_shift(x, shift):\n    s = str(x)\n    return s[-shift:] + s[:-shift] if shift < len(s) else s[::-1]"}
{"task_id": "66", "prompt": "\ndef digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n", "code_1": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "code_2": "def digitSum(s):\n    return sum(map(ord, filter(str.isupper, s)))", "code_3": "def digitSum(s):\n    return sum(ord(c) for c in s if 'A' <= c <= 'Z')", "code_4": "def digitSum(s):\n    return sum(ord(c) for c in s if c >= 'A' and c <= 'Z')", "code_5": "def digitSum(s):\n    return sum(ord(c) for c in s if c.islower() is False)", "code_6": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isalpha() and c.isupper())", "code_7": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isalpha() and c != c.lower())", "code_8": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isalpha() and c.upper() == c)", "code_9": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isalpha() and c.lower() != c)", "code_10": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isalpha() and c.swapcase() == c)"}
{"task_id": "67", "prompt": "\ndef fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n", "code_1": "def fruit_distribution(s, n):\n    a, o = map(int, s.split(' apples and ')[0], s.split(' oranges')[0].split()[-1])\n    return n - a - o", "code_2": "import re\ndef fruit_distribution(s, n):\n    a, o = map(int, re.findall(r'\\d+', s))\n    return n - a - o", "code_3": "def fruit_distribution(s, n):\n    a = int(s.split()[0])\n    o = int(s.split()[5])\n    return n - a - o", "code_4": "def fruit_distribution(s, n):\n    a = int(''.join(filter(str.isdigit, s.split()[0])))\n    o = int(''.join(filter(str.isdigit, s.split()[5])))\n    return n - a - o", "code_5": "def fruit_distribution(s, n):\n    a = int(''.join(c for c in s if c.isdigit()))\n    o = int(''.join(c for c in s.split()[5] if c.isdigit()))\n    return n - a - o", "code_6": "def fruit_distribution(s, n):\n    a, o = [int(i) for i in s.split() if i.isdigit()]\n    return n - a - o", "code_7": "def fruit_distribution(s, n):\n    a, o = [int(x) for x in s.split() if x.isdigit()]\n    return n - sum([a, o])", "code_8": "def fruit_distribution(s, n):\n    a, o = [int(c) for c in s.split() if c.isdigit()]\n    return n - a - o", "code_9": "def fruit_distribution(s, n):\n    a, o = map(int, filter(str.isdigit, s.split()))\n    return n - a - o", "code_10": "def fruit_distribution(s, n):\n    a, o = map(int, [i for i in s.split() if i.isdigit()])\n    return n - a - o"}
{"task_id": "68", "prompt": "\ndef pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n", "code_1": "def pluck(arr):\n    min_val, min_idx = float('inf'), -1\n    for i, val in enumerate(arr):\n        if val % 2 == 0 and val < min_val:\n            min_val, min_idx = val, i\n    return [min_val, min_idx] if min_idx != -1 else []", "code_2": "def pluck(arr):\n    evens = [(val, i) for i, val in enumerate(arr) if val % 2 == 0]\n    return min(evens, key=lambda x: (x[0], x[1])) if evens else []", "code_3": "def pluck(arr):\n    return min((val, i) for i, val in enumerate(arr) if val % 2 == 0) if arr else []", "code_4": "def pluck(arr):\n    return next((val, i) for i, val in enumerate(arr) if val % 2 == 0 and val == min(x for x in arr if x % 2 == 0)) if arr else []", "code_5": "def pluck(arr):\n    return min(filter(lambda x: x[0] % 2 == 0, enumerate(arr)), default=[])", "code_6": "def pluck(arr):\n    return min((val, i) for i, val in enumerate(arr) if val % 2 == 0, default=[])", "code_7": "def pluck(arr):\n    return min((val, i) for i, val in enumerate(arr) if val % 2 == 0, key=lambda x: (x[0], x[1]), default=[])", "code_8": "def pluck(arr):\n    return min((val, i) for i, val in enumerate(arr) if val % 2 == 0, key=itemgetter(0, 1), default=[])", "code_9": "def pluck(arr):\n    return min(filter(lambda x: x[1] % 2 == 0, enumerate(arr)), key=itemgetter(1, 0), default=[])", "code_10": "def pluck(arr):\n    return min((val, i) for i, val in enumerate(arr) if val % 2 == 0, key=lambda x: (x[0], x[1]), default=[])"}
{"task_id": "69", "prompt": "\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n", "code_1": "def search(lst):\n    count = {}\n    for num in lst:\n        count[num] = count.get(num, 0) + 1\n    for num in sorted(count.keys(), reverse=True):\n        if count[num] >= num:\n            return num\n    return -1", "code_2": "def search(lst):\n    count = [0] * (max(lst) + 1)\n    for num in lst:\n        count[num] += 1\n    for num in range(len(count) - 1, 0, -1):\n        if count[num] >= num:\n            return num\n    return -1", "code_3": "def search(lst):\n    count = [0] * (max(lst) + 1)\n    for num in lst:\n        count[num] += 1\n    return next((i for i in range(len(count) - 1, 0, -1) if count[i] >= i), -1)", "code_4": "from collections import Counter\ndef search(lst):\n    count = Counter(lst)\n    for num in sorted(count.keys(), reverse=True):\n        if count[num] >= num:\n            return num\n    return -1", "code_5": "def search(lst):\n    count = [0] * (max(lst) + 1)\n    for num in lst:\n        count[num] += 1\n    return max((i for i in range(1, len(count)) if count[i] >= i), default=-1)", "code_6": "def search(lst):\n    count = {}\n    for num in lst:\n        count[num] = count.get(num, 0) + 1\n    return max((k for k, v in count.items() if v >= k), default=-1)", "code_7": "def search(lst):\n    count = [0] * (max(lst) + 1)\n    for num in lst:\n        count[num] += 1\n    for i in range(len(count) - 1, 0, -1):\n        if count[i] >= i:\n            return i\n    return -1", "code_8": "from collections import Counter\ndef search(lst):\n    count = Counter(lst)\n    return max((k for k, v in count.items() if v >= k), default=-1)", "code_9": "def search(lst):\n    count = [0] * (max(lst) + 1)\n    for num in lst:\n        count[num] += 1\n    for i in reversed(range(1, len(count))):\n        if count[i] >= i:\n            return i\n    return -1", "code_10": "def search(lst):\n    count = {}\n    for num in lst:\n        count[num] = count.get(num, 0) + 1\n    return next((num for num in reversed(sorted(count.keys())) if count[num] >= num), -1)"}
{"task_id": "70", "prompt": "\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n", "code_1": "def strange_sort_list(lst):\n    lst.sort()\n    i, j = 1, len(lst) - 1\n    while i < j:\n        lst[i], lst[j] = lst[j], lst[i]\n        i += 1\n        j -= 1\n    return lst", "code_2": "def strange_sort_list(lst):\n    lst.sort()\n    return [val for pair in zip(lst[::2], lst[-1::-2]) for val in pair] + lst[len(lst) % 2:]", "code_3": "def strange_sort_list(lst):\n    lst.sort()\n    return [x for i in zip(lst[:len(lst)//2], lst[len(lst)//2:][::-1]) for x in i] + lst[len(lst)%2:]", "code_4": "def strange_sort_list(lst):\n    lst.sort()\n    return [x for pair in zip(lst[:len(lst)//2], lst[len(lst)//2-1::-1]) for x in pair] + lst[len(lst)%2:]", "code_5": "def strange_sort_list(lst):\n    lst.sort()\n    return [x for pair in zip(lst[:len(lst)//2], reversed(lst[len(lst)//2:])) for x in pair] + lst[len(lst)%2:]", "code_6": "def strange_sort_list(lst):\n    lst.sort()\n    return [val for pair in zip(lst[::2], lst[len(lst) - 1::-2]) for val in pair] + lst[len(lst) % 2:]", "code_7": "def strange_sort_list(lst):\n    lst.sort()\n    return [val for pair in zip(lst[::2], lst[-1::-2]) for val in pair] + lst[len(lst) % 2:]", "code_8": "def strange_sort_list(lst):\n    lst.sort()\n    return [val for pair in zip(lst[::2], lst[len(lst) - 1::-2]) for val in pair] + lst[len(lst) % 2:]", "code_9": "def strange_sort_list(lst):\n    lst.sort()\n    return [val for pair in zip(lst[::2], lst[-1::-2]) for val in pair] + lst[len(lst) % 2:]", "code_10": "def strange_sort_list(lst):\n    lst.sort()\n    return [val for pair in zip(lst[::2], lst[len(lst) - 1::-2]) for val in pair] + lst[len(lst) % 2:]"}
{"task_id": "71", "prompt": "\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n", "code_1": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return round((s * (s - a) * (s - b) * (s - c)) ** 0.5, 2)\n    return -1", "code_2": "def triangle_area(a, b, c):\n    sides = sorted([a, b, c])\n    if sides[0] + sides[1] > sides[2]:\n        s = sum(sides) / 2\n        return round((s * (s - sides[0]) * (s - sides[1]) * (s - sides[2])) ** 0.5, 2)\n    return -1", "code_3": "import math\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return round(math.sqrt(s * (s - a) * (s - b) * (s - c)), 2)\n    return -1", "code_4": "def triangle_area(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    s = (a + b + c) / 2\n    return round((s * (s - a) * (s - b) * (s - c)) ** 0.5, 2)", "code_5": "def triangle_area(a, b, c):\n    if not (a + b > c and a + c > b and b + c > a):\n        return -1\n    s = (a + b + c) / 2\n    return round((s * (s - a) * (s - b) * (s - c)) ** 0.5, 2)", "code_6": "def triangle_area(a, b, c):\n    sides = sorted([a, b, c])\n    if sides[2] >= sides[0] + sides[1]:\n        return -1\n    s = sum(sides) / 2\n    return round((s * (s - sides[0]) * (s - sides[1]) * (s - sides[2])) ** 0.5, 2)", "code_7": "import math\ndef triangle_area(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    s = (a + b + c) / 2\n    return round(math.sqrt(s * (s - a) * (s - b) * (s - c)), 2)", "code_8": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = sum([a, b, c]) / 2\n        return round((s * (s - a) * (s - b) * (s - c)) ** 0.5, 2)\n    return -1", "code_9": "def triangle_area(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    s = (a + b + c) / 2\n    return round((s * (s - a) * (s - b) * (s - c)) ** 0.5, 2)", "code_10": "import math\ndef triangle_area(a, b, c):\n    if not (a + b > c and a + c > b and b + c > a):\n        return -1\n    s = (a + b + c) / 2\n    return round(math.sqrt(s * (s - a) * (s - b) * (s - c)), 2)"}
{"task_id": "72", "prompt": "\ndef will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n", "code_1": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "code_2": "def will_it_fly(q, w):\n    return all(q[i] == q[-i-1] for i in range(len(q)//2)) and sum(q) <= w", "code_3": "def will_it_fly(q, w):\n    return q[::-1] == q and sum(q) <= w", "code_4": "def will_it_fly(q, w):\n    return q == list(reversed(q)) and sum(q) <= w", "code_5": "def will_it_fly(q, w):\n    return q[:] == q[::-1] and sum(q) <= w", "code_6": "def will_it_fly(q, w):\n    return q[::-1] == q[:] and sum(q) <= w", "code_7": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "code_8": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "code_9": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "code_10": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w"}
{"task_id": "73", "prompt": "\ndef smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n", "code_1": "def smallest_change(arr):\n    return sum(a != b for a, b in zip(arr, arr[::-1])) // 2", "code_2": "def smallest_change(arr):\n    return len([1 for a, b in zip(arr, reversed(arr)) if a != b]) // 2", "code_3": "def smallest_change(arr):\n    return sum(map(lambda x: x[0] != x[1], zip(arr, arr[::-1]))) // 2", "code_4": "from collections import Counter\ndef smallest_change(arr):\n    c1, c2 = Counter(arr), Counter(arr[::-1])\n    return sum((c1 - c2).values()) // 2", "code_5": "def smallest_change(arr):\n    return sum(abs(a - b) for a, b in zip(arr, arr[::-1])) // 2", "code_6": "def smallest_change(arr):\n    return sum(a != b for a, b in zip(arr, reversed(arr))) // 2", "code_7": "def smallest_change(arr):\n    return len([i for i in range(len(arr) // 2) if arr[i] != arr[-i - 1]])", "code_8": "def smallest_change(arr):\n    return sum(arr[i] != arr[-i - 1] for i in range(len(arr) // 2))", "code_9": "def smallest_change(arr):\n    return sum(a != b for a, b in zip(arr, arr[::-1])) >> 1", "code_10": "def smallest_change(arr):\n    return sum(map(operator.ne, arr, arr[::-1])) // 2"}
{"task_id": "74", "prompt": "\ndef total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n", "code_1": "def total_match(lst1, lst2):\n    return lst1 if sum(len(s) for s in lst1) < sum(len(s) for s in lst2) else lst2", "code_2": "def total_match(lst1, lst2):\n    return min(lst1, lst2, key=lambda lst: sum(len(s) for s in lst))", "code_3": "def total_match(lst1, lst2):\n    return lst1 if sum(map(len, lst1)) < sum(map(len, lst2)) else lst2", "code_4": "def total_match(lst1, lst2):\n    return sorted([lst1, lst2], key=lambda lst: sum(len(s) for s in lst))[0]", "code_5": "def total_match(lst1, lst2):\n    return [lst1, lst2][sum(map(len, lst2)) < sum(map(len, lst1))]", "code_6": "def total_match(lst1, lst2):\n    return lst1 if len(''.join(lst1)) < len(''.join(lst2)) else lst2", "code_7": "def total_match(lst1, lst2):\n    return lst1 if sum(len(i) for i in lst1) <= sum(len(i) for i in lst2) else lst2", "code_8": "def total_match(lst1, lst2):\n    return lst1 if sum(len(s) for s in lst1) <= sum(len(s) for s in lst2) else lst2", "code_9": "def total_match(lst1, lst2):\n    return lst1 if sum(len(i) for i in lst1) < sum(len(i) for i in lst2) else lst2", "code_10": "def total_match(lst1, lst2):\n    return lst1 if sum(map(len, ''.join(lst1))) < sum(map(len, ''.join(lst2))) else lst2"}
{"task_id": "75", "prompt": "\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n", "code_1": "def is_multiply_prime(a):\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    for i in primes:\n        if a % i == 0:\n            for j in primes:\n                if a % j == 0 and a // i % j == 0 and a // i // j < 2:\n                    return True\n    return False", "code_2": "def is_multiply_prime(a):\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    for i in primes:\n        if a % i == 0:\n            for j in primes:\n                if a % j == 0 and a // i % j == 0:\n                    if a // i // j in primes:\n                        return True\n    return False", "code_3": "def is_multiply_prime(a):\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    for i in primes:\n        if a % i == 0:\n            b = a // i\n            for j in primes:\n                if b % j == 0:\n                    if b // j in primes:\n                        return True\n    return False", "code_4": "def is_multiply_prime(a):\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    for i in primes:\n        if a % i == 0:\n            b = a // i\n            for j in primes:\n                if b % j == 0 and b // j in primes:\n                    return True\n    return False", "code_5": "def is_multiply_prime(a):\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    for i in range(len(primes)):\n        if a % primes[i] == 0:\n            b = a // primes[i]\n            for j in range(i, len(primes)):\n                if b % primes[j] == 0 and b // primes[j] in primes:\n                    return True\n    return False", "code_6": "def is_multiply_prime(a):\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    for i in primes:\n        if a % i == 0:\n            b = a // i\n            for j in primes:\n                if j >= i and b % j == 0 and b // j in primes:\n                    return True\n    return False", "code_7": "def is_multiply_prime(a):\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    for i in range(len(primes)):\n        if a % primes[i] == 0:\n            b = a // primes[i]\n            for j in range(i, len(primes)):\n                if b % primes[j] == 0:\n                    if b // primes[j] in primes:\n                        return True\n    return False", "code_8": "def is_multiply_prime(a):\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    for i in primes:\n        if a % i == 0:\n            b = a // i\n            for j in primes:\n                if j >= i and b % j == 0:\n                    if b // j in primes:\n                        return True\n    return False", "code_9": "def is_multiply_prime(a):\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    for i in range(len(primes)):\n        if a % primes[i] == 0:\n            b = a // primes[i]\n            for j in range(i, len(primes)):\n                if b % primes[j] == 0 and b // primes[j] in primes:\n                    return True\n    return False", "code_10": "def is_multiply_prime(a):\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    for i in primes:\n        if a % i == 0:\n            b = a // i\n            for j in primes:\n                if j >= i and b % j == 0 and b // j in primes:\n                    return True\n    return False"}
{"task_id": "76", "prompt": "\ndef is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n", "code_1": "def is_simple_power(x, n):\n    return x > 0 and (x == 1 or n > 1 and x % n == 0 and is_simple_power(x // n, n))", "code_2": "def is_simple_power(x, n):\n    if x < 1 or n < 2:\n        return False\n    while x % n == 0:\n        x /= n\n    return x == 1", "code_3": "def is_simple_power(x, n):\n    if x < 1 or n < 2:\n        return False\n    return n ** int(math.log(x, n)) == x", "code_4": "def is_simple_power(x, n):\n    if x < 1 or n < 2:\n        return False\n    return all(x % n**i != 0 for i in range(1, int(math.log(x, n)) + 1))", "code_5": "def is_simple_power(x, n):\n    if x < 1 or n < 2:\n        return False\n    return any(n**i == x for i in range(int(math.log(x, n)) + 1))", "code_6": "def is_simple_power(x, n):\n    if x < 1 or n < 2:\n        return False\n    return bin(x).count('1') == 1 and x % n == 0", "code_7": "def is_simple_power(x, n):\n    if x < 1 or n < 2:\n        return False\n    return math.log(x, n).is_integer()", "code_8": "def is_simple_power(x, n):\n    if x < 1 or n < 2:\n        return False\n    return functools.reduce(lambda a, b: a * b, [n] * (int(math.log(x, n)) if math.log(x, n).is_integer() else 0)) == x", "code_9": "def is_simple_power(x, n):\n    if x < 1 or n < 2:\n        return False\n    return np.log(x) / np.log(n) % 1 == 0", "code_10": "def is_simple_power(x, n):\n    if x < 1 or n < 2:\n        return False\n    return x == reduce(lambda a, _: a * n, range(int(math.log(x, n)) + 1), 1)"}
{"task_id": "77", "prompt": "\ndef iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n", "code_1": "def iscube(a):\n    return round(a ** (", "code_2": "/ 3)) ** 3 == a", "code_3": "def iscube(a):\n    return int(round(abs(a) ** (", "code_4": "/ 3))) ** 3 == abs(a)", "code_5": "def iscube(a):\n    a = abs(a)\n    return (a ** (", "code_6": "/ 3)).is_integer()", "code_7": "def iscube(a):\n    a = abs(a)\n    return a == int(a ** (", "code_8": "/ 3)) ** 3", "code_9": "def iscube(a):\n    a = abs(a)\n    return a == round(a ** (", "code_10": "/ 3)) ** 3", "code_11": "def iscube(a):\n    return a == int(round(abs(a) ** (", "code_12": "/ 3))) ** 3", "code_13": "def iscube(a):\n    a = abs(a)\n    return int(a ** (", "code_14": "/ 3) + 0.5) ** 3 == a", "code_15": "def iscube(a):\n    a = abs(a)\n    c = round(a ** (", "code_16": "/ 3))\n    return c * c * c == a", "code_17": "def iscube(a):\n    a = abs(a)\n    c = int(a ** (", "code_18": "/ 3) + 0.5)\n    return c * c * c == a", "code_19": "def iscube(a):\n    a = abs(a)\n    c = int(a ** (", "code_20": "/ 3))\n    return c * c * c == a or (c + 1) * (c + 1) * (c + 1) == a"}
{"task_id": "78", "prompt": "\ndef hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n", "code_1": "def hex_key(num):\n    return sum(1 for c in num if c in '2357BD')", "code_2": "def hex_key(num):\n    return sum(c in '2357BD' for c in num)", "code_3": "def hex_key(num):\n    return len([c for c in num if c in '2357BD'])", "code_4": "def hex_key(num):\n    return num.count('2') + num.count('3') + num.count('5') + num.count('7') + num.count('B') + num.count('D')", "code_5": "def hex_key(num):\n    primes = {'2', '3', '5', '7', 'B', 'D'}\n    return sum(c in primes for c in num)", "code_6": "def hex_key(num):\n    return sum(num.count(c) for c in '2357BD')", "code_7": "def hex_key(num):\n    return len(list(filter(lambda c: c in '2357BD', num)))", "code_8": "def hex_key(num):\n    return len([c for c in num if c in set('2357BD')])", "code_9": "def hex_key(num):\n    return sum(num.count(c) for c in '2357BD')", "code_10": "def hex_key(num):\n    return len([c for c in num if c in ('2', '3', '5', '7', 'B', 'D')])"}
{"task_id": "79", "prompt": "\ndef decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n", "code_1": "def decimal_to_binary(decimal):\n    return f\"db{bin(decimal)[2:]}db\"", "code_2": "def decimal_to_binary(decimal):\n    return 'db' + format(decimal, 'b') + 'db'", "code_3": "def decimal_to_binary(decimal):\n    return 'db%sdb' % format(decimal, 'b')", "code_4": "def decimal_to_binary(decimal):\n    return 'db{0:b}db'.format(decimal)", "code_5": "def decimal_to_binary(decimal):\n    return 'db' + ''.join(format(decimal, 'b')) + 'db'", "code_6": "def decimal_to_binary(decimal):\n    return 'db' + ''.join(map(str, bin(decimal)[2:])) + 'db'", "code_7": "def decimal_to_binary(decimal):\n    return 'db' + ''.join(list(bin(decimal)[2:])) + 'db'", "code_8": "def decimal_to_binary(decimal):\n    return 'db' + ''.join(str(x) for x in bin(decimal)[2:]) + 'db'", "code_9": "def decimal_to_binary(decimal):\n    return 'db' + ''.join(str(int(x)) for x in bin(decimal)[2:]) + 'db'", "code_10": "def decimal_to_binary(decimal):\n    return 'db' + ''.join(str(int(b)) for b in bin(decimal)[2:]) + 'db'"}
{"task_id": "80", "prompt": "\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n", "code_1": "def is_happy(s):\n    return len(s) >= 3 and all(s[i] != s[i+1] != s[i+2] != s[i] for i in range(len(s) - 2))", "code_2": "def is_happy(s):\n    return len(s) >= 3 and all(len(set(s[i:i+3])) == 3 for i in range(len(s) - 2))", "code_3": "def is_happy(s):\n    return len(s) >= 3 and all(s[i] != s[i+1] and s[i] != s[i+2] and s[i+1] != s[i+2] for i in range(len(s) - 2))", "code_4": "def is_happy(s):\n    return len(s) >= 3 and all(len({s[i], s[i+1], s[i+2]}) == 3 for i in range(len(s) - 2))", "code_5": "def is_happy(s):\n    return len(s) >= 3 and all(s[i] not in s[i+1:i+3] for i in range(len(s) - 2))", "code_6": "def is_happy(s):\n    return len(s) >= 3 and all(len(s[i:i+3]) == len(set(s[i:i+3])) for i in range(len(s) - 2))", "code_7": "def is_happy(s):\n    return len(s) >= 3 and all(s.count(s[i]) == 1 and s.count(s[i+1]) == 1 and s.count(s[i+2]) == 1 for i in range(len(s) - 2))", "code_8": "def is_happy(s):\n    return len(s) >= 3 and all(s[i:i+3].count(c) == 1 for i in range(len(s) - 2) for c in s[i:i+3])", "code_9": "def is_happy(s):\n    return len(s) >= 3 and all(len(s[i:i+3]) == len(set(s[i:i+3])) for i in range(len(s) - 2))", "code_10": "def is_happy(s):\n    return len(s) >= 3 and all(s[i] != s[i+1] and s[i] != s[i+2] and s[i+1] != s[i+2] for i in range(len(s) - 2))"}
{"task_id": "81", "prompt": "\ndef numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n", "code_1": "def numerical_letter_grade(grades):\n    return ['A+' if g == 4.0 else 'A' if 3.7 < g <= 4.0 else 'A-' if 3.3 < g <= 3.7 else 'B+' if 3.0 < g <= 3.3 else 'B' if 2.7 < g <= 3.0 else 'B-' if 2.3 < g <= 2.7 else 'C+' if 2.0 < g <= 2.3 else 'C' if 1.7 < g <= 2.0 else 'C-' if 1.3 < g <= 1.7 else 'D+' if 1.0 < g <= 1.3 else 'D' if 0.7 < g <= 1.0 else 'D-' if 0.0 < g <= 0.7 else 'E' for g in grades]", "code_2": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for g in grades:\n        if g == 4.0:\n            letter_grades.append('A+')\n        elif 3.7 < g <= 4.0:\n            letter_grades.append('A')\n        elif 3.3 < g <= 3.7:\n            letter_grades.append('A-')\n        elif 3.0 < g <= 3.3:\n            letter_grades.append('B+')\n        elif 2.7 < g <= 3.0:\n            letter_grades.append('B')\n        elif 2.3 < g <= 2.7:\n            letter_grades.append('B-')\n        elif 2.0 < g <= 2.3:\n            letter_grades.append('C+')\n        elif 1.7 < g <= 2.0:\n            letter_grades.append('C')\n        elif 1.3 < g <= 1.7:\n            letter_grades.append('C-')\n        elif 1.0 < g <= 1.3:\n            letter_grades.append('D+')\n        elif 0.7 < g <= 1.0:\n            letter_grades.append('D')\n        elif 0.0 < g <= 0.7:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "code_3": "def numerical_letter_grade(grades):\n    grade_map = {\n        (4.0, 4.0): 'A+',\n        (3.7, 4.0]: 'A',\n        (3.3, 3.7]: 'A-',\n        (3.0, 3.3]: 'B+',\n        (2.7, 3.0]: 'B',\n        (2.3, 2.7]: 'B-',\n        (2.0, 2.3]: 'C+',\n        (1.7, 2.0]: 'C',\n        (1.3, 1.7]: 'C-',\n        (1.0, 1.3]: 'D+',\n        (0.7, 1.0]: 'D',\n        (0.0, 0.7]: 'D-',\n        (0.0, 0.0]: 'E'\n    }\n    return [grade for g in grades for lower, upper in grade_map if lower < g <= upper]", "code_4": "def numerical_letter_grade(grades):\n    grade_map = [(4.0, 'A+'), (3.7, 'A'), (3.3, 'A-'), (3.0, 'B+'), (2.7, 'B'), (2.3, 'B-'), (2.0, 'C+'), (1.7, 'C'), (1.3, 'C-'), (1.0, 'D+'), (0.7, 'D'), (0.0, 'D-')]\n    return ['E' if g < 0.0 else next(letter for gpa, letter in grade_map if g <= gpa) for g in grades]", "code_5": "def numerical_letter_grade(grades):\n    grade_map = {4.0: 'A+', 3.7: 'A', 3.3: 'A-', 3.0: 'B+', 2.7: 'B', 2.3: 'B-', 2.0: 'C+', 1.7: 'C', 1.3: 'C-', 1.0: 'D+', 0.7: 'D', 0.0: 'D-'}\n    return [next((letter for gpa, letter in grade_map.items() if g <= gpa), 'E') for g in grades]", "code_6": "def numerical_letter_grade(grades):\n    grade_map = {4.0: 'A+', 3.7: 'A', 3.3: 'A-', 3.0: 'B+', 2.7: 'B', 2.3: 'B-', 2.0: 'C+', 1.7: 'C', 1.3: 'C-', 1.0: 'D+', 0.7: 'D', 0.0: 'D-'}\n    return [grade_map.get(next(filter(lambda x: x <= g, sorted(grade_map.keys(), reverse=True))), 'E') for g in grades]", "code_7": "def numerical_letter_grade(grades):\n    grade_map = {4.0: 'A+', 3.7: 'A', 3.3: 'A-', 3.0: 'B+', 2.7: 'B', 2.3: 'B-', 2.0: 'C+', 1.7: 'C', 1.3: 'C-', 1.0: 'D+', 0.7: 'D', 0.0: 'D-'}\n    return [next((letter for gpa, letter in grade_map.items() if gpa <= g), 'E') for g in grades]", "code_8": "def numerical_letter_grade(grades):\n    grade_map = {4.0: 'A+', 3.7: 'A', 3.3: 'A-', 3.0: 'B+', 2.7: 'B', 2.3: 'B-', 2.0: 'C+', 1.7: 'C', 1.3: 'C-', 1.0: 'D+', 0.7: 'D', 0.0: 'D-'}\n    return [grade_map[max(gpa for gpa in grade_map if gpa <= g)] if g >= 0.0 else 'E' for g in grades]", "code_9": "def numerical_letter_grade(grades):\n    grade_map = {4.0: 'A+', 3.7: 'A', 3.3: 'A-', 3.0: 'B+', 2.7: 'B', 2.3: 'B-', 2.0: 'C+', 1.7: 'C', 1.3: 'C-', 1.0: 'D+', 0.7: 'D', 0.0: 'D-'}\n    return [next((letter for gpa, letter in reversed(grade_map.items()) if gpa <= g), 'E') for g in grades]", "code_10": "def numerical_letter_grade(grades):\n    grade_map = {4.0: 'A+', 3.7: 'A', 3.3: 'A-', 3.0: 'B+', 2.7: 'B', 2.3: 'B-', 2.0: 'C+', 1.7: 'C', 1.3: 'C-', 1.0: 'D+', 0.7: 'D', 0.0: 'D-'}\n    return [next((letter for gpa, letter in grade_map.items() if gpa <= g), 'E') for g in grades]"}
{"task_id": "82", "prompt": "\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n", "code_1": "def prime_length(string):\n    n = len(string)\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "code_2": "def prime_length(string):\n    n = len(string)\n    if n < 2:\n        return False\n    return all(n % i for i in range(2, int(n**0.5) + 1))", "code_3": "def prime_length(string):\n    n = len(string)\n    if n < 2:\n        return False\n    return not any(n % i == 0 for i in range(2, int(n**0.5) + 1))", "code_4": "def prime_length(string):\n    n = len(string)\n    if n < 2:\n        return False\n    return sum(n % i == 0 for i in range(2, int(n**0.5) + 1)) == 0", "code_5": "def prime_length(string):\n    n = len(string)\n    if n < 2:\n        return False\n    return all(n % i for i in range(2, int(n**0.5) + 1)) and n > 1", "code_6": "def prime_length(string):\n    n = len(string)\n    if n < 2:\n        return False\n    return not any(n % i == 0 for i in range(2, int(n**0.5) + 1)) and n > 1", "code_7": "def prime_length(string):\n    n = len(string)\n    if n < 2:\n        return False\n    return sum(n % i == 0 for i in range(2, int(n**0.5) + 1)) == 0 and n > 1", "code_8": "def prime_length(string):\n    n = len(string)\n    if n < 2:\n        return False\n    return all(n % i for i in range(2, int(n**0.5) + 1)) and n != 1", "code_9": "def prime_length(string):\n    n = len(string)\n    if n < 2:\n        return False\n    return not any(n % i == 0 for i in range(2, int(n**0.5) + 1)) and n != 1", "code_10": "def prime_length(string):\n    n = len(string)\n    if n < 2:\n        return False\n    return sum(n % i == 0 for i in range(2, int(n**0.5) + 1)) == 0 and n != 1"}
{"task_id": "83", "prompt": "\ndef starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n", "code_1": "def starts_one_ends(n):\n    if n == 1: return 1\n    if n == 2: return 3\n    return 10 * (9 ** (n - 2)) * 2 + 9 ** (n - 1)", "code_2": "def starts_one_ends(n):\n    return 2 * 9 ** (n - 1) + 10 * 8 ** (n - 2) if n > 1 else 1", "code_3": "def starts_one_ends(n):\n    return (10 ** n - 8 ** n) * 2 if n > 1 else 1", "code_4": "def starts_one_ends(n):\n    return (10 ** n - 8 ** n + 8) if n > 1 else 1", "code_5": "def starts_one_ends(n):\n    return (10 ** n - 9 ** n) * 2 - 1 if n > 1 else 1", "code_6": "def starts_one_ends(n):\n    return (10 ** n - 9 ** n) * 2 + 1 if n > 1 else 1", "code_7": "def starts_one_ends(n):\n    return (10 ** n - 8 ** n) * 2 + 2 if n > 1 else 1", "code_8": "def starts_one_ends(n):\n    return (10 ** n - 9 ** n + 1) * 2 if n > 1 else 1", "code_9": "def starts_one_ends(n):\n    return (10 ** n - 8 ** n) * 2 - 8 if n > 1 else 1", "code_10": "def starts_one_ends(n):\n    return (10 ** n - 9 ** n) * 2 + 9 if n > 1 else 1"}
{"task_id": "84", "prompt": "\ndef solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n", "code_1": "def solve(N):\n    return bin(sum(int(d) for d in bin(N)[2:]))[2:]", "code_2": "def solve(N):\n    return format(sum(int(b) for b in bin(N)[2:]), 'b')", "code_3": "def solve(N):\n    return '{0:b}'.format(sum(int(b) for b in bin(N)[2:]))", "code_4": "def solve(N):\n    return f'{sum(int(b) for b in bin(N)[2:]):b}'", "code_5": "def solve(N):\n    return ''.join(str(int(b)) for b in bin(N)[2:]).count('1')", "code_6": "def solve(N):\n    return bin(sum(map(int, bin(N)[2:])))[2:]", "code_7": "def solve(N):\n    return format(sum(map(int, bin(N)[2:])), 'b')", "code_8": "def solve(N):\n    return '{0:b}'.format(sum(map(int, bin(N)[2:])))", "code_9": "def solve(N):\n    return f'{sum(map(int, bin(N)[2:])):b}'", "code_10": "def solve(N):\n    return ''.join(str(int(b)) for b in bin(N)[2:]).count('1')"}
{"task_id": "85", "prompt": "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n", "code_1": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "code_2": "def add(lst):\n    return sum(v for i, v in enumerate(lst) if i % 2 != 0 and v % 2 == 0)", "code_3": "def add(lst):\n    return sum(filter(lambda x: x % 2 == 0, lst[1::2]))", "code_4": "def add(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2 == 0)", "code_5": "def add(lst):\n    return sum(v for i, v in enumerate(lst[1::2]) if v % 2 == 0)", "code_6": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if not lst[i] & 1)", "code_7": "def add(lst):\n    return sum(v for i, v in enumerate(lst) if i % 2 and not v % 2)", "code_8": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] >> 1 << 1 == lst[i])", "code_9": "def add(lst):\n    return sum(v for i, v in enumerate(lst[1::2]) if not v & 1)", "code_10": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] & -2 == lst[i])"}
{"task_id": "86", "prompt": "\ndef anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n", "code_1": "def anti_shuffle(s):\n    return ''.join(''.join(sorted(word)) if word.isalpha() else word for word in s.split(' '))", "code_2": "def anti_shuffle(s):\n    return ' '.join(''.join(sorted(word)) for word in s.split())", "code_3": "def anti_shuffle(s):\n    return ' '.join(map(lambda word: ''.join(sorted(word)), s.split()))", "code_4": "def anti_shuffle(s):\n    return ' '.join(sorted(word) if word.isalpha() else word for word in s.split())", "code_5": "def anti_shuffle(s):\n    return ' '.join(sorted(word) if word.isalpha() else word for word in s.split(' '))", "code_6": "def anti_shuffle(s):\n    return ' '.join(map(lambda word: ''.join(sorted(word)), s.split(' ')))", "code_7": "def anti_shuffle(s):\n    return ' '.join(sorted(word) if word.isalpha() else word for word in s.split())", "code_8": "def anti_shuffle(s):\n    return ' '.join(map(lambda word: ''.join(sorted(word)), s.split()))", "code_9": "def anti_shuffle(s):\n    return ' '.join(sorted(word) if word.isalpha() else word for word in s.split(' '))", "code_10": "def anti_shuffle(s):\n    return ' '.join(map(lambda word: ''.join(sorted(word)), s.split(' ')))"}
{"task_id": "87", "prompt": "\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n", "code_1": "def get_row(lst, x):\n    return sorted([(i, j) for i, row in enumerate(lst) for j, val in enumerate(row) if val == x], key=lambda x: (x[0], -x[1]))", "code_2": "def get_row(lst, x):\n    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(coords, key=lambda x: (x[0], -x[1]))", "code_3": "def get_row(lst, x):\n    coords = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coords.append((i, j))\n    return sorted(coords, key=lambda x: (x[0], -x[1]))", "code_4": "def get_row(lst, x):\n    coords = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                coords.append((i, j))\n    return sorted(coords, key=lambda x: (x[0], -x[1]))", "code_5": "def get_row(lst, x):\n    coords = []\n    for i in range(len(lst)):\n        coords.extend([(i, j) for j, val in enumerate(lst[i]) if val == x])\n    return sorted(coords, key=lambda x: (x[0], -x[1]))", "code_6": "def get_row(lst, x):\n    coords = []\n    for i, row in enumerate(lst):\n        coords.extend([(i, j) for j, val in enumerate(row) if val == x])\n    return sorted(coords, key=lambda x: (x[0], -x[1]))", "code_7": "def get_row(lst, x):\n    coords = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coords.append((i, j))\n    coords.sort(key=lambda x: (x[0], -x[1]))\n    return coords", "code_8": "def get_row(lst, x):\n    coords = []\n    for i, row in enumerate(lst):\n        for j in range(len(row)):\n            if row[j] == x:\n                coords.append((i, j))\n    coords.sort(key=lambda x: (x[0], -x[1]))\n    return coords", "code_9": "def get_row(lst, x):\n    coords = []\n    for i in range(len(lst)):\n        coords.extend([(i, j) for j in range(len(lst[i])) if lst[i][j] == x])\n    return sorted(coords, key=lambda x: (x[0], -x[1]))", "code_10": "def get_row(lst, x):\n    coords = []\n    for i in range(len(lst)):\n        coords.extend([(i, j) for j in range(len(lst[i])) if lst[i][j] == x])\n    coords.sort(key=lambda x: (x[0], -x[1]))\n    return coords"}
{"task_id": "88", "prompt": "\ndef sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n", "code_1": "def sort_array(array):\n    return sorted(array, reverse=(array[0] + array[-1]) % 2 == 0)", "code_2": "def sort_array(array):\n    return array[:] if len(array) < 2 else sorted(array, reverse=(array[0] + array[-1]) % 2 == 0)", "code_3": "def sort_array(array):\n    if len(array) < 2:\n        return array[:]\n    else:\n        return sorted(array, reverse=(array[0] + array[-1]) % 2 == 0)", "code_4": "def sort_array(array):\n    if not array or len(array) == 1:\n        return array[:]\n    else:\n        return sorted(array, reverse=(array[0] + array[-1]) % 2 == 0)", "code_5": "def sort_array(array):\n    if len(array) < 2:\n        return array.copy()\n    else:\n        return sorted(array, reverse=(array[0] + array[-1]) % 2 == 0)", "code_6": "def sort_array(array):\n    if len(array) < 2:\n        return array[:]\n    else:\n        return sorted(array, reverse=not (array[0] + array[-1]) % 2)", "code_7": "def sort_array(array):\n    if len(array) < 2:\n        return array.copy()\n    else:\n        return sorted(array, reverse=not (array[0] + array[-1]) % 2)", "code_8": "def sort_array(array):\n    if len(array) < 2:\n        return array[:]\n    else:\n        return sorted(array, reverse=bool((array[0] + array[-1]) % 2))", "code_9": "def sort_array(array):\n    if len(array) < 2:\n        return array.copy()\n    else:\n        return sorted(array, reverse=bool((array[0] + array[-1]) % 2))", "code_10": "def sort_array(array):\n    if len(array) < 2:\n        return array[:]\n    else:\n        return sorted(array, reverse=(array[0] + array[-1]) & 1)"}
{"task_id": "89", "prompt": "\ndef encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n", "code_1": "def encrypt(s):\n    return ''.join([chr((ord(c) - 97 + 4) % 26 + 97) for c in s])", "code_2": "def encrypt(s):\n    return ''.join([chr(((ord(c) - 97 + 8) & 25) + 97) for c in s])", "code_3": "def encrypt(s):\n    return ''.join([chr((ord(c) - 97 + 8) % 26 + 97) if c.islower() else c for c in s])", "code_4": "def encrypt(s):\n    return ''.join([chr((ord(c) - 97 + 8) % 26 + 97) if 'a' <= c <= 'z' else c for c in s])", "code_5": "def encrypt(s):\n    return ''.join([chr((ord(c) - 97 + 8) % 26 + 97) if c.isalpha() and c.islower() else c for c in s])", "code_6": "def encrypt(s):\n    return ''.join([chr((ord(c) - 97 + 8) % 26 + 97) if c in 'abcdefghijklmnopqrstuvwxyz' else c for c in s])", "code_7": "def encrypt(s):\n    return ''.join([chr((ord(c) - 97 + 8) % 26 + 97) if 'a' <= c <= 'z' else c for c in s.lower()])", "code_8": "def encrypt(s):\n    return ''.join([chr((ord(c) - 97 + 8) % 26 + 97) if c.isalpha() else c for c in s.lower()])", "code_9": "def encrypt(s):\n    return ''.join([chr((ord(c) - 97 + 8) % 26 + 97) if c in 'abcdefghijklmnopqrstuvwxyz' else c for c in s.lower()])", "code_10": "def encrypt(s):\n    return ''.join([chr((ord(c) - 97 + 8) % 26 + 97) if c.islower() else c for c in s.lower()])"}
{"task_id": "90", "prompt": "\ndef next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n", "code_1": "def next_smallest(lst):\n    a = b = float('inf')\n    for i in lst:\n        if i < a:\n            a, b = i, a\n        elif i < b and i != a:\n            b = i\n    return None if b == float('inf') else b", "code_2": "def next_smallest(lst):\n    s = set(lst)\n    if len(s) < 2:\n        return None\n    s.remove(min(s))\n    return min(s)", "code_3": "def next_smallest(lst):\n    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]", "code_4": "def next_smallest(lst):\n    lst = list(set(lst))\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]", "code_5": "def next_smallest(lst):\n    lst = list(dict.fromkeys(lst))\n    if len(lst) < 2:\n        return None\n    lst.remove(min(lst))\n    return min(lst)", "code_6": "def next_smallest(lst):\n    lst = list(set(lst))\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]", "code_7": "def next_smallest(lst):\n    lst = sorted(list(set(lst)))\n    return lst[1] if len(lst) > 1 else None", "code_8": "def next_smallest(lst):\n    lst = list(set(lst))\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]", "code_9": "def next_smallest(lst):\n    lst = sorted(set(lst))\n    return lst[1] if len(lst) > 1 else None", "code_10": "def next_smallest(lst):\n    lst = list(set(lst))\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]"}
{"task_id": "91", "prompt": "\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n", "code_1": "def is_bored(S): return sum(1 for s in S.split('. ') if s.startswith('I'))", "code_2": "def is_bored(S): return len([s for s in S.split('. ') if s.startswith('I')])", "code_3": "def is_bored(S): return sum(s.startswith('I') for s in S.split('. '))", "code_4": "def is_bored(S): return sum(s[0] == 'I' for s in S.split('. '))", "code_5": "def is_bored(S): return len([s for s in S.split('. ') if s[0] == 'I'])", "code_6": "def is_bored(S): return sum(s.startswith('I') for s in re.split('[.?!]', S))", "code_7": "def is_bored(S): return len([s for s in re.split('[.?!]', S) if s.startswith('I')])", "code_8": "def is_bored(S): return sum(s[0] == 'I' for s in re.split('[.?!]', S))", "code_9": "def is_bored(S): return len([s for s in re.split('[.?!]', S) if s[0] == 'I'])", "code_10": "def is_bored(S): return sum(s.strip().startswith('I') for s in re.split('[.?!]', S))"}
{"task_id": "92", "prompt": "\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n", "code_1": "def any_int(x, y, z):\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and (x == y + z or y == x + z or z == x + y)", "code_2": "def any_int(x, y, z):\n    if all(isinstance(i, int) for i in (x, y, z)):\n        return x + y == z or x + z == y or y + z == x\n    return False", "code_3": "def any_int(x, y, z):\n    return all(map(lambda i: isinstance(i, int), (x, y, z))) and (x + y == z or x + z == y or y + z == x)", "code_4": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return x + y == z or x + z == y or y + z == x\n    return False", "code_5": "def any_int(x, y, z):\n    return type(x) == int and type(y) == int and type(z) == int and (x + y == z or x + z == y or y + z == x)", "code_6": "def any_int(x, y, z):\n    return all(map(lambda i: type(i) == int, (x, y, z))) and (x + y == z or x + z == y or y + z == x)", "code_7": "def any_int(x, y, z):\n    if type(x) == int and type(y) == int and type(z) == int:\n        return x + y == z or x + z == y or y + z == x\n    return False", "code_8": "def any_int(x, y, z):\n    return all(map(lambda i: i == int(i), (x, y, z))) and (x + y == z or x + z == y or y + z == x)", "code_9": "def any_int(x, y, z):\n    if x == int(x) and y == int(y) and z == int(z):\n        return x + y == z or x + z == y or y + z == x\n    return False", "code_10": "def any_int(x, y, z):\n    return all(map(lambda i: i.is_integer(), (x, y, z))) and (x + y == z or x + z == y or y + z == x)"}
{"task_id": "93", "prompt": "\ndef encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n", "code_1": "def encode(message):\n    vowels = 'aeiouAEIOU'\n    trans = str.maketrans('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ', 'cdefghijklmnopqrstuvwxyzabCDEFGHIJKLMNOPQRSTUVWXYZAB')\n    return message.translate(trans).translate(str.maketrans(vowels, 'iguoeIUOE'))", "code_2": "def encode(message):\n    vowels = 'aeiouAEIOU'\n    trans = str.maketrans('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ', 'cdefghijklmnopqrstuvwxyzabCDEFGHIJKLMNOPQRSTUVWXYZAB')\n    return ''.join([trans[c] if c not in vowels else 'iguoeIUOE'[vowels.index(c)] for c in message])", "code_3": "def encode(message):\n    vowels = 'aeiouAEIOU'\n    trans = str.maketrans('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ', 'cdefghijklmnopqrstuvwxyzabCDEFGHIJKLMNOPQRSTUVWXYZAB')\n    return ''.join(trans[c] if c not in vowels else 'iguoeIUOE'[vowels.index(c)] for c in message)", "code_4": "def encode(message):\n    vowels = 'aeiouAEIOU'\n    trans = str.maketrans('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ', 'cdefghijklmnopqrstuvwxyzabCDEFGHIJKLMNOPQRSTUVWXYZAB')\n    return ''.join(trans[c] if c in trans else 'iguoeIUOE'[vowels.index(c)] for c in message)", "code_5": "def encode(message):\n    vowels = 'aeiouAEIOU'\n    trans = str.maketrans('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ', 'cdefghijklmnopqrstuvwxyzabCDEFGHIJKLMNOPQRSTUVWXYZAB')\n    return ''.join(trans[c] if c in trans.keys() else 'iguoeIUOE'[vowels.index(c)] for c in message)", "code_6": "def encode(message):\n    vowels = 'aeiouAEIOU'\n    trans = str.maketrans('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ', 'cdefghijklmnopqrstuvwxyzabCDEFGHIJKLMNOPQRSTUVWXYZAB')\n    return ''.join(trans[c] if c in trans else 'iguoeIUOE'[vowels.index(c)] for c in message.translate(trans))", "code_7": "def encode(message):\n    vowels = 'aeiouAEIOU'\n    trans = str.maketrans('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ', 'cdefghijklmnopqrstuvwxyzabCDEFGHIJKLMNOPQRSTUVWXYZAB')\n    return ''.join(trans[c] if c in trans else 'iguoeIUOE'[vowels.find(c)] for c in message)", "code_8": "def encode(message):\n    vowels = 'aeiouAEIOU'\n    trans = str.maketrans('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ', 'cdefghijklmnopqrstuvwxyzabCDEFGHIJKLMNOPQRSTUVWXYZAB')\n    return ''.join(trans[c] if c in trans else 'iguoeIUOE'[vowels.find(c)] for c in message.translate(trans))", "code_9": "def encode(message):\n    vowels = 'aeiouAEIOU'\n    trans = str.maketrans('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ', 'cdefghijklmnopqrstuvwxyzabCDEFGHIJKLMNOPQRSTUVWXYZAB')\n    return ''.join(trans[c] if c in trans else 'iguoeIUOE'[vowels.index(c.lower())] for c in message)", "code_10": "def encode(message):\n    vowels = 'aeiouAEIOU'\n    trans = str.maketrans('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ', 'cdefghijklmnopqrstuvwxyzabCDEFGHIJKLMNOPQRSTUVWXYZAB')\n    return ''.join(trans[c] if c in trans else 'iguoeIUOE'[vowels.index(c.lower())] for c in message.translate(trans))"}
{"task_id": "94", "prompt": "\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n", "code_1": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    return sum(int(d) for d in str(max(n for n in lst if is_prime(n))))", "code_2": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    primes = [n for n in lst if is_prime(n)]\n    return sum(int(d) for d in str(max(primes))) if primes else 0", "code_3": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    largest_prime = max((n for n in lst if is_prime(n)), default=0)\n    return sum(int(d) for d in str(largest_prime))", "code_4": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    primes = [n for n in lst if is_prime(n)]\n    return sum(map(int, str(max(primes)))) if primes else 0", "code_5": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    largest_prime = max(filter(is_prime, lst), default=0)\n    return sum(int(d) for d in str(largest_prime))", "code_6": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    primes = [n for n in lst if is_prime(n)]\n    return sum(map(int, str(max(primes, default=0))))", "code_7": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    largest_prime = max((n for n in lst if is_prime(n)), default=None)\n    return sum(int(d) for d in str(largest_prime)) if largest_prime else 0", "code_8": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    primes = [n for n in lst if is_prime(n)]\n    return sum(map(int, str(max(primes, default='0'))))", "code_9": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    largest_prime = max(filter(is_prime, lst), default=None)\n    return sum(int(d) for d in str(largest_prime)) if largest_prime else 0", "code_10": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    primes = [n for n in lst if is_prime(n)]\n    return sum(map(int, str(max(primes, default=0)))) if primes else 0"}
{"task_id": "95", "prompt": "\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n", "code_1": "def check_dict_case(d):\n    return all(isinstance(k, str) and k.islower() for k in d) or all(isinstance(k, str) and k.isupper() for k in d)", "code_2": "def check_dict_case(d):\n    return len(set(k.islower() for k in d if isinstance(k, str))) == 1", "code_3": "def check_dict_case(d):\n    lower, upper = 0, 0\n    for k in d:\n        if isinstance(k, str):\n            lower += k.islower()\n            upper += k.isupper()\n    return lower == 0 or upper == 0", "code_4": "def check_dict_case(d):\n    return all(k.islower() for k in d.keys() if isinstance(k, str)) or all(k.isupper() for k in d.keys() if isinstance(k, str))", "code_5": "def check_dict_case(d):\n    return len(set(k.isupper() if isinstance(k, str) else None for k in d)) == 1", "code_6": "def check_dict_case(d):\n    return all(k.islower() for k in d if isinstance(k, str)) or all(k.isupper() for k in d if isinstance(k, str))", "code_7": "def check_dict_case(d):\n    return len(set(k.islower() for k in d.keys() if isinstance(k, str))) == 1", "code_8": "def check_dict_case(d):\n    return all(k.islower() for k in d if isinstance(k, str)) or all(k.isupper() for k in d if isinstance(k, str)) or not d", "code_9": "def check_dict_case(d):\n    return len(set(k.isupper() for k in d if isinstance(k, str))) in (0, len(d))", "code_10": "def check_dict_case(d):\n    return all(k.islower() for k in d if isinstance(k, str)) or all(k.isupper() for k in d if isinstance(k, str)) or len(d) == 0"}
{"task_id": "96", "prompt": "\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n", "code_1": "def count_up_to(n):\n    primes = [True] * n\n    p = 2\n    while p * p <= n:\n        if primes[p]:\n            for i in range(p * p, n, p):\n                primes[i] = False\n        p += 1\n    return [p for p in range(2, n) if primes[p]]", "code_2": "def count_up_to(n):\n    sieve = [True] * n\n    for x in range(2, int(n**0.5) + 1):\n        if sieve[x]:\n            for i in range(x*x, n, x):\n                sieve[i] = False\n    return [x for x in range(2, n) if sieve[x]]", "code_3": "def count_up_to(n):\n    primes = []\n    for possiblePrime in range(2, n):\n        isPrime = True\n        for num in range(2, int(possiblePrime ** 0.5) + 1):\n            if possiblePrime % num == 0:\n                isPrime = False\n                break\n        if isPrime:\n            primes.append(possiblePrime)\n    return primes", "code_4": "def count_up_to(n):\n    primes = []\n    for possiblePrime in range(2, n):\n        if all(possiblePrime % prime != 0 for prime in primes):\n            primes.append(possiblePrime)\n    return primes", "code_5": "def count_up_to(n):\n    primes = []\n    for num in range(2, n):\n        if all(num % i != 0 for i in range(2, int(num**0.5) + 1)):\n            primes.append(num)\n    return primes", "code_6": "def count_up_to(n):\n    sieve = [True] * n\n    for x in range(2, n):\n        if sieve[x]:\n            for u in range(x*x, n, x):\n                sieve[u] = False\n    return [i for i in range(2, n) if sieve[i]]", "code_7": "def count_up_to(n):\n    primes = []\n    for num in range(2, n):\n        if all(num % i != 0 for i in range(2, num)):\n            primes.append(num)\n    return primes", "code_8": "def count_up_to(n):\n    primes = []\n    for possiblePrime in range(2, n):\n        isPrime = True\n        for num in range(2, possiblePrime):\n            if possiblePrime % num == 0:\n                isPrime = False\n        if isPrime:\n            primes.append(possiblePrime)\n    return primes", "code_9": "def count_up_to(n):\n    sieve = [True] * n\n    for x in range(2, int(n**0.5) + 1):\n        if sieve[x]:\n            for i in range(x*x, n, x):\n                sieve[i] = False\n    return [x for x in range(2, n) if sieve[x]]", "code_10": "def count_up_to(n):\n    primes = []\n    for num in range(2, n):\n        if all(num % i != 0 for i in range(2, num)):\n            primes.append(num)\n    return primes"}
{"task_id": "97", "prompt": "\ndef multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n", "code_1": "def multiply(a, b):\n    return abs(a % 10) * abs(b % 10)", "code_2": "def multiply(a, b):\n    return (a & 0xf) * (b & 0xf)", "code_3": "def multiply(a, b):\n    return int(str(a)[-1]) * int(str(b)[-1])", "code_4": "def multiply(a, b):\n    return divmod(a, 10)[1] * divmod(b, 10)[1]", "code_5": "def multiply(a, b):\n    return [abs(a % 10), abs(b % 10)][0] * [abs(a % 10), abs(b % 10)][1]", "code_6": "def multiply(a, b):\n    return (a // 10 + a % 10) * (b // 10 + b % 10) - a // 10 * b // 10", "code_7": "def multiply(a, b):\n    return (a >> 4 * (a >> 15 & 1) + 4 * (a >> 12 & 1) + 2 * (a >> 9 & 1) + (a >> 6 & 1)) * (b >> 4 * (b >> 15 & 1) + 4 * (b >> 12 & 1) + 2 * (b >> 9 & 1) + (b >> 6 & 1))", "code_8": "def multiply(a, b):\n    return (a // 10 + a % 10) * (b // 10 + b % 10) - a // 10 * b // 10", "code_9": "def multiply(a, b):\n    return (a % 10) * (b % 10) if a >= 0 and b >= 0 else (a % 10) * (-b % 10)", "code_10": "def multiply(a, b):\n    return (a % 10) * (b % 10) if a * b >= 0 else -(a % 10) * (b % 10)"}
{"task_id": "98", "prompt": "\ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n", "code_1": "def count_upper(s):\n    return sum(1 for i in range(0, len(s), 2) if s[i] in 'AEIOU')", "code_2": "def count_upper(s):\n    return len([c for i, c in enumerate(s) if i % 2 == 0 and c in 'AEIOU'])", "code_3": "def count_upper(s):\n    return sum(c in 'AEIOU' for i, c in enumerate(s) if i % 2 == 0)", "code_4": "def count_upper(s):\n    return sum(s[i] in 'AEIOU' for i in range(0, len(s), 2))", "code_5": "def count_upper(s):\n    vowels = set('AEIOU')\n    return sum(s[i] in vowels for i in range(0, len(s), 2))", "code_6": "def count_upper(s):\n    return sum(c in 'AEIOU' for c in s[::2])", "code_7": "def count_upper(s):\n    return len([1 for i in range(0, len(s), 2) if s[i] in 'AEIOU'])", "code_8": "def count_upper(s):\n    return sum(s[i] in 'AEIOU' for i in range(len(s)) if i % 2 == 0)", "code_9": "def count_upper(s):\n    return sum(1 for i in range(0, len(s), 2) if s[i].isupper() and s[i] in 'AEIOU')", "code_10": "def count_upper(s):\n    return len([c for c in s[::2] if c in 'AEIOU'])"}
{"task_id": "99", "prompt": "\ndef closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n", "code_1": "def closest_integer(value):\n    return int(float(value) + 0.5 * (1 if float(value) > 0 else -1))", "code_2": "def closest_integer(value):\n    return int(eval(value) + 0.5 * (1 if eval(value) > 0 else -1))", "code_3": "import math\ndef closest_integer(value):\n    return int(math.floor(float(value) + 0.5) if float(value) > 0 else math.ceil(float(value) - 0.5))", "code_4": "def closest_integer(value):\n    num = float(value)\n    return int(num + 0.5) if num > 0 else int(num - 0.5)", "code_5": "def closest_integer(value):\n    num = float(value)\n    return int(num + (0.5 if num > 0 else -0.5))", "code_6": "def closest_integer(value):\n    num = float(value)\n    return int(num + (0 if num == int(num) else 0.5 * (1 if num > 0 else -1)))", "code_7": "def closest_integer(value):\n    num = float(value)\n    return int(num) if num == int(num) else int(num + 0.5) if num > 0 else int(num - 0.5)", "code_8": "def closest_integer(value):\n    num = float(value)\n    return int(num) if num.is_integer() else int(num + 0.5) if num > 0 else int(num - 0.5)", "code_9": "def closest_integer(value):\n    num = float(value)\n    return int(num) if num % 1 == 0 else int(num + 0.5) if num > 0 else int(num - 0.5)", "code_10": "def closest_integer(value):\n    num = float(value)\n    return int(num) if num.is_integer() else int(num + (0.5 if num > 0 else -0.5))"}
{"task_id": "100", "prompt": "\ndef make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n", "code_1": "def make_a_pile(n):\n    return [n + i * (1 + n % 2) for i in range(n)]", "code_2": "def make_a_pile(n):\n    return [n + i * (2 - n % 2) for i in range(n)]", "code_3": "def make_a_pile(n):\n    return [n + i * (n & 1) + i * 2 * (1 - (n & 1)) for i in range(n)]", "code_4": "def make_a_pile(n):\n    return [n + i * (n | 1) for i in range(n)]", "code_5": "def make_a_pile(n):\n    return [n + i * (n ^ 1) for i in range(n)]", "code_6": "def make_a_pile(n):\n    return [n + i * (n + 1) % 2 for i in range(n)]", "code_7": "def make_a_pile(n):\n    return [n + i * (2 + n % 2) for i in range(n)]", "code_8": "def make_a_pile(n):\n    return [n + i * (n % 2 + 1) for i in range(n)]", "code_9": "def make_a_pile(n):\n    return [n + i * (n & 1) + i * (n & 2) for i in range(n)]", "code_10": "def make_a_pile(n):\n    return [n + i * (n - 1) % 2 + i * 2 for i in range(n)]"}
{"task_id": "101", "prompt": "\ndef words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n", "code_1": "def words_string(s):\n    return s.replace(',', ' ').split()", "code_2": "import re\ndef words_string(s):\n    return re.split(', | ', s)", "code_3": "def words_string(s):\n    return [word for word in s.replace(',', ' ').split(' ') if word]", "code_4": "def words_string(s):\n    return list(filter(None, s.replace(',', ' ').split(' ')))", "code_5": "def words_string(s):\n    return list(map(str.strip, s.replace(',', ' ').split(' ')))", "code_6": "def words_string(s):\n    return [word.strip() for word in re.split(', | ', s)]", "code_7": "def words_string(s):\n    return list(filter(None, map(str.strip, re.split(', | ', s))))", "code_8": "def words_string(s):\n    return [word for word in re.findall(r'\\b\\w+\\b', s)]", "code_9": "def words_string(s):\n    return s.translate(str.maketrans(',', ' ')).split()", "code_10": "def words_string(s):\n    return s.replace(',', '').split(' ')"}
{"task_id": "102", "prompt": "\ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n", "code_1": "def choose_num(x, y):\n    return y - y % 2 if x <= y - y % 2 else -1", "code_2": "def choose_num(x, y):\n    return (y // 2) * 2 if x <= y and y % 2 == 0 else (y - 1 if x <= y - 1 and y % 2 != 0 else -1)", "code_3": "def choose_num(x, y):\n    if y % 2 == 0 and x <= y:\n        return y\n    elif x <= y - 1:\n        return y - 1\n    else:\n        return -1", "code_4": "def choose_num(x, y):\n    if x > y:\n        return -1\n    elif y % 2 == 0:\n        return y\n    else:\n        return y - 1", "code_5": "def choose_num(x, y):\n    if x > y:\n        return -1\n    return y if y % 2 == 0 else y - 1", "code_6": "def choose_num(x, y):\n    if x > y or (x % 2 != 0 and x == y):\n        return -1\n    return y if y % 2 == 0 else y - 1", "code_7": "def choose_num(x, y):\n    if x > y:\n        return -1\n    return y - (y % 2)", "code_8": "def choose_num(x, y):\n    if x > y:\n        return -1\n    return y - (y & 1)", "code_9": "def choose_num(x, y):\n    if x > y:\n        return -1\n    return y - (y % 2 == 1)", "code_10": "def choose_num(x, y):\n    if x > y:\n        return -1\n    return y - (y & 1 == 1)"}
{"task_id": "103", "prompt": "\ndef rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n", "code_1": "def rounded_avg(n, m):\n    return -1 if n > m else bin(round((n + m) / 2))", "code_2": "def rounded_avg(n, m):\n    if n > m: return -1\n    avg = (n + m) // 2 if (n + m) % 2 == 0 else round((n + m) / 2)\n    return bin(avg)", "code_3": "def rounded_avg(n, m):\n    if n > m: return -1\n    avg = (n + m + 1) // 2 if (n + m) % 2 else (n + m) // 2\n    return bin(avg)", "code_4": "def rounded_avg(n, m):\n    if n > m: return -1\n    avg = (n + m) / 2\n    return bin(int(avg + 0.5))", "code_5": "def rounded_avg(n, m):\n    if n > m: return -1\n    avg = (n + m) // 2\n    if (n + m) % 2: avg = round(avg)\n    return bin(avg)", "code_6": "def rounded_avg(n, m):\n    if n > m: return -1\n    avg = (n + m) / 2\n    return bin(int(avg) if avg.is_integer() else round(avg))", "code_7": "def rounded_avg(n, m):\n    if n > m: return -1\n    avg = (n + m) / 2\n    return bin(int(avg) + (avg % 1 >= 0.5))", "code_8": "def rounded_avg(n, m):\n    if n > m: return -1\n    avg = (n + m) / 2\n    return bin(int(avg + (0.5 if avg % 1 else 0)))", "code_9": "def rounded_avg(n, m):\n    if n > m: return -1\n    avg = (n + m) / 2\n    return bin(int(avg) + (1 if avg - int(avg) >= 0.5 else 0))", "code_10": "def rounded_avg(n, m):\n    if n > m: return -1\n    avg = (n + m) / 2\n    return bin(int(avg) + (avg % 1 > 0.499999999999))"}
{"task_id": "104", "prompt": "\ndef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n", "code_1": "def unique_digits(x):\n    return sorted(i for i in x if all(int(d) % 2 != 0 for d in str(i)))", "code_2": "def unique_digits(x):\n    return sorted(filter(lambda i: all(int(d) % 2 != 0 for d in str(i)), x))", "code_3": "def unique_digits(x):\n    return sorted([i for i in x if set(str(i)).isdisjoint('02468')])", "code_4": "def unique_digits(x):\n    return sorted([i for i in x if not any(int(d) in [0, 2, 4, 6, 8] for d in str(i))])", "code_5": "def unique_digits(x):\n    return sorted([i for i in x if not any(map(lambda d: int(d) in [0, 2, 4, 6, 8], str(i)))])", "code_6": "def unique_digits(x):\n    return sorted([i for i in x if not set('02468') & set(str(i))])", "code_7": "def unique_digits(x):\n    return sorted([i for i in x if not any(c in '02468' for c in str(i))])", "code_8": "def unique_digits(x):\n    return sorted([i for i in x if not re.search('[02468]', str(i))])", "code_9": "def unique_digits(x):\n    return sorted([i for i in x if not any(c in '02468' for c in map(int, str(i)))])", "code_10": "def unique_digits(x):\n    return sorted([i for i in x if not any(c in '02468' for c in str(i))])"}
{"task_id": "105", "prompt": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n", "code_1": "def by_length(arr):\n    num_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    return [num_names[i-1] for i in sorted(filter(lambda x: 1 <= x <= 9, arr), reverse=True)]", "code_2": "def by_length(arr):\n    num_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    return [num_names[i-1] for i in sorted((x for x in arr if 1 <= x <= 9), reverse=True)]", "code_3": "def by_length(arr):\n    num_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    valid_nums = [i for i in arr if 1 <= i <= 9]\n    valid_nums.sort(reverse=True)\n    return [num_names[i-1] for i in valid_nums]", "code_4": "def by_length(arr):\n    num_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    return [num_names[i-1] for i in sorted([x for x in arr if 1 <= x <= 9], reverse=True)]", "code_5": "def by_length(arr):\n    num_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    return [num_names[i-1] for i in sorted(arr) if 1 <= i <= 9][::-1]", "code_6": "def by_length(arr):\n    num_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    valid_nums = [i for i in arr if 1 <= i <= 9]\n    valid_nums.sort()\n    return [num_names[i-1] for i in valid_nums[::-1]]", "code_7": "def by_length(arr):\n    num_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    return [num_names[i-1] for i in sorted(arr, reverse=True) if 1 <= i <= 9]", "code_8": "def by_length(arr):\n    num_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    valid_nums = [i for i in arr if 1 <= i <= 9]\n    valid_nums.sort()\n    return [num_names[i-1] for i in reversed(valid_nums)]", "code_9": "def by_length(arr):\n    num_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    return [num_names[i-1] for i in sorted(arr, reverse=True) if 1 <= i <= 9]", "code_10": "def by_length(arr):\n    num_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    valid_nums = [i for i in arr if 1 <= i <= 9]\n    valid_nums.sort(reverse=True)\n    return [num_names[i-1] for i in valid_nums]"}
{"task_id": "106", "prompt": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n", "code_1": "def f(n):\n    return [i if i % 2 else sum(range(1, i+1)) for i in range(1, n+1)]", "code_2": "def f(n):\n    return [sum(range(i+1)) if i % 2 else math.factorial(i) for i in range(1, n+1)]", "code_3": "def f(n):\n    return [i*(i+1)//2 if i % 2 else math.factorial(i) for i in range(1, n+1)]", "code_4": "def f(n):\n    return [reduce(lambda x, y: x*y, range(1, i+1)) if i % 2 == 0 else sum(range(1, i+1)) for i in range(1, n+1)]", "code_5": "def f(n):\n    fact = [1] * (n+1)\n    for i in range(1, n+1):\n        fact[i] = i * fact[i-1]\n    return [fact[i] if i % 2 == 0 else sum(range(1, i+1)) for i in range(1, n+1)]", "code_6": "def f(n):\n    fact = [1] * (n+1)\n    for i in range(2, n+1, 2):\n        fact[i] = i * fact[i-2]\n    return [fact[i] if i % 2 == 0 else sum(range(1, i+1)) for i in range(1, n+1)]", "code_7": "def f(n):\n    fact = [1] * (n+1)\n    for i in range(2, n+1, 2):\n        fact[i] = i * fact[i-2]\n    return [fact[i] if i % 2 == 0 else i*(i+1)//2 for i in range(1, n+1)]", "code_8": "def f(n):\n    fact = [1] * (n+1)\n    for i in range(2, n+1, 2):\n        fact[i] = i * fact[i-2]\n    return [fact[i] if i % 2 == 0 else sum(range(i+1)) for i in range(1, n+1)]", "code_9": "def f(n):\n    fact = [1] * (n+1)\n    for i in range(2, n+1, 2):\n        fact[i] = i * fact[i-2]\n    return [fact[i] if i % 2 == 0 else sum(range(1, i+1)) for i in range(1, n+1)]", "code_10": "def f(n):\n    fact = [1] * (n+1)\n    for i in range(2, n+1, 2):\n        fact[i] = i * fact[i-2]\n    return [fact[i] if i % 2 == 0 else i*(i+1)//2 for i in range(1, n+1)]"}
{"task_id": "107", "prompt": "\ndef even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n", "code_1": "def even_odd_palindrome(n):\n    e, o = 0, 0\n    for i in range(1, n):\n        if str(i) == str(i)[::-1]:\n            e += 1 if i % 2 == 0 else 0\n            o += 1 if i % 2 != 0 else 0\n    return (e, o)", "code_2": "def even_odd_palindrome(n):\n    return (sum(1 for i in range(2, n, 2) if str(i) == str(i)[::-1]), sum(1 for i in range(1, n, 2) if str(i) == str(i)[::-1]))", "code_3": "def even_odd_palindrome(n):\n    e, o = 0, 0\n    for i in range(1, n):\n        s = str(i)\n        if s == s[::-1]:\n            if i % 2 == 0:\n                e += 1\n            else:\n                o += 1\n    return (e, o)", "code_4": "def even_odd_palindrome(n):\n    e, o = 0, 0\n    for i in range(1, n):\n        if str(i) == str(i)[::-1]:\n            e += i % 2 == 0\n            o += i % 2 != 0\n    return (e, o)", "code_5": "def even_odd_palindrome(n):\n    e, o = 0, 0\n    for i in range(1, n):\n        s = str(i)\n        if s == s[::-1]:\n            if i % 2:\n                o += 1\n            else:\n                e += 1\n    return (e, o)", "code_6": "def even_odd_palindrome(n):\n    e, o = 0, 0\n    for i in range(1, n):\n        if str(i) == str(i)[::-1]:\n            e += i % 2 == 0\n            o += i % 2\n    return (e, o)", "code_7": "def even_odd_palindrome(n):\n    e, o = 0, 0\n    for i in range(1, n):\n        s = str(i)\n        if s == s[::-1]:\n            if i % 2:\n                o += 1\n            else:\n                e += 1\n    return (e, o)", "code_8": "def even_odd_palindrome(n):\n    e, o = 0, 0\n    for i in range(1, n):\n        if str(i) == str(i)[::-1]:\n            e += i % 2 == 0\n            o += i % 2\n    return (e, o)", "code_9": "def even_odd_palindrome(n):\n    e, o = 0, 0\n    for i in range(1, n):\n        s = str(i)\n        if s == s[::-1]:\n            if i % 2:\n                o += 1\n            else:\n                e += 1\n    return (e, o)", "code_10": "def even_odd_palindrome(n):\n    e, o = 0, 0\n    for i in range(1, n):\n        if str(i) == str(i)[::-1]:\n            e += i % 2 == 0\n            o += i % 2\n    return (e, o)"}
{"task_id": "108", "prompt": "\ndef count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n", "code_1": "def count_nums(arr):\n    return sum(sum(int(d) for d in str(abs(n))) > 0 for n in arr)", "code_2": "def count_nums(arr):\n    return sum(any(int(d) for d in str(abs(n))) for n in arr)", "code_3": "def count_nums(arr):\n    return len([n for n in arr if sum(map(int, str(abs(n)))) > 0])", "code_4": "def count_nums(arr):\n    return len([n for n in arr if any(map(int, str(abs(n))))])", "code_5": "def count_nums(arr):\n    return sum(1 for n in arr if sum(int(d) for d in str(abs(n))) > 0)", "code_6": "def count_nums(arr):\n    return sum(1 for n in arr if any(int(d) for d in str(abs(n))))", "code_7": "def count_nums(arr):\n    return len(list(filter(lambda n: sum(int(d) for d in str(abs(n))) > 0, arr)))", "code_8": "def count_nums(arr):\n    return len(list(filter(lambda n: any(int(d) for d in str(abs(n))), arr)))", "code_9": "def count_nums(arr):\n    return len([n for n in arr if sum(map(abs, map(int, str(n)))) > 0])", "code_10": "def count_nums(arr):\n    return len([n for n in arr if any(map(abs, map(int, str(n))))])"}
{"task_id": "109", "prompt": "\ndef move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n", "code_1": "def move_one_ball(arr):\n    n = len(arr)\n    if n <= 1:\n        return True\n    min_idx = arr.index(min(arr))\n    arr = arr[min_idx:] + arr[:min_idx]\n    return all(arr[i] <= arr[i + 1] for i in range(n - 1))", "code_2": "def move_one_ball(arr):\n    n = len(arr)\n    if n <= 1:\n        return True\n    min_val = min(arr)\n    min_idx = arr.index(min_val)\n    return all(arr[(i + min_idx) % n] <= arr[(i + min_idx + 1) % n] for i in range(n))", "code_3": "def move_one_ball(arr):\n    n = len(arr)\n    if n <= 1:\n        return True\n    min_idx = 0\n    for i in range(1, n):\n        if arr[i] < arr[min_idx]:\n            min_idx = i\n    return all(arr[(i + min_idx) % n] <= arr[(i + min_idx + 1) % n] for i in range(n))", "code_4": "def move_one_ball(arr):\n    n = len(arr)\n    if n <= 1:\n        return True\n    min_val = float('inf')\n    min_idx = 0\n    for i in range(n):\n        if arr[i] < min_val:\n            min_val = arr[i]\n            min_idx = i\n    return all(arr[(i + min_idx) % n] <= arr[(i + min_idx + 1) % n] for i in range(n))", "code_5": "def move_one_ball(arr):\n    n = len(arr)\n    if n <= 1:\n        return True\n    min_idx = arr.index(min(arr))\n    return sorted(arr[min_idx:] + arr[:min_idx]) == arr", "code_6": "def move_one_ball(arr):\n    n = len(arr)\n    if n <= 1:\n        return True\n    min_val = min(arr)\n    min_idx = arr.index(min_val)\n    sorted_arr = sorted(arr)\n    return sorted_arr == arr[min_idx:] + arr[:min_idx]", "code_7": "def move_one_ball(arr):\n    n = len(arr)\n    if n <= 1:\n        return True\n    min_idx = arr.index(min(arr))\n    return arr[min_idx:] + arr[:min_idx] == sorted(arr)", "code_8": "def move_one_ball(arr):\n    n = len(arr)\n    if n <= 1:\n        return True\n    min_val = min(arr)\n    min_idx = arr.index(min_val)\n    return arr[min_idx:] + arr[:min_idx] == sorted(arr[min_idx:] + arr[:min_idx])", "code_9": "def move_one_ball(arr):\n    n = len(arr)\n    if n <= 1:\n        return True\n    min_idx = arr.index(min(arr))\n    return all(arr[i] <= arr[(i + 1) % n] for i in range(n))", "code_10": "def move_one_ball(arr):\n    n = len(arr)\n    if n <= 1:\n        return True\n    min_val = min(arr)\n    min_idx = arr.index(min_val)\n    return all(arr[i] <= arr[(i + 1) % n] for i in range(min_idx, n + min_idx))"}
{"task_id": "110", "prompt": "\ndef exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n", "code_1": "def exchange(lst1, lst2):\n    return all(x % 2 == 0 or any(y % 2 == 0 for y in lst2) for x in lst1)", "code_2": "def exchange(lst1, lst2):\n    evens = [x for x in lst2 if x % 2 == 0]\n    return len([x for x in lst1 if x % 2 != 0]) <= len(evens)", "code_3": "def exchange(lst1, lst2):\n    odds = [x for x in lst1 if x % 2 != 0]\n    evens = [x for x in lst2 if x % 2 == 0]\n    return len(odds) <= len(evens)", "code_4": "def exchange(lst1, lst2):\n    return sum(x % 2 for x in lst1) <= sum(x % 2 == 0 for x in lst2)", "code_5": "def exchange(lst1, lst2):\n    lst1_odds = [x for x in lst1 if x % 2 != 0]\n    lst2_evens = [x for x in lst2 if x % 2 == 0]\n    return len(lst1_odds) <= len(lst2_evens)", "code_6": "def exchange(lst1, lst2):\n    return all(x % 2 == 0 or lst2.count(y) > 0 for x, y in zip(lst1, filter(lambda x: x % 2 != 0, lst1)))", "code_7": "def exchange(lst1, lst2):\n    lst1_odds = [x for x in lst1 if x % 2 != 0]\n    lst2_evens = [x for x in lst2 if x % 2 == 0]\n    return len(lst1_odds) <= len(lst2_evens)", "code_8": "def exchange(lst1, lst2):\n    return all(x % 2 == 0 or x in lst2 for x in lst1) and all(x % 2 == 0 or x in lst1 for x in lst2)", "code_9": "def exchange(lst1, lst2):\n    return sum(1 for x in lst1 if x % 2 != 0) <= sum(1 for x in lst2 if x % 2 == 0)", "code_10": "def exchange(lst1, lst2):\n    return all(x % 2 == 0 or x in set(lst2) for x in lst1)"}
{"task_id": "111", "prompt": "\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n", "code_1": "def histogram(test):\n    counts = {}\n    for letter in test.split():\n        counts[letter] = counts.get(letter, 0) + 1\n    max_count = max(counts.values(), default=0)\n    return {k: v for k, v in counts.items() if v == max_count}", "code_2": "from collections import Counter\ndef histogram(test):\n    counts = Counter(test.split())\n    max_count = max(counts.values(), default=0)\n    return {k: v for k, v in counts.items() if v == max_count}", "code_3": "def histogram(test):\n    counts = {}\n    max_count = 0\n    max_letters = []\n    for letter in test.split():\n        counts[letter] = counts.get(letter, 0) + 1\n        if counts[letter] > max_count:\n            max_count = counts[letter]\n            max_letters = [letter]\n        elif counts[letter] == max_count:\n            max_letters.append(letter)\n    return {letter: max_count for letter in max_letters}", "code_4": "def histogram(test):\n    counts = {}\n    for letter in test.split():\n        counts[letter] = counts.get(letter, 0) + 1\n    max_count = max(counts.values(), default=0)\n    return {k: v for k, v in sorted(counts.items(), key=lambda item: item[1], reverse=True) if v == max_count}", "code_5": "def histogram(test):\n    counts = {}\n    for letter in test.split():\n        counts[letter] = counts.get(letter, 0) + 1\n    max_count = max(counts.values(), default=0)\n    return {k: v for k, v in reversed(sorted(counts.items(), key=lambda item: item[1])) if v == max_count}", "code_6": "def histogram(test):\n    counts = {}\n    for letter in test.split():\n        counts[letter] = counts.get(letter, 0) + 1\n    max_count = max(counts.values(), default=0)\n    return {k: v for k, v in filter(lambda item: item[1] == max_count, counts.items())}", "code_7": "def histogram(test):\n    counts = {}\n    for letter in test.split():\n        counts[letter] = counts.get(letter, 0) + 1\n    max_count = max(counts.values(), default=0)\n    return {k: v for k, v in zip(counts.keys(), counts.values()) if v == max_count}", "code_8": "def histogram(test):\n    counts = {}\n    for letter in test.split():\n        counts[letter] = counts.get(letter, 0) + 1\n    max_count = max(counts.values(), default=0)\n    return {k: v for k, v in map(lambda item: (item[0], item[1]) if item[1] == max_count else (None, None), counts.items()) if k is not None}", "code_9": "def histogram(test):\n    counts = {}\n    for letter in test.split():\n        counts[letter] = counts.get(letter, 0) + 1\n    max_count = max(counts.values(), default=0)\n    return {k: v for k, v in zip(counts.keys(), counts.values()) if v == max_count}", "code_10": "def histogram(test):\n    counts = {}\n    for letter in test.split():\n        counts[letter] = counts.get(letter, 0) + 1\n    max_count = max(counts.values(), default=0)\n    return {k: v for k, v in filter(lambda item: item[1] == max_count, reversed(sorted(counts.items(), key=lambda item: item[1])))}"}
{"task_id": "112", "prompt": "\ndef reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n", "code_1": "def reverse_delete(s, c):\n    s = ''.join(ch for ch in s if ch not in c)\n    return (s, s == s[::-1])", "code_2": "def reverse_delete(s, c):\n    s = [ch for ch in s if ch not in c]\n    return (''.join(s), s == s[::-1])", "code_3": "def reverse_delete(s, c):\n    s = list(filter(lambda ch: ch not in c, s))\n    return (''.join(s), s == s[::-1])", "code_4": "def reverse_delete(s, c):\n    s = ''.join(ch for ch in s if ch not in set(c))\n    return (s, s == s[::-1])", "code_5": "def reverse_delete(s, c):\n    c = set(c)\n    s = ''.join(ch for ch in s if ch not in c)\n    return (s, s == s[::-1])", "code_6": "def reverse_delete(s, c):\n    s = ''.join(ch for ch in s if ch not in c)\n    return (s, s[::1] == s[::-1])", "code_7": "def reverse_delete(s, c):\n    s = ''.join(ch for ch in s if ch not in c)\n    return (s, all(s[i] == s[-i-1] for i in range(len(s)//2)))", "code_8": "def reverse_delete(s, c):\n    s = ''.join(ch for ch in s if ch not in c)\n    return (s, s == ''.join(reversed(s)))", "code_9": "def reverse_delete(s, c):\n    s = ''.join(ch for ch in s if ch not in c)\n    return (s, all(s[i] == s[~i] for i in range(len(s)//2)))", "code_10": "def reverse_delete(s, c):\n    s = ''.join(ch for ch in s if ch not in c)\n    return (s, all(s[i] == s[len(s)-i-1] for i in range(len(s)//2)))"}
{"task_id": "113", "prompt": "\ndef odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n", "code_1": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(c) % 2 for c in s)}n the str{sum(int(c) % 2 for c in s)}ng {i+1} of the {len(lst)}nput.\" for i, s in enumerate(lst)]", "code_2": "def odd_count(lst):\n    return ['the number of odd elements {}n the str{}ng {} of the {}nput.'.format(sum(int(c) % 2 for c in s), sum(int(c) % 2 for c in s), i+1, len(lst)) for i, s in enumerate(lst)]", "code_3": "def odd_count(lst):\n    return [''.join(['the number of odd elements ', str(sum(int(c) % 2 for c in s)), 'n the str', str(sum(int(c) % 2 for c in s)), 'ng ', str(i+1), ' of the ', str(len(lst)), 'nput.']) for i, s in enumerate(lst)]", "code_4": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(map(lambda x: int(x) % 2, s))}n the str{sum(map(lambda x: int(x) % 2, s))}ng {i+1} of the {len(lst)}nput.\" for i, s in enumerate(lst)]", "code_5": "def odd_count(lst):\n    return ['the number of odd elements {}n the str{}ng {} of the {}nput.'.format(*[sum(int(c) % 2 for c in s)]*2 + [i+1, len(lst)]) for i, s in enumerate(lst)]", "code_6": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(c in '13579' for c in s)}n the str{sum(c in '13579' for c in s)}ng {i+1} of the {len(lst)}nput.\" for i, s in enumerate(lst)]", "code_7": "def odd_count(lst):\n    return ['the number of odd elements {}n the str{}ng {} of the {}nput.'.format(*[sum(c in '13579' for c in s)]*2 + [i+1, len(lst)]) for i, s in enumerate(lst)]", "code_8": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(1 for c in s if int(c) % 2)}n the str{sum(1 for c in s if int(c) % 2)}ng {i+1} of the {len(lst)}nput.\" for i, s in enumerate(lst)]", "code_9": "def odd_count(lst):\n    return ['the number of odd elements {}n the str{}ng {} of the {}nput.'.format(*[sum(1 for c in s if int(c) % 2)]*2 + [i+1, len(lst)]) for i, s in enumerate(lst)]", "code_10": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(c in '13579' for c in s)}n the str{sum(c in '13579' for c in s)}ng {i+1} of the {len(lst)}nput.\" for i, s in enumerate(lst)]"}
{"task_id": "114", "prompt": "\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n", "code_1": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    curr_sum = 0\n    for num in nums:\n        curr_sum = min(num, curr_sum + num)\n        min_sum = min(min_sum, curr_sum)\n    return min_sum", "code_2": "def minSubArraySum(nums):\n    return min(min(nums), sum(nums) - max(nums))", "code_3": "def minSubArraySum(nums):\n    return min(min(nums), sum(nums) - max(nums[i:] for i in range(len(nums))))", "code_4": "def minSubArraySum(nums):\n    return min(min(nums), sum(nums) - max(sum(nums[i:j]) for i in range(len(nums)) for j in range(i+1, len(nums)+1)))", "code_5": "def minSubArraySum(nums):\n    return min(min(nums), sum(nums) - max(reduce(lambda x, y: x + y, nums[i:j]) for i in range(len(nums)) for j in range(i+1, len(nums)+1)))", "code_6": "def minSubArraySum(nums):\n    return min(min(nums), sum(nums) - max(map(sum, (nums[i:j] for i in range(len(nums)) for j in range(i+1, len(nums)+1)))))", "code_7": "def minSubArraySum(nums):\n    return min(min(nums), sum(nums) - max(sum(nums[i:j]) for i in range(len(nums)) for j in range(i+1, len(nums)+1)))", "code_8": "def minSubArraySum(nums):\n    return min(min(nums), sum(nums) - max(sum(nums[i:j]) for j in range(i+1, len(nums)+1) for i in range(len(nums))))", "code_9": "def minSubArraySum(nums):\n    return min(min(nums), sum(nums) - max(sum(nums[i:j]) for i in range(len(nums)) for j in range(len(nums), i, -1)))", "code_10": "def minSubArraySum(nums):\n    return min(min(nums), sum(nums) - max(sum(nums[i:j]) for j in range(len(nums), i, -1) for i in range(len(nums))))"}
{"task_id": "115", "prompt": "\ndef max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n", "code_1": "def max_fill(grid, capacity):\n    return sum((sum(row) + capacity - 1) // capacity for row in grid)", "code_2": "def max_fill(grid, capacity):\n    return sum(math.ceil(sum(row) / capacity) for row in grid)", "code_3": "def max_fill(grid, capacity):\n    return sum(divmod(sum(row), capacity)[0] + divmod(sum(row), capacity)[1] for row in grid)", "code_4": "def max_fill(grid, capacity):\n    return sum(math.ceil(sum(row) / float(capacity)) for row in grid)", "code_5": "def max_fill(grid, capacity):\n    return sum((sum(row) - 1) // capacity + 1 for row in grid)", "code_6": "def max_fill(grid, capacity):\n    return sum(math.ceil(sum(row) / capacity) for row in grid)", "code_7": "def max_fill(grid, capacity):\n    return sum((sum(row) - 1) // capacity + (sum(row) > 0) for row in grid)", "code_8": "def max_fill(grid, capacity):\n    return sum(math.ceil(sum(row) / float(capacity)) for row in grid)", "code_9": "def max_fill(grid, capacity):\n    return sum(math.ceil(sum(row) / capacity) for row in grid)", "code_10": "def max_fill(grid, capacity):\n    return sum((sum(row) - 1) // capacity + (sum(row) > 0) for row in grid)"}
{"task_id": "116", "prompt": "\ndef sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n", "code_1": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "code_2": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "code_3": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "code_4": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "code_5": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "code_6": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "code_7": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "code_8": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "code_9": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "code_10": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "117", "prompt": "\ndef select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n", "code_1": "def select_words(s, n):\n    return [word for word in s.split() if sum(c.lower() not in 'aeiou' for c in word) == n]", "code_2": "def select_words(s, n):\n    vowels = set('aeiou')\n    return [word for word in s.split() if len([c for c in word if c.lower() not in vowels]) == n]", "code_3": "def select_words(s, n):\n    vowels = 'aeiou'\n    return [word for word in s.split() if sum(1 for c in word if c.lower() not in vowels) == n]", "code_4": "def select_words(s, n):\n    vowels = 'aeiou'\n    return [word for word in s.split() if len([c for c in word if c.lower() not in vowels]) == n]", "code_5": "def select_words(s, n):\n    return [word for word in s.split() if sum(c.lower() not in 'aeiou' for c in word.lower()) == n]", "code_6": "def select_words(s, n):\n    vowels = set('aeiou')\n    return [word for word in s.split() if sum(c not in vowels for c in word.lower()) == n]", "code_7": "def select_words(s, n):\n    vowels = 'aeiou'\n    return [word for word in s.split() if sum(c.lower() not in vowels for c in word) == n]", "code_8": "def select_words(s, n):\n    vowels = set('aeiou')\n    return [word for word in s.split() if sum(1 for c in word if c.lower() not in vowels) == n]", "code_9": "def select_words(s, n):\n    vowels = 'aeiou'\n    return [word for word in s.split() if sum(c.lower() not in vowels for c in word.lower()) == n]", "code_10": "def select_words(s, n):\n    vowels = set('aeiou')\n    return [word for word in s.split() if len([c for c in word.lower() if c not in vowels]) == n]"}
{"task_id": "118", "prompt": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n", "code_1": "def get_closest_vowel(word):\n    vowels = set('aeiouAEIOU')\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return ''", "code_2": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    for char in reversed(word[1:-1]):\n        if char in vowels and word[word.index(char) - 1] not in vowels and word[word.index(char) + 1] not in vowels:\n            return char\n    return ''", "code_3": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return ''", "code_4": "def get_closest_vowel(word):\n    vowels = set('aeiouAEIOU')\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return ''", "code_5": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return ''", "code_6": "def get_closest_vowel(word):\n    vowels = set('aeiouAEIOU')\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return ''", "code_7": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return ''", "code_8": "def get_closest_vowel(word):\n    vowels = set('aeiouAEIOU')\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return ''", "code_9": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return ''", "code_10": "def get_closest_vowel(word):\n    vowels = set('aeiouAEIOU')\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return ''"}
{"task_id": "119", "prompt": "\ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n", "code_1": "def match_parens(lst):\n    a, b = lst\n    return 'Yes' if (a.count('(') + b.count('(') == a.count(')') + b.count(')')) and (abs(a.count('(') - a.count(')')) <= 1) and (abs(b.count('(') - b.count(')')) <= 1) else 'No'", "code_2": "def match_parens(lst):\n    a, b = sorted(lst, key=lambda x: (x.count('('), x.count(')')))\n    diff = a.count('(') - a.count(')')\n    return 'Yes' if diff >= 0 and diff <= b.count(')') - b.count('(') else 'No'", "code_3": "def match_parens(lst):\n    a, b = lst\n    diff = abs(a.count('(') - a.count(')'))\n    if diff > len(b):\n        return 'No'\n    b = b.replace('(' * diff, '', 1)\n    b = b.replace(')' * diff, '', 1)\n    return 'Yes' if a.count('(') + b.count('(') == a.count(')') + b.count(')') else 'No'", "code_4": "def match_parens(lst):\n    a, b = lst\n    diff = a.count('(') - a.count(')')\n    if diff < 0:\n        a, b = b, a\n        diff = -diff\n    return 'Yes' if diff <= b.count('(') and diff <= b.count(')') else 'No'", "code_5": "def match_parens(lst):\n    a, b = lst\n    a_diff = a.count('(') - a.count(')')\n    b_diff = b.count('(') - b.count(')')\n    return 'Yes' if abs(a_diff + b_diff) in (0, 1) else 'No'", "code_6": "def match_parens(lst):\n    a, b = lst\n    a_diff = a.count('(') - a.count(')')\n    b_diff = b.count('(') - b.count(')')\n    return 'Yes' if (a_diff >= 0 and b_diff >= 0 and a_diff + b_diff <= 1) or (a_diff <= 0 and b_diff <= 0 and a_diff + b_diff >= -1) else 'No'", "code_7": "def match_parens(lst):\n    a, b = lst\n    a_diff = a.count('(') - a.count(')')\n    b_diff = b.count('(') - b.count(')')\n    return 'Yes' if (a_diff >= 0 and b_diff >= 0 and a_diff <= b_diff) or (a_diff <= 0 and b_diff <= 0 and -a_diff <= -b_diff) else 'No'", "code_8": "def match_parens(lst):\n    a, b = lst\n    a_diff = a.count('(') - a.count(')')\n    b_diff = b.count('(') - b.count(')')\n    return 'Yes' if (a_diff >= 0 and b_diff >= 0 and a_diff <= b_diff + 1) or (a_diff <= 0 and b_diff <= 0 and -a_diff <= -b_diff + 1) else 'No'", "code_9": "def match_parens(lst):\n    a, b = lst\n    a_diff = a.count('(') - a.count(')')\n    b_diff = b.count('(') - b.count(')')\n    return 'Yes' if (a_diff >= 0 and b_diff >= 0 and a_diff <= b_diff + 1 and a_diff + b_diff <= 1) or (a_diff <= 0 and b_diff <= 0 and -a_diff <= -b_diff + 1 and a_diff + b_diff >= -1) else 'No'", "code_10": "def match_parens(lst):\n    a, b = lst\n    a_diff = a.count('(') - a.count(')')\n    b_diff = b.count('(') - b.count(')')\n    return 'Yes' if (a_diff >= 0 and b_diff >= 0 and a_diff <= b_diff + 1 and a_diff + b_diff <= 1) or (a_diff <= 0 and b_diff <= 0 and -a_diff <= -b_diff + 1 and a_diff + b_diff >= -1) or (a_diff < 0 and b_diff > 0 and -a_diff <= b_diff and -a_diff + b_diff <= 1) else 'No'"}
{"task_id": "120", "prompt": "\ndef maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n", "code_1": "import heapq\ndef maximum(arr, k):\n    return heapq.nlargest(k, arr)", "code_2": "def maximum(arr, k):\n    return sorted(arr, reverse=True)[:k]", "code_3": "def maximum(arr, k):\n    arr.sort(reverse=True)\n    return arr[:k]", "code_4": "import random\ndef maximum(arr, k):\n    if k == len(arr):\n        return arr\n    pivot = random.choice(arr)\n    left = [x for x in arr if x > pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x < pivot]\n    if k < len(left):\n        return maximum(left, k)\n    elif k < len(left) + len(middle):\n        return left + middle[:k - len(left)]\n    else:\n        return left + middle + maximum(right, k - len(left) - len(middle))", "code_5": "def maximum(arr, k):\n    return [x for x in sorted(arr) if arr.count(x) >= k][-k:]", "code_6": "def maximum(arr, k):\n    return [x for x in sorted(set(arr), key=arr.count, reverse=True)[:k]] * k", "code_7": "def maximum(arr, k):\n    return [item for sublist in sorted([[x] * arr.count(x) for x in set(arr)], reverse=True) for item in sublist][:k]", "code_8": "def maximum(arr, k):\n    from collections import Counter\n    counter = Counter(arr)\n    return [item for item, _ in counter.most_common(k)] * k", "code_9": "def maximum(arr, k):\n    from collections import deque\n    arr.sort()\n    q = deque(arr, maxlen=k)\n    return list(q)", "code_10": "def maximum(arr, k):\n    import numpy as np\n    return np.partition(arr, -k)[-k:]"}
{"task_id": "121", "prompt": "\ndef solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n", "code_1": "def solution(lst):\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)", "code_2": "def solution(lst):\n    return sum(v for i, v in enumerate(lst) if i % 2 == 0 and v % 2 != 0)", "code_3": "def solution(lst):\n    return sum(lst[::2]) - sum(x for x in lst[::2] if x % 2 == 0)", "code_4": "def solution(lst):\n    return sum(filter(lambda x: x % 2 != 0, lst[::2]))", "code_5": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)", "code_6": "def solution(lst):\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] & 1)", "code_7": "def solution(lst):\n    return sum(v for i, v in enumerate(lst) if not i % 2 and v & 1)", "code_8": "def solution(lst):\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2)", "code_9": "def solution(lst):\n    return sum(v for i, v in enumerate(lst) if i % 2 == 0 and v % 2)", "code_10": "def solution(lst):\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 == 1)"}
{"task_id": "122", "prompt": "\ndef add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n", "code_1": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if 10 <= x < 100)", "code_2": "def add_elements(arr, k):\n    return sum(filter(lambda x: 10 <= x < 100, arr[:k]))", "code_3": "def add_elements(arr, k):\n    return sum(map(lambda x: x if 10 <= x < 100 else 0, arr[:k]))", "code_4": "def add_elements(arr, k):\n    return sum(x for i, x in enumerate(arr) if i < k and 10 <= x < 100)", "code_5": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if len(str(x)) <= 2)", "code_6": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if x >= 10 and x <= 99)", "code_7": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if x // 100 == 0)", "code_8": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if -99 <= x <= 99)", "code_9": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if not (x < 10 or x > 99))", "code_10": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if x // 10 > 0 and x // 100 == 0)"}
{"task_id": "123", "prompt": "\ndef get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n", "code_1": "def get_odd_collatz(n):\n    seq = set()\n    while n != 1:\n        if n % 2:\n            seq.add(n)\n        n = n * 3 + 1 if n % 2 else n // 2\n    seq.add(1)\n    return sorted(seq)", "code_2": "def get_odd_collatz(n):\n    seq = {n}\n    while n > 1:\n        n = n * 3 + 1 if n % 2 else n // 2\n        if n % 2:\n            seq.add(n)\n    return sorted(list(seq))", "code_3": "def get_odd_collatz(n):\n    seq = [n]\n    while n != 1:\n        n = n * 3 + 1 if n % 2 else n // 2\n        if n % 2:\n            seq.append(n)\n    return sorted(set(seq))", "code_4": "def get_odd_collatz(n):\n    seq = {n}\n    while n > 1:\n        n = n * 3 + 1 if n % 2 else n // 2\n        if n % 2:\n            seq.add(n)\n    return sorted(list(seq))", "code_5": "def get_odd_collatz(n):\n    seq = [n]\n    while n != 1:\n        n = n * 3 + 1 if n % 2 else n // 2\n        if n % 2 and n not in seq:\n            seq.append(n)\n    return sorted(seq)", "code_6": "def get_odd_collatz(n):\n    seq = {n}\n    while n > 1:\n        n = n * 3 + 1 if n % 2 else n // 2\n        seq.add(n)\n    return sorted([x for x in seq if x % 2])", "code_7": "def get_odd_collatz(n):\n    seq = [n]\n    while n != 1:\n        n = n * 3 + 1 if n % 2 else n // 2\n        if n not in seq:\n            seq.append(n)\n    return sorted([x for x in seq if x % 2])", "code_8": "def get_odd_collatz(n):\n    seq = {n}\n    while n > 1:\n        n = n * 3 + 1 if n % 2 else n // 2\n        seq.add(n)\n    return sorted(list(filter(lambda x: x % 2, seq)))", "code_9": "def get_odd_collatz(n):\n    seq = [n]\n    while n != 1:\n        n = n * 3 + 1 if n % 2 else n // 2\n        if n not in seq:\n            seq.append(n)\n    return sorted(list(filter(lambda x: x % 2, seq)))", "code_10": "def get_odd_collatz(n):\n    seq = {n}\n    while n > 1:\n        n = n * 3 + 1 if n % 2 else n // 2\n        seq.add(n)\n    return sorted(seq, key=lambda x: x % 2)"}
{"task_id": "124", "prompt": "\ndef valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n", "code_1": "import re\ndef valid_date(date):\n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$', date): return False\n    m, d, y = map(int, date.split('-'))\n    if m < 1 or m > 12 or d < 1 or d > 31: return False\n    if m in [4, 6, 9, 11] and d > 30: return False\n    if m == 2 and d > 29: return False\n    if m == 2 and d == 29 and y % 4 != 0: return False\n    return True", "code_2": "def valid_date(date):\n    try:\n        m, d, y = map(int, date.split('-'))\n        if m < 1 or m > 12 or d < 1 or d > 31: return False\n        if m in [4, 6, 9, 11] and d > 30: return False\n        if m == 2 and d > 29: return False\n        if m == 2 and d == 29 and y % 4 != 0: return False\n        return True\n    except:\n        return False", "code_3": "def valid_date(date):\n    if len(date) != 10 or date[2] != '-' or date[5] != '-': return False\n    m, d, y = int(date[:2]), int(date[3:5]), int(date[6:])\n    if m < 1 or m > 12 or d < 1 or d > 31: return False\n    if m in [4, 6, 9, 11] and d > 30: return False\n    if m == 2 and d > 29: return False\n    if m == 2 and d == 29 and y % 4 != 0: return False\n    return True", "code_4": "def valid_date(date):\n    if not date or len(date) != 10 or date[2] != '-' or date[5] != '-': return False\n    m, d, y = int(date[:2]), int(date[3:5]), int(date[6:])\n    if m < 1 or m > 12 or d < 1 or d > 31: return False\n    if m in [4, 6, 9, 11] and d > 30: return False\n    if m == 2 and d > 29: return False\n    if m == 2 and d == 29 and y % 4 != 0: return False\n    return True", "code_5": "def valid_date(date):\n    if not date or date[2] != '-' or date[5] != '-' or len(date) != 10: return False\n    m, d, y = int(date[:2]), int(date[3:5]), int(date[6:])\n    if m < 1 or m > 12 or d < 1 or d > 31: return False\n    if m in [4, 6, 9, 11] and d > 30: return False\n    if m == 2 and d > 29: return False\n    if m == 2 and d == 29 and y % 4 != 0: return False\n    return True", "code_6": "def valid_date(date):\n    if not date or date[2] != '-' or date[5] != '-' or len(date) != 10: return False\n    m, d, y = map(int, date.split('-'))\n    if m < 1 or m > 12 or d < 1 or d > 31: return False\n    if m in [4, 6, 9, 11] and d > 30: return False\n    if m == 2 and d > 29: return False\n    if m == 2 and d == 29 and y % 4 != 0: return False\n    return True", "code_7": "def valid_date(date):\n    if not date or date[2] != '-' or date[5] != '-' or len(date) != 10: return False\n    m, d, y = map(int, date.split('-'))\n    if m < 1 or m > 12 or d < 1 or d > 31 or (m in [4, 6, 9, 11] and d > 30) or (m == 2 and d > 29) or (m == 2 and d == 29 and y % 4 != 0): return False\n    return True", "code_8": "def valid_date(date):\n    if not date or date[2] != '-' or date[5] != '-' or len(date) != 10: return False\n    m, d, y = map(int, date.split('-'))\n    if m < 1 or m > 12 or d < 1 or d > 31: return False\n    if m in [4, 6, 9, 11] and d > 30: return False\n    if m == 2 and (d > 29 or (d == 29 and y % 4 != 0)): return False\n    return True", "code_9": "def valid_date(date):\n    if not date or date[2] != '-' or date[5] != '-' or len(date) != 10: return False\n    m, d, y = map(int, date.split('-'))\n    if m < 1 or m > 12 or d < 1 or d > 31 or (m in [4, 6, 9, 11] and d > 30) or (m == 2 and (d > 29 or (d == 29 and y % 4 != 0))): return False\n    return True", "code_10": "def valid_date(date):\n    if not date or date[2] != '-' or date[5] != '-' or len(date) != 10: return False\n    m, d, y = map(int, date.split('-'))\n    if m < 1 or m > 12 or d < 1 or d > 31 or (m in [4, 6, 9, 11] and d > 30) or (m == 2 and d > 28 + (y % 4 == 0 and y % 100 != 0 or y % 400 == 0)): return False\n    return True"}
{"task_id": "125", "prompt": "\ndef split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n", "code_1": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt if c.islower() and (ord(c) - ord('a')) % 2 == 1)", "code_2": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(ord(c) % 2 for c in txt if c.islower())", "code_3": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return len([c for c in txt if c.islower() and ord(c) % 2])", "code_4": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for i in range(len(txt)) if i % 2 and txt[i].islower())", "code_5": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt if c.isalpha() and c.islower() and (ord(c) - 97) % 2)", "code_6": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for i in range(len(txt)) if i % 2 == 1 and txt[i].islower())", "code_7": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return len([c for c in txt if c.islower() and (ord(c) - ord('a')) % 2])", "code_8": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for i in range(len(txt)) if i % 2 and txt[i].islower())", "code_9": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return len([c for c in txt if c.islower() and ord(c) % 2])", "code_10": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for i in range(len(txt)) if i % 2 and txt[i].islower())"}
{"task_id": "126", "prompt": "\ndef is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n", "code_1": "def is_sorted(lst):\n    return lst == sorted(set(lst))", "code_2": "def is_sorted(lst):\n    return all(x < y for x, y in zip(lst, lst[1:])) and len(lst) == len(set(lst))", "code_3": "def is_sorted(lst):\n    return lst == sorted(lst) and len(lst) == len(set(lst))", "code_4": "def is_sorted(lst):\n    return all(lst[i] < lst[i + 1] for i in range(len(lst) - 1)) and len(lst) == len(set(lst))", "code_5": "def is_sorted(lst):\n    return lst == sorted(lst, key=lst.index)", "code_6": "def is_sorted(lst):\n    return all(lst[i] < lst[i + 1] for i in range(len(lst) - 1)) and all(lst.count(i) == 1 for i in lst)", "code_7": "def is_sorted(lst):\n    return lst == sorted(lst) and all(lst.count(i) == 1 for i in lst)", "code_8": "def is_sorted(lst):\n    return all(lst[i] < lst[i + 1] for i in range(len(lst) - 1)) and len(lst) == len(set(lst)) and lst == sorted(lst)", "code_9": "def is_sorted(lst):\n    return all(lst[i] < lst[i + 1] for i in range(len(lst) - 1)) and all(lst.count(i) == 1 for i in lst) and lst == sorted(lst)", "code_10": "def is_sorted(lst):\n    return all(lst[i] < lst[i + 1] for i in range(len(lst) - 1)) and all(lst.count(i) == 1 for i in lst) and lst == sorted(lst, key=lst.index)"}
{"task_id": "127", "prompt": "\ndef intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n", "code_1": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    length = end - start\n    if length < 2:\n        return \"NO\"\n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    return \"YES\"", "code_2": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    length = end - start\n    if length < 2:\n        return \"NO\"\n    return \"YES\" if all(length % i for i in range(2, int(length**0.5) + 1)) else \"NO\"", "code_3": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    length = end - start\n    if length < 2:\n        return \"NO\"\n    return \"YES\" if not any(length % i == 0 for i in range(2, int(length**0.5) + 1)) else \"NO\"", "code_4": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    length = end - start\n    if length < 2:\n        return \"NO\"\n    return \"YES\" if all(length % i for i in range(2, length)) == True else \"NO\"", "code_5": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    length = end - start\n    if length < 2:\n        return \"NO\"\n    return \"YES\" if not any(map(lambda x: length % x == 0, range(2, int(length**0.5) + 1))) else \"NO\"", "code_6": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    length = end - start\n    if length < 2:\n        return \"NO\"\n    return \"YES\" if all(length % i != 0 for i in range(2, int(length**0.5) + 1)) else \"NO\"", "code_7": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    length = end - start\n    if length < 2:\n        return \"NO\"\n    return \"YES\" if not any(length % i == 0 for i in range(2, length)) else \"NO\"", "code_8": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    length = end - start\n    if length < 2:\n        return \"NO\"\n    return \"YES\" if all(length % i for i in range(2, length)) else \"NO\"", "code_9": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    length = end - start\n    if length < 2:\n        return \"NO\"\n    return \"YES\" if not any(length % i == 0 for i in range(2, length)) else \"NO\"", "code_10": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    length = end - start\n    if length < 2:\n        return \"NO\"\n    return \"YES\" if all(length % i for i in range(2, int(length**0.5) + 1)) and length > 1 else \"NO\""}
{"task_id": "128", "prompt": "\ndef prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n", "code_1": "def prod_signs(arr):\n    if not arr: return None\n    sign = 1\n    total = 0\n    for num in arr:\n        sign *= -1 if num < 0 else 1\n        total += abs(num)\n    return total * sign", "code_2": "def prod_signs(arr):\n    if not arr: return None\n    sign = 1\n    total = sum(abs(num) for num in arr)\n    for num in arr:\n        if num < 0: sign *= -1\n    return total * sign", "code_3": "def prod_signs(arr):\n    if not arr: return None\n    sign = 1\n    total = 0\n    for num in arr:\n        sign *= (num > 0) - (num < 0)\n        total += abs(num)\n    return total * sign", "code_4": "def prod_signs(arr):\n    if not arr: return None\n    sign = 1\n    total = sum(map(abs, arr))\n    for num in arr:\n        sign *= -1 if num < 0 else 1\n    return total * sign", "code_5": "def prod_signs(arr):\n    if not arr: return None\n    sign = 1\n    total = 0\n    for num in arr:\n        sign *= (num > 0) - (num < 0)\n        total += abs(num)\n    return total * sign", "code_6": "def prod_signs(arr):\n    if not arr: return None\n    sign = 1\n    total = sum(abs(num) for num in arr)\n    sign = (-1) ** sum(num < 0 for num in arr)\n    return total * sign", "code_7": "def prod_signs(arr):\n    if not arr: return None\n    sign = 1\n    total = 0\n    for num in arr:\n        if num < 0: sign *= -1\n        total += abs(num)\n    return total * sign", "code_8": "def prod_signs(arr):\n    if not arr: return None\n    sign = 1\n    total = sum(map(abs, arr))\n    sign = (-1) ** sum(num < 0 for num in arr)\n    return total * sign", "code_9": "def prod_signs(arr):\n    if not arr: return None\n    sign = 1\n    total = 0\n    for num in arr:\n        sign *= -1 if num < 0 else 1\n        total += abs(num)\n    return total * sign", "code_10": "def prod_signs(arr):\n    if not arr: return None\n    sign = 1\n    total = sum(abs(num) for num in arr)\n    for num in arr:\n        sign *= (num > 0) - (num < 0)\n    return total * sign"}
{"task_id": "129", "prompt": "\ndef minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n", "code_1": "def minPath(grid, k):\n    n = len(grid)\n    dirs = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    def dfs(x, y, k, path):\n        if k == 0:\n            return path\n        min_path = None\n        for dx, dy in dirs:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in path:\n                path.append((nx, ny))\n                new_path = dfs(nx, ny, k - 1, path)\n                if min_path is None or new_path < min_path:\n                    min_path = new_path\n                path.pop()\n        return min_path\n    min_path = None\n    for i in range(n):\n        for j in range(n):\n            path = [(i, j)]\n            new_path = dfs(i, j, k - 1, path)\n            if min_path is None or new_path < min_path:\n                min_path = new_path\n    return [grid[x][y] for x, y in min_path]", "code_2": "def minPath(grid, k):\n    n = len(grid)\n    dirs = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    def dfs(x, y, k, path, visited):\n        if k == 0:\n            return path\n        min_path = None\n        for dx, dy in dirs:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited:\n                visited.add((nx, ny))\n                path.append(grid[nx][ny])\n                new_path = dfs(nx, ny, k - 1, path, visited)\n                if min_path is None or new_path < min_path:\n                    min_path = new_path\n                visited.remove((nx, ny))\n                path.pop()\n        return min_path\n    min_path = None\n    for i in range(n):\n        for j in range(n):\n            path = [grid[i][j]]\n            visited = {(i, j)}\n            new_path = dfs(i, j, k - 1, path, visited)\n            if min_path is None or new_path < min_path:\n                min_path = new_path\n    return min_path", "code_3": "def minPath(grid, k):\n    n = len(grid)\n    dirs = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    def dfs(x, y, k, path):\n        if k == 0:\n            return path\n        min_path = [float('inf')] * k\n        for dx, dy in dirs:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and grid[nx][ny] < path[-1]:\n                new_path = dfs(nx, ny, k - 1, path + [grid[nx][ny]])\n                if new_path < min_path:\n                    min_path = new_path\n        return min_path\n    min_path = [float('inf')] * k\n    for i in range(n):\n        for j in range(n):\n            new_path = dfs(i, j, k - 1, [grid[i][j]])\n            if new_path < min_path:\n                min_path = new_path\n    return min_path", "code_4": "def minPath(grid, k):\n    n = len(grid)\n    dirs = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    def dfs(x, y, k, path):\n        if k == 0:\n            return path\n        min_path = None\n        for dx, dy in dirs:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and grid[nx][ny] < path[-1]:\n                new_path = dfs(nx, ny, k - 1, path + [grid[nx][ny]])\n                if min_path is None or new_path < min_path:\n                    min_path = new_path\n        return min_path\n    min_path = None\n    for i in range(n):\n        for j in range(n):\n            new_path = dfs(i, j, k - 1, [grid[i][j]])\n            if min_path is None or new_path < min_path:\n                min_path = new_path\n    return min_path", "code_5": "def minPath(grid, k):\n    n = len(grid)\n    dirs = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    def dfs(x, y, k, path, visited):\n        if k == 0:\n            return path\n        min_path = None\n        for dx, dy in dirs:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited:\n                visited.add((nx, ny))\n                new_path = dfs(nx, ny, k - 1, path + [grid[nx][ny]], visited)\n                visited.remove((nx, ny))\n                if min_path is None or new_path < min_path:\n                    min_path = new_path\n        return min_path\n    min_path = None\n    for i in range(n):\n        for j in range(n):\n            new_path = dfs(i, j, k - 1, [grid[i][j]], {(i, j)})\n            if min_path is None or new_path < min_path:\n                min_path = new_path\n    return min_path", "code_6": "def minPath(grid, k):\n    n = len(grid)\n    dirs = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    def dfs(x, y, k, path):\n        if k == 0:\n            return path\n        min_path = None\n        for dx, dy in dirs:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and grid[nx][ny] < path[-1]:\n                new_path = dfs(nx, ny, k - 1, path + [grid[nx][ny]])\n                if min_path is None or new_path < min_path:\n                    min_path = new_path\n        return min_path\n    min_path = None\n    for i in range(n):\n        for j in range(n):\n            new_path = dfs(i, j, k - 1, [grid[i][j]])\n            if min_path is None or new_path < min_path:\n                min_path = new_path\n    return min_path", "code_7": "def minPath(grid, k):\n    n = len(grid)\n    dirs = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    def dfs(x, y, k, path, visited):\n        if k == 0:\n            return path\n        min_path = None\n        for dx, dy in dirs:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited:\n                visited.add((nx, ny))\n                new_path = dfs(nx, ny, k - 1, path + [grid[nx][ny]], visited)\n                visited.remove((nx, ny))\n                if min_path is None or new_path < min_path:\n                    min_path = new_path\n        return min_path\n    min_path = None\n    for i in range(n):\n        for j in range(n):\n            new_path = dfs(i, j, k - 1, [grid[i][j]], {(i, j)})\n            if min_path is None or new_path < min_path:\n                min_path = new_path\n    return min_path", "code_8": "def minPath(grid, k):\n    n = len(grid)\n    dirs = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    def dfs(x, y, k, path):\n        if k == 0:\n            return path\n        min_path = None\n        for dx, dy in dirs:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and grid[nx][ny] < path[-1]:\n                new_path = dfs(nx, ny, k - 1, path + [grid[nx][ny]])\n                if min_path is None or new_path < min_path:\n                    min_path = new_path\n        return min_path\n    min_path = None\n    for i in range(n):\n        for j in range(n):\n            new_path = dfs(i, j, k - 1, [grid[i][j]])\n            if min_path is None or new_path < min_path:\n                min_path = new_path\n    return min_path", "code_9": "def minPath(grid, k):\n    n = len(grid)\n    dirs = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    def dfs(x, y, k, path, visited):\n        if k == 0:\n            return path\n        min_path = None\n        for dx, dy in dirs:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited:\n                visited.add((nx, ny))\n                new_path = dfs(nx, ny, k - 1, path + [grid[nx][ny]], visited)\n                visited.remove((nx, ny))\n                if min_path is None or new_path < min_path:\n                    min_path = new_path\n        return min_path\n    min_path = None\n    for i in range(n):\n        for j in range(n):\n            new_path = dfs(i, j, k - 1, [grid[i][j]], {(i, j)})\n            if min_path is None or new_path < min_path:\n                min_path = new_path\n    return min_path", "code_10": "def minPath(grid, k):\n    n = len(grid)\n    dirs = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    def dfs(x, y, k, path):\n        if k == 0:\n            return path\n        min_path = None\n        for dx, dy in dirs:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and grid[nx][ny] < path[-1]:\n                new_path = dfs(nx, ny, k - 1, path + [grid[nx][ny]])\n                if min_path is None or new_path < min_path:\n                    min_path = new_path\n        return min_path\n    min_path = None\n    for i in range(n):\n        for j in range(n):\n            new_path = dfs(i, j, k - 1, [grid[i][j]])\n            if min_path is None or new_path < min_path:\n                min_path = new_path\n    return min_path"}
{"task_id": "130", "prompt": "\ndef tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n", "code_1": "def tri(n):\n    t = [0, 3] + [0] * n\n    for i in range(2, n + 1):\n        t[i] = t[i - 1] + t[i - 2] + (1 + i // 2 if i % 2 == 0 else t[i + 1])\n    return t[:n + 1]", "code_2": "def tri(n):\n    t = [0, 3] + [0] * n\n    for i in range(2, n + 1):\n        t[i] = t[i - 1] + t[i - 2] + (2 if i % 2 == 0 else t[i + 1])\n        if i % 2 == 0:\n            t[i] += i // 2\n    return t[:n + 1]", "code_3": "def tri(n):\n    t = [0, 3] + [0] * n\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            t[i] = t[i - 1] + t[i - 2] + 1 + i // 2\n        else:\n            t[i] = t[i - 1] + t[i - 2] + t[i + 1]\n    return t[:n + 1]", "code_4": "def tri(n):\n    t = [0, 3] + [0] * n\n    for i in range(2, n + 1):\n        t[i] = t[i - 1] + t[i - 2] + (1 + i // 2 if i % 2 == 0 else t[i + 1])\n    return [t[i] for i in range(n + 1)]", "code_5": "def tri(n):\n    t = [0, 3] + [0] * n\n    for i in range(2, n + 1):\n        t[i] = t[i - 1] + t[i - 2] + (2 + i if i % 2 == 0 else t[i + 1])\n    return t[:n + 1]", "code_6": "def tri(n):\n    t = [0, 3] + [0] * n\n    for i in range(2, n + 1):\n        t[i] = t[i - 1] + t[i - 2] + (1 + i // 2 if i % 2 == 0 else t[i + 1])\n    return [t[i] for i in range(n + 1)]", "code_7": "def tri(n):\n    t = [0, 3] + [0] * n\n    for i in range(2, n + 1):\n        t[i] = t[i - 1] + t[i - 2] + (2 if i % 2 == 0 else t[i + 1])\n        if i % 2 == 0:\n            t[i] += i // 2\n    return [t[i] for i in range(n + 1)]", "code_8": "def tri(n):\n    t = [0, 3] + [0] * n\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            t[i] = t[i - 1] + t[i - 2] + 1 + i // 2\n        else:\n            t[i] = t[i - 1] + t[i - 2] + t[i + 1]\n    return [t[i] for i in range(n + 1)]", "code_9": "def tri(n):\n    t = [0, 3] + [0] * n\n    for i in range(2, n + 1):\n        t[i] = t[i - 1] + t[i - 2] + (2 + i if i % 2 == 0 else t[i + 1])\n    return [t[i] for i in range(n + 1)]", "code_10": "def tri(n):\n    t = [0, 3] + [0] * n\n    for i in range(2, n + 1):\n        t[i] = t[i - 1] + t[i - 2] + (1 + i // 2 if i % 2 == 0 else t[i + 1])\n    return [t[i] for i in range(n + 1)]"}
{"task_id": "131", "prompt": "\ndef digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n", "code_1": "def digits(n):\n    product = 1\n    while n:\n        digit = n % 10\n        if digit % 2:\n            product *= digit\n        n //= 10\n    return product if product != 1 else 0", "code_2": "def digits(n):\n    product = 1\n    for digit in str(n):\n        digit = int(digit)\n        if digit % 2:\n            product *= digit\n    return product if product != 1 else 0", "code_3": "def digits(n):\n    return reduce(lambda x, y: x * y if y % 2 else x, map(int, str(n)), 1) if reduce(lambda x, y: x * y if y % 2 else x, map(int, str(n)), 1) != 1 else 0", "code_4": "def digits(n):\n    product = 1\n    for digit in map(int, str(n)):\n        if digit % 2:\n            product *= digit\n    return product if product != 1 else 0", "code_5": "def digits(n):\n    product = 1\n    for digit in str(n):\n        digit = int(digit)\n        product *= digit if digit % 2 else 1\n    return product if product != 1 else 0", "code_6": "def digits(n):\n    product = 1\n    for digit in str(n):\n        digit = int(digit)\n        if digit % 2:\n            product *= digit\n    return product if product > 1 else 0", "code_7": "def digits(n):\n    product = 1\n    for digit in map(int, str(n)):\n        product *= digit if digit % 2 else 1\n    return product if product != 1 else 0", "code_8": "def digits(n):\n    product = 1\n    for digit in str(n):\n        digit = int(digit)\n        product *= digit if digit % 2 else product\n    return product if product != 1 else 0", "code_9": "def digits(n):\n    product = 1\n    for digit in str(n):\n        digit = int(digit)\n        product *= digit if digit % 2 else product\n    return product if product > 1 else 0", "code_10": "def digits(n):\n    product = 1\n    for digit in map(int, str(n)):\n        product *= digit if digit % 2 else product\n    return product if product > 1 else 0"}
{"task_id": "132", "prompt": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n", "code_1": "def is_nested(string):\n    return '[]' in string and '[' in string[string.index('[]')+1:] and ']' in string[:string.rindex('[]')]", "code_2": "def is_nested(string):\n    return string.count('[]') > 1", "code_3": "def is_nested(string):\n    return string.count('[') > 1 and string.count(']') > 1 and string.index('[') < string.rindex(']')", "code_4": "def is_nested(string):\n    return string.count('[]') > 0 and string.count('[') > 1 and string.count(']') > 1", "code_5": "def is_nested(string):\n    return string.count('[]') > 0 and string.count('[') != string.count(']')", "code_6": "def is_nested(string):\n    return string.count('[') > 1 and string.count(']') > 1 and string.find('[') < string.rfind(']')", "code_7": "def is_nested(string):\n    return string.count('[]') > 0 and string.count('[') > string.count(']')", "code_8": "def is_nested(string):\n    return string.count('[') > 1 and string.count(']') > 1 and string.index('[') < string.index(']', string.index('[')+1)", "code_9": "def is_nested(string):\n    return string.count('[]') > 0 and string.count('[') > 1 and string.count(']') > 1 and string.index('[') < string.rindex(']')", "code_10": "def is_nested(string):\n    return string.count('[') > 1 and string.count(']') > 1 and string.find('[') < string.find(']', string.find('[')+1)"}
{"task_id": "133", "prompt": "\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n", "code_1": "def sum_squares(lst):\n    return sum(int(i)**2 for i in lst)", "code_2": "def sum_squares(lst):\n    return sum(map(lambda x: int(x)**2, lst))", "code_3": "import math\ndef sum_squares(lst):\n    return sum(math.ceil(i)**2 for i in lst)", "code_4": "import numpy as np\ndef sum_squares(lst):\n    return np.sum(np.ceil(lst)**2)", "code_5": "def sum_squares(lst):\n    return sum([int(i)**2 for i in lst])", "code_6": "def sum_squares(lst):\n    return sum(pow(int(i), 2) for i in lst)", "code_7": "def sum_squares(lst):\n    return sum(map(pow, map(int, lst), [2]*len(lst)))", "code_8": "from functools import reduce\ndef sum_squares(lst):\n    return reduce(lambda x, y: x + y**2, map(int, lst))", "code_9": "def sum_squares(lst):\n    return sum(i**2 for i in map(int, lst))", "code_10": "def sum_squares(lst):\n    return sum(i*i for i in map(round, lst))"}
{"task_id": "134", "prompt": "\ndef check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n", "code_1": "def check_if_last_char_is_a_letter(txt):\n    return txt and txt[-1].isalpha() and txt[-2] == ' '", "code_2": "def check_if_last_char_is_a_letter(txt):\n    return len(txt) > 1 and txt[-1].isalpha() and txt[-2] == ' '", "code_3": "def check_if_last_char_is_a_letter(txt):\n    return txt[-1:].isalpha() and txt[-2:-1] == ' ' if txt else False", "code_4": "def check_if_last_char_is_a_letter(txt):\n    return bool(txt) and txt[-1].isalpha() and txt[-2] == ' '", "code_5": "def check_if_last_char_is_a_letter(txt):\n    return txt and txt[-1].isalpha() and (len(txt) == 1 or txt[-2] == ' ')", "code_6": "def check_if_last_char_is_a_letter(txt):\n    return txt[-1:].isalpha() and (len(txt) < 2 or txt[-2] == ' ')", "code_7": "def check_if_last_char_is_a_letter(txt):\n    return txt and txt[-1].isalpha() and (len(txt) < 2 or txt[-2] == ' ')", "code_8": "def check_if_last_char_is_a_letter(txt):\n    return txt and txt[-1].isalpha() and (len(txt) < 2 or txt[-2] == ' ')", "code_9": "def check_if_last_char_is_a_letter(txt):\n    return txt and txt[-1].isalpha() and (len(txt) < 2 or txt[-2] == ' ')", "code_10": "def check_if_last_char_is_a_letter(txt):\n    return txt and txt[-1].isalpha() and (len(txt) < 2 or txt[-2] == ' ')"}
{"task_id": "135", "prompt": "\ndef can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n", "code_1": "def can_arrange(arr):\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1", "code_2": "def can_arrange(arr):\n    return next((i for i in range(len(arr) - 1, 0, -1) if arr[i] < arr[i - 1]), -1)", "code_3": "def can_arrange(arr):\n    try:\n        return len(arr) - 1 - arr[::-1].index(next(x for x in arr[::-1] if x < arr[len(arr) - 1 - arr[::-1].index(x)]))\n    except StopIteration:\n        return -1", "code_4": "def can_arrange(arr):\n    return max((i for i, x in enumerate(arr) if i > 0 and x < arr[i - 1]), default=-1)", "code_5": "def can_arrange(arr):\n    return max((i for i in range(1, len(arr)) if arr[i] < arr[i - 1]), default=-1)", "code_6": "def can_arrange(arr):\n    return max(filter(lambda i: arr[i] < arr[i - 1], range(1, len(arr))), default=-1)", "code_7": "def can_arrange(arr):\n    return max((i for i in range(1, len(arr)) if arr[i - 1] > arr[i]), default=-1)", "code_8": "def can_arrange(arr):\n    return max((i for i in range(len(arr) - 1) if arr[i] > arr[i + 1]), default=-1)", "code_9": "def can_arrange(arr):\n    return next((i for i in reversed(range(len(arr) - 1)) if arr[i] > arr[i + 1]), -1)", "code_10": "def can_arrange(arr):\n    return next((i for i in range(len(arr) - 1, -1, -1) if i == 0 or arr[i] < arr[i - 1]), -1)"}
{"task_id": "136", "prompt": "\ndef largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n", "code_1": "def largest_smallest_integers(lst):\n    neg, pos = None, None\n    for num in lst:\n        if num < 0:\n            neg = max(neg, num) if neg is not None else num\n        elif num > 0:\n            pos = min(pos, num) if pos is not None else num\n    return neg, pos", "code_2": "def largest_smallest_integers(lst):\n    neg = [x for x in lst if x < 0]\n    pos = [x for x in lst if x > 0]\n    return (max(neg) if neg else None, min(pos) if pos else None)", "code_3": "def largest_smallest_integers(lst):\n    neg = sorted([x for x in lst if x < 0], reverse=True)\n    pos = sorted([x for x in lst if x > 0])\n    return (neg[0] if neg else None, pos[0] if pos else None)", "code_4": "def largest_smallest_integers(lst):\n    neg = [x for x in lst if x < 0]\n    pos = [x for x in lst if x > 0]\n    return (max(neg) if neg else None, min(pos) if pos else None)", "code_5": "def largest_smallest_integers(lst):\n    neg = filter(lambda x: x < 0, lst)\n    pos = filter(lambda x: x > 0, lst)\n    return (max(neg) if neg else None, min(pos) if pos else None)", "code_6": "def largest_smallest_integers(lst):\n    neg = [x for x in lst if x < 0]\n    pos = [x for x in lst if x > 0]\n    return (max(neg) if neg else None, min(pos) if pos else None)", "code_7": "def largest_smallest_integers(lst):\n    neg = [x for x in lst if x < 0]\n    pos = [x for x in lst if x > 0]\n    return (max(neg) if neg else None, min(pos) if pos else None)", "code_8": "def largest_smallest_integers(lst):\n    neg = [x for x in lst if x < 0]\n    pos = [x for x in lst if x > 0]\n    return (max(neg) if neg else None, min(pos) if pos else None)", "code_9": "def largest_smallest_integers(lst):\n    neg = [x for x in lst if x < 0]\n    pos = [x for x in lst if x > 0]\n    return (max(neg) if neg else None, min(pos) if pos else None)", "code_10": "def largest_smallest_integers(lst):\n    neg = [x for x in lst if x < 0]\n    pos = [x for x in lst if x > 0]\n    return (max(neg) if neg else None, min(pos) if pos else None)"}
{"task_id": "137", "prompt": "\ndef compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n", "code_1": "def compare_one(a, b):\n    a, b = (float(str(a).replace(',', '.')), float(str(b).replace(',', '.'))) if isinstance(a, str) or isinstance(b, str) else (a, b)\n    return a if a > b else b if a < b else None", "code_2": "def compare_one(a, b):\n    a, b = map(lambda x: float(str(x).replace(',', '.')), (a, b))\n    return a if a > b else b if a < b else None", "code_3": "def compare_one(a, b):\n    a, b = (float(a), float(b)) if not isinstance(a, str) and not isinstance(b, str) else (float(str(a).replace(',', '.')), float(str(b).replace(',', '.')))\n    return a if a > b else b if a < b else None", "code_4": "def compare_one(a, b):\n    a, b = (float(a), float(b)) if isinstance(a, (int, float)) and isinstance(b, (int, float)) else (float(str(a).replace(',', '.')), float(str(b).replace(',', '.')))\n    return a if a > b else b if a < b else None", "code_5": "def compare_one(a, b):\n    a, b = map(lambda x: float(x) if isinstance(x, (int, float)) else float(str(x).replace(',', '.')), (a, b))\n    return a if a > b else b if a < b else None", "code_6": "def compare_one(a, b):\n    a, b = (float(a), float(b)) if type(a) in (int, float, str) and type(b) in (int, float, str) else (None, None)\n    return a if a > b else b if a < b else None", "code_7": "def compare_one(a, b):\n    a, b = map(lambda x: float(x) if not isinstance(x, str) else float(str(x).replace(',', '.')), (a, b))\n    return a if a > b else b if a < b else None", "code_8": "def compare_one(a, b):\n    a, b = (float(a), float(b)) if isinstance(a, (int, float)) and isinstance(b, (int, float)) else (float(str(a).replace(',', '.')), float(str(b).replace(',', '.')))\n    return max(a, b) if a != b else None", "code_9": "def compare_one(a, b):\n    a, b = map(lambda x: float(str(x).replace(',', '.')) if isinstance(x, str) else x, (a, b))\n    return a if a > b else b if a < b else None", "code_10": "def compare_one(a, b):\n    a, b = (float(a), float(b)) if not isinstance(a, str) or not isinstance(b, str) else (float(str(a).replace(',', '.')), float(str(b).replace(',', '.')))\n    return a if a > b else b if a < b else None"}
{"task_id": "138", "prompt": "\ndef is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n", "code_1": "def is_equal_to_sum_even(n):\n    return n > 0 and n % 2 == 0 and n >= 8 and (n - 8) % 2 == 0", "code_2": "def is_equal_to_sum_even(n):\n    return n in range(8, 5000, 2)", "code_3": "def is_equal_to_sum_even(n):\n    return 8 <= n <= 5000 and n % 2 == 0", "code_4": "def is_equal_to_sum_even(n):\n    return n & 7 == 0 and n > 0", "code_5": "def is_equal_to_sum_even(n):\n    return n in {i for i in range(8, 5000, 2)}", "code_6": "def is_equal_to_sum_even(n):\n    return n in [i for i in range(8, 5000, 2)]", "code_7": "def is_equal_to_sum_even(n):\n    return n in set(range(8, 5000, 2))", "code_8": "def is_equal_to_sum_even(n):\n    return n in {8, 10, 12, ..., 5000}", "code_9": "def is_equal_to_sum_even(n):\n    return n in range(8, 5001, 2)", "code_10": "def is_equal_to_sum_even(n):\n    return n in [8, 10, 12, ..., 5000]"}
{"task_id": "139", "prompt": "\ndef special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n", "code_1": "def special_factorial(n):\n    fact = [1] * (n + 1)\n    for i in range(1, n + 1):\n        fact[i] = i * fact[i - 1]\n    return fact[n] ** n", "code_2": "def special_factorial(n):\n    fact = 1\n    res = 1\n    for i in range(1, n + 1):\n        fact *= i\n        res *= fact\n    return res", "code_3": "import math\ndef special_factorial(n):\n    return math.factorial(n) ** n", "code_4": "from functools import reduce\nimport operator\ndef special_factorial(n):\n    return reduce(operator.mul, [math.factorial(i) for i in range(1, n + 1)]) ** n", "code_5": "import numpy as np\ndef special_factorial(n):\n    return np.prod([np.math.factorial(i) for i in range(1, n + 1)]) ** n", "code_6": "def special_factorial(n):\n    return pow(reduce(lambda x, y: x * y, [math.factorial(i) for i in range(1, n + 1)]), n)", "code_7": "def special_factorial(n):\n    fact = [1] * (n + 1)\n    for i in range(1, n + 1):\n        fact[i] = i * fact[i - 1]\n    return pow(fact[n], n)", "code_8": "def special_factorial(n):\n    fact = 1\n    res = 1\n    for i in range(1, n + 1):\n        fact *= i\n        res *= fact\n        res %= (10 ** 9 + 7)\n    return res", "code_9": "def special_factorial(n):\n    fact = [1] * (n + 1)\n    for i in range(1, n + 1):\n        fact[i] = i * fact[i - 1]\n    return pow(fact[n], n, 10 ** 9 + 7)", "code_10": "def special_factorial(n):\n    fact = 1\n    res = 1\n    mod = 10 ** 9 + 7\n    for i in range(1, n + 1):\n        fact = (fact * i) % mod\n        res = (res * fact) % mod\n    return res"}
{"task_id": "140", "prompt": "\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n", "code_1": "import re\ndef fix_spaces(text):\n    text = re.sub(' +', '_', text)\n    text = re.sub('_+', '-', text)\n    return text", "code_2": "def fix_spaces(text):\n    return '-'.join('_'.join(word for word in line.split(' ')) for line in text.split('  '))", "code_3": "def fix_spaces(text):\n    return ''.join('-' if i > 0 and c == '_' and text[i-1] == '_' else '_' if c == ' ' else c for i, c in enumerate(text))", "code_4": "def fix_spaces(text):\n    return ''.join('-' if text[i-1] == '_' and c == '_' else c for i, c in enumerate(text.replace(' ', '_')))", "code_5": "def fix_spaces(text):\n    return ''.join(c if c != ' ' else '_' if text[i-1] != ' ' or i == 0 else '-' for i, c in enumerate(text))", "code_6": "def fix_spaces(text):\n    return ''.join(c if c != ' ' else '_' if text[i-1] != '_' or text[i-2] == '_' else '-' for i, c in enumerate(text))", "code_7": "def fix_spaces(text):\n    return ''.join(c if c != ' ' else '_' if text[i-1] != '_' or text[i-2] == '_' else '-' for i, c in enumerate(text.lstrip(' ')))", "code_8": "def fix_spaces(text):\n    return ''.join(c if c != ' ' else '_' if not i or text[i-1] != '_' else '-' for i, c in enumerate(text))", "code_9": "def fix_spaces(text):\n    return ''.join(c if c != ' ' else '_' if i == 0 or text[i-1] != '_' else '-' for i, c in enumerate(text))", "code_10": "def fix_spaces(text):\n    return ''.join(c if c != ' ' else '_' if i == 0 or text[i-1] != '_' or text[i-2] == '_' else '-' for i, c in enumerate(text))"}
{"task_id": "141", "prompt": "\ndef file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n", "code_1": "def file_name_check(file_name):\n    return 'Yes' if file_name.replace('.', '').isalnum() and file_name[0].isalpha() and file_name.count('.') == 1 and file_name.count('0123456789') <= 3 and file_name.split('.')[1] in ['txt', 'exe', 'dll'] else 'No'", "code_2": "def file_name_check(file_name):\n    import re\n    return 'Yes' if re.match('^[a-zA-Z][a-zA-Z0-9]{0,2}\\.[txt|exe|dll]$', file_name) else 'No'", "code_3": "def file_name_check(file_name):\n    parts = file_name.split('.')\n    return 'Yes' if len(parts) == 2 and parts[0].isalpha() and parts[1] in ['txt', 'exe', 'dll'] and sum(c.isdigit() for c in parts[0]) <= 3 else 'No'", "code_4": "def file_name_check(file_name):\n    return 'Yes' if file_name[0].isalpha() and file_name.count('.') == 1 and file_name.split('.')[1] in ['txt', 'exe', 'dll'] and sum(c.isdigit() for c in file_name.split('.')[0]) <= 3 else 'No'", "code_5": "def file_name_check(file_name):\n    import string\n    valid_chars = string.ascii_letters + string.digits + '.'\n    return 'Yes' if all(c in valid_chars for c in file_name) and file_name[0].isalpha() and file_name.count('.') == 1 and file_name.split('.')[1] in ['txt', 'exe', 'dll'] and sum(c.isdigit() for c in file_name.split('.')[0]) <= 3 else 'No'", "code_6": "def file_name_check(file_name):\n    return 'Yes' if file_name[0].isalpha() and file_name.count('.') == 1 and file_name.split('.')[1] in ['txt', 'exe', 'dll'] and sum(c.isdigit() for c in file_name.split('.')[0]) <= 3 and file_name.replace('.', '').isalnum() else 'No'", "code_7": "def file_name_check(file_name):\n    import re\n    return 'Yes' if re.match('^[a-zA-Z][a-zA-Z0-9]{0,2}\\.(txt|exe|dll)$', file_name) else 'No'", "code_8": "def file_name_check(file_name):\n    return 'Yes' if file_name[0].isalpha() and file_name.count('.') == 1 and file_name.split('.')[1] in ['txt', 'exe', 'dll'] and sum(c.isdigit() for c in file_name.split('.')[0]) <= 3 and file_name.replace('.', '').isalnum() and file_name.split('.')[0].isalpha() else 'No'", "code_9": "def file_name_check(file_name):\n    import re\n    return 'Yes' if re.match('^[a-zA-Z][a-zA-Z0-9]{0,2}\\.(txt|exe|dll)$', file_name) and sum(c.isdigit() for c in file_name.split('.')[0]) <= 3 else 'No'", "code_10": "def file_name_check(file_name):\n    return 'Yes' if file_name[0].isalpha() and file_name.count('.') == 1 and file_name.split('.')[1] in ['txt', 'exe', 'dll'] and sum(c.isdigit() for c in file_name.split('.')[0]) <= 3 and file_name.replace('.', '').isalnum() and file_name.split('.')[0][0].isalpha() else 'No'"}
{"task_id": "142", "prompt": "\n\n\ndef sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n", "code_1": "def sum_squares(lst):\n    return sum(x**2 if i%3==0 else x**3 if i%4==0 and i%3!=0 else x for i, x in enumerate(lst))", "code_2": "def sum_squares(lst):\n    return sum(x**2 if i%3==0 else x**3 if i%4==0 and i%3!=0 else x for i, x in enumerate(lst, 1))", "code_3": "def sum_squares(lst):\n    return sum(x**2 if i%3==0 else x**3 if i%4==0 and i%3!=0 else x for i in range(len(lst)) for x in [lst[i]])", "code_4": "def sum_squares(lst):\n    return sum(x**2 if i%3==0 else x**3 if i%4==0 and i%3!=0 else x for i in range(len(lst)) for x in (lst[i],))", "code_5": "def sum_squares(lst):\n    return sum(map(lambda i: lst[i]**2 if i%3==0 else lst[i]**3 if i%4==0 and i%3!=0 else lst[i], range(len(lst))))", "code_6": "def sum_squares(lst):\n    return sum(lst[i]**2 if i%3==0 else lst[i]**3 if i%4==0 and i%3!=0 else lst[i] for i in range(len(lst)))", "code_7": "def sum_squares(lst):\n    return sum(lst[i]**2 if i%3==0 else lst[i]**3 if i%4==0 and i%3!=0 else lst[i] for i in range(len(lst)) if i%3==0 or i%4==0)", "code_8": "def sum_squares(lst):\n    return sum(lst[i]**2 if i%3==0 else lst[i]**3 if i%4==0 and i%3!=0 else lst[i] for i in range(len(lst)) if i%3==0 or (i%4==0 and i%3!=0))", "code_9": "def sum_squares(lst):\n    return sum(lst[i]**2 if i%3==0 else lst[i]**3 if i%4==0 and i%3!=0 else lst[i] for i in range(len(lst)) if i%3==0 or i%4==0 and i%3!=0)", "code_10": "def sum_squares(lst):\n    return sum(lst[i]**2 if i%3==0 else lst[i]**3 if i%4==0 and i%3!=0 else lst[i] for i in range(len(lst)) if i%3==0 or (i%4==0 and i%3!=0))"}
{"task_id": "143", "prompt": "\ndef words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n", "code_1": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2: return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0: return False\n        return True\n    return ' '.join(word for word in sentence.split() if is_prime(len(word)))", "code_2": "def words_in_sentence(sentence):\n    primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n    return ' '.join(word for word in sentence.split() if len(word) in primes)", "code_3": "def words_in_sentence(sentence):\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    return ' '.join(word for word in sentence.split() if len(word) in primes)", "code_4": "def words_in_sentence(sentence):\n    primes = [False, False] + [True for _ in range(2, 101)]\n    for i in range(2, int(101**0.5) + 1):\n        if primes[i]:\n            for j in range(i*i, 101, i):\n                primes[j] = False\n    return ' '.join(word for word in sentence.split() if primes[len(word)])", "code_5": "def words_in_sentence(sentence):\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    words = sentence.split()\n    return ' '.join(word for word in words if len(word) in primes)", "code_6": "def words_in_sentence(sentence):\n    primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n    words = sentence.split()\n    return ' '.join(word for word in words if len(word) in primes)", "code_7": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2: return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0: return False\n        return True\n    words = sentence.split()\n    return ' '.join(word for word in words if is_prime(len(word)))", "code_8": "def words_in_sentence(sentence):\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    words = sentence.split()\n    return ' '.join(word for word in words if len(word) in primes)", "code_9": "def words_in_sentence(sentence):\n    primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n    words = sentence.split()\n    return ' '.join(word for word in words if len(word) in primes)", "code_10": "def words_in_sentence(sentence):\n    primes = [False, False] + [True for _ in range(2, 101)]\n    for i in range(2, int(101**0.5) + 1):\n        if primes[i]:\n            for j in range(i*i, 101, i):\n                primes[j] = False\n    words = sentence.split()\n    return ' '.join(word for word in words if primes[len(word)])"}
{"task_id": "144", "prompt": "\ndef simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n", "code_1": "def simplify(x, n):\n    a, b = map(int, x.split('/'))\n    c, d = map(int, n.split('/'))\n    return (a * c) % (b * d) == 0", "code_2": "import math\ndef simplify(x, n):\n    a, b = map(int, x.split('/'))\n    c, d = map(int, n.split('/'))\n    return math.gcd(a * c, b * d) > 1", "code_3": "from fractions import Fraction\ndef simplify(x, n):\n    return Fraction(x) * Fraction(n) == int(Fraction(x) * Fraction(n))", "code_4": "def simplify(x, n):\n    a, b = map(int, x.split('/'))\n    c, d = map(int, n.split('/'))\n    return (a * d) % (b * c) == 0", "code_5": "def simplify(x, n):\n    a, b = map(int, x.split('/'))\n    c, d = map(int, n.split('/'))\n    return (a * d) // math.gcd(a * d, b * c) == (b * c) // math.gcd(a * d, b * c)", "code_6": "def simplify(x, n):\n    a, b = map(int, x.split('/'))\n    c, d = map(int, n.split('/'))\n    return (a * c) / math.gcd(a * c, b * d) == (b * d) / math.gcd(a * c, b * d)", "code_7": "def simplify(x, n):\n    a, b = map(int, x.split('/'))\n    c, d = map(int, n.split('/'))\n    return (a * d) % math.gcd(a * d, b * c) == 0", "code_8": "def simplify(x, n):\n    a, b = map(int, x.split('/'))\n    c, d = map(int, n.split('/'))\n    return (a * c) / math.gcd(a, b) / math.gcd(c, d) == int((a * c) / math.gcd(a, b) / math.gcd(c, d))", "code_9": "def simplify(x, n):\n    a, b = map(int, x.split('/'))\n    c, d = map(int, n.split('/'))\n    return (a * d) % math.gcd(b, d) == 0 and (b * c) % math.gcd(b, d) == 0", "code_10": "def simplify(x, n):\n    a, b = map(int, x.split('/'))\n    c, d = map(int, n.split('/'))\n    return (a * d) / math.gcd(a * d, b * c) == int((a * d) / math.gcd(a * d, b * c))"}
{"task_id": "145", "prompt": "\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n", "code_1": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))), nums.index(x)))", "code_2": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))", "code_3": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)), reverse=False)", "code_4": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(i) for i in str(abs(x))), nums.index(x)))", "code_5": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)), reverse=False)", "code_6": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))), nums.index(x)), reverse=False)", "code_7": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(i) for i in str(abs(x))), nums.index(x)), reverse=False)", "code_8": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)), reverse=False)", "code_9": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))), nums.index(x)), reverse=False)", "code_10": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)), reverse=False)"}
{"task_id": "146", "prompt": "\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n", "code_1": "def specialFilter(nums):\n    return sum(1 for num in nums if num > 10 and num % 2 != 0 and int(str(num)[-1]) % 2 != 0)", "code_2": "def specialFilter(nums):\n    return len([num for num in nums if num > 10 and num % 10 in {1, 3, 5, 7, 9} and int(str(num)[0]) in {1, 3, 5, 7, 9}])", "code_3": "def specialFilter(nums):\n    return sum(num > 10 and num % 2 != 0 and int(str(num)[-1]) in {1, 3, 5, 7, 9} for num in nums)", "code_4": "def specialFilter(nums):\n    return sum(num > 10 and num % 10 % 2 != 0 and int(str(num)[0]) % 2 != 0 for num in nums)", "code_5": "def specialFilter(nums):\n    return len([num for num in nums if num > 10 and str(num)[0] in '13579' and str(num)[-1] in '13579'])", "code_6": "def specialFilter(nums):\n    return sum(1 for num in nums if num > 10 and str(num)[0] in '13579' and str(num)[-1] in '13579')", "code_7": "def specialFilter(nums):\n    return len([num for num in nums if num > 10 and num % 2 != 0 and num % 10 != 0])", "code_8": "def specialFilter(nums):\n    return sum(1 for num in nums if num > 10 and num % 2 != 0 and num % 10 != 0)", "code_9": "def specialFilter(nums):\n    return len([num for num in nums if num > 10 and num % 10 in {1, 3, 5, 7, 9} and num // 10 % 10 in {1, 3, 5, 7, 9}])", "code_10": "def specialFilter(nums):\n    return sum(1 for num in nums if num > 10 and num % 10 in {1, 3, 5, 7, 9} and num // 10 % 10 in {1, 3, 5, 7, 9})"}
{"task_id": "147", "prompt": "\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n", "code_1": "def get_max_triples(n):\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        c[(i * i - i + 1) % 3] += 1\n    return c[0] * (c[0] - 1) * (c[0] - 2) // 6 + c[1] * (c[1] - 1) // 2 * c[2]", "code_2": "def get_max_triples(n):\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        c[(i * i - i + 1) % 3] += 1\n    return sum(c[i] * (c[i] - 1) * (c[i] - 2) // 6 for i in range(3)) + c[0] * c[1] * c[2]", "code_3": "def get_max_triples(n):\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        c[(i * i - i) % 3] += 1\n    return c[0] * (c[0] - 1) * (c[0] - 2) // 6 + c[1] * (c[1] - 1) // 2 * c[2]", "code_4": "def get_max_triples(n):\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        c[(i * i - i) % 3] += 1\n    return sum(c[i] * (c[i] - 1) * (c[i] - 2) // 6 for i in range(3)) + c[0] * c[1] * c[2]", "code_5": "def get_max_triples(n):\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        c[(i * i - i + 1) % 3] += 1\n    return c[0] * (c[0] - 1) * (c[0] - 2) // 6 + c[1] * c[2] * (n - c[0] - c[1] - c[2])", "code_6": "def get_max_triples(n):\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        c[(i * i - i) % 3] += 1\n    return c[0] * (c[0] - 1) * (c[0] - 2) // 6 + c[1] * c[2] * (n - c[0] - c[1] - c[2])", "code_7": "def get_max_triples(n):\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        c[(i * i - i + 1) % 3] += 1\n    return c[0] * (c[0] - 1) * (c[0] - 2) // 6 + c[1] * (c[1] - 1) // 2 * (n - c[0] - c[1])", "code_8": "def get_max_triples(n):\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        c[(i * i - i) % 3] += 1\n    return c[0] * (c[0] - 1) * (c[0] - 2) // 6 + c[1] * (c[1] - 1) // 2 * (n - c[0] - c[1])", "code_9": "def get_max_triples(n):\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        c[(i * i - i + 1) % 3] += 1\n    return c[0] * (c[0] - 1) * (c[0] - 2) // 6 + c[1] * c[2] * (c[1] + c[2] - n)", "code_10": "def get_max_triples(n):\n    c = [0, 0, 0]\n    for i in range(1, n + 1):\n        c[(i * i - i) % 3] += 1\n    return c[0] * (c[0] - 1) * (c[0] - 2) // 6 + c[1] * c[2] * (c[1] + c[2] - n)"}
{"task_id": "148", "prompt": "\ndef bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n", "code_1": "def bf(p1, p2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    try:\n        return tuple(planets[planets.index(p1)+1:planets.index(p2)])\n    except ValueError:\n        return ()", "code_2": "def bf(p1, p2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if p1 in planets and p2 in planets:\n        return tuple(planets[planets.index(p1)+1:planets.index(p2)])\n    return ()", "code_3": "def bf(p1, p2):\n    planets = {\"Mercury\": 0, \"Venus\": 1, \"Earth\": 2, \"Mars\": 3, \"Jupiter\": 4, \"Saturn\": 5, \"Uranus\": 6, \"Neptune\": 7}\n    if p1 in planets and p2 in planets:\n        return tuple(planet for planet in planets if planets[p1] < planets[planet] < planets[p2])\n    return ()", "code_4": "def bf(p1, p2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    try:\n        return tuple(planets[planets.index(p1)+1:planets.index(p2)])\n    except:\n        return ()", "code_5": "def bf(p1, p2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if p1 in planets and p2 in planets:\n        return tuple(planets[i] for i in range(planets.index(p1)+1, planets.index(p2)))\n    return ()", "code_6": "def bf(p1, p2):\n    planets = {\"Mercury\": 1, \"Venus\": 2, \"Earth\": 3, \"Mars\": 4, \"Jupiter\": 5, \"Saturn\": 6, \"Uranus\": 7, \"Neptune\": 8}\n    if p1 in planets and p2 in planets:\n        return tuple(planet for planet, distance in planets.items() if planets[p1] < distance < planets[p2])\n    return ()", "code_7": "def bf(p1, p2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if p1 in planets and p2 in planets:\n        return tuple(planets[planets.index(p1)+i+1] for i in range(planets.index(p2) - planets.index(p1) - 1))\n    return ()", "code_8": "def bf(p1, p2):\n    planets = {\"Mercury\": 0, \"Venus\": 1, \"Earth\": 2, \"Mars\": 3, \"Jupiter\": 4, \"Saturn\": 5, \"Uranus\": 6, \"Neptune\": 7}\n    return tuple(planet for planet in planets if p1 in planets and p2 in planets and planets[p1] < planets[planet] < planets[p2])", "code_9": "def bf(p1, p2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if p1 in planets and p2 in planets:\n        return tuple(planets[i] for i in range(len(planets)) if planets.index(p1) < i < planets.index(p2))\n    return ()", "code_10": "def bf(p1, p2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if p1 in planets and p2 in planets:\n        return tuple(planet for planet in planets if planets.index(p1) < planets.index(planet) < planets.index(p2))\n    return ()"}
{"task_id": "149", "prompt": "\ndef sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n", "code_1": "def sorted_list_sum(lst):\n    return sorted(sorted(word for word in lst if len(word) % 2 == 0), key=len)", "code_2": "def sorted_list_sum(lst):\n    return sorted(filter(lambda x: len(x) % 2 == 0, lst), key=lambda x: (len(x), x))", "code_3": "def sorted_list_sum(lst):\n    lst = [word for word in lst if len(word) % 2 == 0]\n    lst.sort(key=lambda x: (len(x), x))\n    return lst", "code_4": "def sorted_list_sum(lst):\n    lst = [word for word in lst if not len(word) % 2]\n    return sorted(lst, key=lambda x: (len(x), x))", "code_5": "def sorted_list_sum(lst):\n    lst = [word for word in lst if len(word) % 2 == 0]\n    lst.sort(key=len)\n    lst.sort()\n    return lst", "code_6": "def sorted_list_sum(lst):\n    lst = [word for word in lst if len(word) % 2 == 0]\n    lst.sort()\n    lst.sort(key=len)\n    return lst", "code_7": "def sorted_list_sum(lst):\n    lst = [word for word in lst if len(word) % 2 == 0]\n    lst.sort(key=lambda x: (len(x), x))\n    return lst", "code_8": "def sorted_list_sum(lst):\n    lst = [word for word in lst if len(word) % 2 == 0]\n    lst.sort(key=len)\n    lst.sort(key=lambda x: (len(x), x))\n    return lst", "code_9": "def sorted_list_sum(lst):\n    lst = [word for word in lst if len(word) % 2 == 0]\n    lst.sort(key=lambda x: (len(x), x))\n    return lst", "code_10": "def sorted_list_sum(lst):\n    lst = [word for word in lst if len(word) % 2 == 0]\n    lst.sort(key=len)\n    lst.sort(key=lambda x: (len(x), x))\n    return lst"}
{"task_id": "150", "prompt": "\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n", "code_1": "def x_or_y(n, x, y):\n    return x if all(n % i for i in range(2, int(n**0.5) + 1)) and n > 1 else y", "code_2": "def x_or_y(n, x, y):\n    if n < 2:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x", "code_3": "def x_or_y(n, x, y):\n    if n < 2:\n        return y\n    if n == 2 or n == 3:\n        return x\n    if n % 2 == 0 or n % 3 == 0:\n        return y\n    i = 5\n    w = 2\n    while i * i <= n:\n        if n % i == 0:\n            return y\n        i += w\n        w = 6 - w\n    return x", "code_4": "def x_or_y(n, x, y):\n    if n < 2:\n        return y\n    if n == 2:\n        return x\n    if n % 2 == 0:\n        return y\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return y\n    return x", "code_5": "def x_or_y(n, x, y):\n    if n < 2:\n        return y\n    for i in [2, 3]:\n        if n == i:\n            return x\n        if n % i == 0:\n            return y\n    for i in range(5, int(n**0.5) + 1, 6):\n        if n % i == 0 or n % (i + 2) == 0:\n            return y\n    return x", "code_6": "def x_or_y(n, x, y):\n    if n < 2:\n        return y\n    if n == 2 or n == 3:\n        return x\n    if n % 2 == 0 or n % 3 == 0:\n        return y\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return y\n        i += 6\n    return x", "code_7": "def x_or_y(n, x, y):\n    if n < 2:\n        return y\n    if n == 2:\n        return x\n    if n % 2 == 0:\n        return y\n    max_div = int(n**0.5) + 1\n    for i in range(3, max_div, 2):\n        if n % i == 0:\n            return y\n    return x", "code_8": "def x_or_y(n, x, y):\n    if n < 2:\n        return y\n    if n == 2 or n == 3:\n        return x\n    if n % 2 == 0 or n % 3 == 0:\n        return y\n    i = 5\n    while i * i <= n:\n        if n % i == 0:\n            return y\n        i += 2\n        if n % i == 0:\n            return y\n        i += 4\n    return x", "code_9": "def x_or_y(n, x, y):\n    if n < 2:\n        return y\n    if n == 2:\n        return x\n    if n % 2 == 0:\n        return y\n    max_div = int(n**0.5) + 1\n    for i in range(3, max_div, 2):\n        if n % i == 0:\n            return y\n    return x", "code_10": "def x_or_y(n, x, y):\n    if n < 2:\n        return y\n    if n == 2:\n        return x\n    if n % 2 == 0:\n        return y\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return y\n    return x"}
{"task_id": "151", "prompt": "\ndef double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n", "code_1": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x > 0 and x % 2 == 1 and x == int(x))", "code_2": "def double_the_difference(lst):\n    return sum(map(lambda x: x**2 if x > 0 and x % 2 == 1 and x == int(x) else 0, lst))", "code_3": "def double_the_difference(lst):\n    return sum(x**2 for x in filter(lambda x: x > 0 and x % 2 == 1 and x == int(x), lst))", "code_4": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2)", "code_5": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x > 0 and x % 2 and x.is_integer())", "code_6": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x > 0 and x % 2 and x == round(x))", "code_7": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x > 0 and x % 2 and x - int(x) == 0)", "code_8": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x > 0 and x % 2 and x % 1 == 0)", "code_9": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x > 0 and x % 2 and not x % 1)", "code_10": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x > 0 and x % 2 and x.is_integer())"}
{"task_id": "152", "prompt": "\ndef compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n", "code_1": "def compare(game, guess):\n    return [abs(g - s) for g, s in zip(guess, game)]", "code_2": "def compare(game, guess):\n    return list(map(lambda g, s: abs(g - s), guess, game))", "code_3": "def compare(game, guess):\n    return [abs(guess[i] - game[i]) for i in range(len(game))]", "code_4": "def compare(game, guess):\n    return [abs(guess[i] - score) for i, score in enumerate(game)]", "code_5": "def compare(game, guess):\n    return [abs(g - game[i]) for i, g in enumerate(guess)]", "code_6": "import numpy as np\ndef compare(game, guess):\n    return np.abs(np.array(guess) - np.array(game)).tolist()", "code_7": "from operator import sub\ndef compare(game, guess):\n    return [abs(sub(g, s)) for g, s in zip(guess, game)]", "code_8": "def compare(game, guess):\n    return [abs(guess[i] - score) for i in range(len(game)) for score in [game[i]]]", "code_9": "def compare(game, guess):\n    return [abs(g - s) for s, g in zip(game, guess)]", "code_10": "def compare(game, guess):\n    return [abs(g - game[i]) for i in range(len(game)) if (g := guess[i]) != (s := game[i])] + [0] * (len(game) - len(guess))"}
{"task_id": "153", "prompt": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n", "code_1": "def Strongest_Extension(class_name, extensions):\n    return class_name + '.' + max(extensions, key=lambda x: (sum(c.isupper() for c in x) - sum(c.islower() for c in x), -extensions.index(x)))", "code_2": "def Strongest_Extension(class_name, extensions):\n    strengths = [(sum(c.isupper() for c in ext) - sum(c.islower() for c in ext), ext) for ext in extensions]\n    return class_name + '.' + max(strengths)[1]", "code_3": "def Strongest_Extension(class_name, extensions):\n    strengths = [(sum(map(str.isupper, ext)) - sum(map(str.islower, ext)), ext) for ext in extensions]\n    return class_name + '.' + max(strengths)[1]", "code_4": "def Strongest_Extension(class_name, extensions):\n    strengths = [(sum(c.isupper() - c.islower() for c in ext), ext) for ext in extensions]\n    return class_name + '.' + max(strengths)[1]", "code_5": "def Strongest_Extension(class_name, extensions):\n    strengths = [(sum(1 if c.isupper() else -1 if c.islower() else 0 for c in ext), ext) for ext in extensions]\n    return class_name + '.' + max(strengths)[1]", "code_6": "def Strongest_Extension(class_name, extensions):\n    strengths = [(sum(ord(c) < 97 for c in ext) - sum(ord(c) > 90 for c in ext), ext) for ext in extensions]\n    return class_name + '.' + max(strengths)[1]", "code_7": "def Strongest_Extension(class_name, extensions):\n    strengths = [(sum(c.isupper() for c in ext) - sum(c.islower() for c in ext), i) for i, ext in enumerate(extensions)]\n    return class_name + '.' + extensions[max(strengths)[1]]", "code_8": "def Strongest_Extension(class_name, extensions):\n    strengths = [(sum(c.isupper() - c.islower() for c in ext), i) for i, ext in enumerate(extensions)]\n    return class_name + '.' + extensions[max(strengths)[1]]", "code_9": "def Strongest_Extension(class_name, extensions):\n    strengths = [(sum(1 if c.isupper() else -1 if c.islower() else 0 for c in ext), i) for i, ext in enumerate(extensions)]\n    return class_name + '.' + extensions[max(strengths)[1]]", "code_10": "def Strongest_Extension(class_name, extensions):\n    strengths = [(sum(ord(c) < 97 for c in ext) - sum(ord(c) > 90 for c in ext), i) for i, ext in enumerate(extensions)]\n    return class_name + '.' + extensions[max(strengths)[1]]"}
{"task_id": "154", "prompt": "\ndef cycpattern_check(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n", "code_1": "def cycpattern_check(a, b):\n    return any(b in a[i:] + a[:i] for i in range(len(b)))", "code_2": "def cycpattern_check(a, b):\n    return any(a[i:i + len(b)] == b for i in range(len(a) - len(b) + 1)) or any(a[i:] + a[:len(b) - i] == b for i in range(1, len(b)))", "code_3": "def cycpattern_check(a, b):\n    return (b in a + a) and (len(b) <= len(a))", "code_4": "def cycpattern_check(a, b):\n    return any(a[i:i + len(b)] == b for i in range(len(a))) or any(a[i:] + a[:len(b) - i] == b for i in range(1, len(b)))", "code_5": "def cycpattern_check(a, b):\n    return any(a[i:i + len(b)] == b for i in range(len(a))) or any(a[i:] + a[:len(b) - i] == b for i in range(len(b)))", "code_6": "def cycpattern_check(a, b):\n    return any(a[i:i + len(b)] == b for i in range(len(a))) or any(a[i:] + a[:len(b) - i] == b for i in range(len(a)))", "code_7": "def cycpattern_check(a, b):\n    return any(a[i:i + len(b)] == b for i in range(len(a))) or any(a[i:] + a[:len(b) - i] == b for i in range(len(a) - len(b) + 1))", "code_8": "def cycpattern_check(a, b):\n    return any(a[i:i + len(b)] == b for i in range(len(a))) or any(a[i:] + a[:len(b) - i] == b for i in range(len(a) - len(b)))", "code_9": "def cycpattern_check(a, b):\n    return any(a[i:i + len(b)] == b for i in range(len(a))) or any(a[i:] + a[:len(b) - i] == b for i in range(len(a) - len(b) + 2))", "code_10": "def cycpattern_check(a, b):\n    return any(a[i:i + len(b)] == b for i in range(len(a))) or any(a[i:] + a[:len(b) - i] == b for i in range(len(a) - len(b) + 3))"}
{"task_id": "155", "prompt": "\ndef even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n", "code_1": "def even_odd_count(num):\n    num = str(abs(num))\n    return (sum(1 for c in num if int(c) % 2 == 0), sum(1 for c in num if int(c) % 2 != 0))", "code_2": "def even_odd_count(num):\n    num = str(abs(num))\n    even = sum(c in '02468' for c in num)\n    return (even, len(num) - even)", "code_3": "def even_odd_count(num):\n    num = str(abs(num))\n    even = sum(map(lambda x: x in '02468', num))\n    return (even, len(num) - even)", "code_4": "def even_odd_count(num):\n    num = str(abs(num))\n    even = len([c for c in num if int(c) % 2 == 0])\n    return (even, len(num) - even)", "code_5": "def even_odd_count(num):\n    num = str(abs(num))\n    even = len(list(filter(lambda x: x in '02468', num)))\n    return (even, len(num) - even)", "code_6": "def even_odd_count(num):\n    num = str(abs(num))\n    even = len([c for c in num if c in '02468'])\n    return (even, len(num) - even)", "code_7": "def even_odd_count(num):\n    num = str(abs(num))\n    even = sum(c in '02468' for c in num)\n    odd = len(num) - even\n    return (even, odd)", "code_8": "def even_odd_count(num):\n    num = str(abs(num))\n    counts = [0, 0]\n    for c in num:\n        counts[int(c) % 2] += 1\n    return tuple(counts)", "code_9": "def even_odd_count(num):\n    num = str(abs(num))\n    counts = [0, 0]\n    for c in num:\n        if c in '02468':\n            counts[0] += 1\n        else:\n            counts[1] += 1\n    return tuple(counts)", "code_10": "def even_odd_count(num):\n    num = str(abs(num))\n    counts = {0: 0, 1: 0}\n    for c in num:\n        counts[int(c) % 2] += 1\n    return (counts[0], counts[1])"}
{"task_id": "156", "prompt": "\ndef int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n", "code_1": "def int_to_mini_roman(n):\n    v = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    s = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i']\n    r = ''\n    for i in range(len(v)):\n        while n >= v[i]:\n            r += s[i]\n            n -= v[i]\n    return r", "code_2": "def int_to_mini_roman(n):\n    d = {1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'}\n    r = ''\n    for k in d:\n        while n >= k:\n            r += d[k]\n            n -= k\n    return r", "code_3": "def int_to_mini_roman(n):\n    v = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    s = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i']\n    return ''.join(s[i] * (n // v[i]) + int_to_mini_roman(n % v[i]) for i in range(len(v)))", "code_4": "def int_to_mini_roman(n):\n    d = {1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'}\n    return ''.join(d[k] * (n // k) + int_to_mini_roman(n % k) for k in sorted(d, reverse=True))", "code_5": "def int_to_mini_roman(n):\n    v = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    s = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i']\n    i = 0\n    r = ''\n    while n > 0:\n        while n >= v[i]:\n            r += s[i]\n            n -= v[i]\n        i += 1\n    return r", "code_6": "def int_to_mini_roman(n):\n    d = {1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'}\n    i = max(d.keys())\n    r = ''\n    while n > 0:\n        while n >= i:\n            r += d[i]\n            n -= i\n        i = next(k for k in sorted(d.keys(), reverse=True) if k < i)\n    return r", "code_7": "def int_to_mini_roman(n):\n    v = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    s = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i']\n    i = 0\n    r = ''\n    while n > 0:\n        q, n = divmod(n, v[i])\n        r += s[i] * q\n        i += 1\n    return r", "code_8": "def int_to_mini_roman(n):\n    d = {1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'}\n    i = max(d.keys())\n    r = ''\n    while n > 0:\n        q, n = divmod(n, i)\n        r += d[i] * q\n        i = next(k for k in sorted(d.keys(), reverse=True) if k < i)\n    return r", "code_9": "def int_to_mini_roman(n):\n    v = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    s = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i']\n    return ''.join(s[i] * (n // v[i]) for i in range(len(v))) + int_to_mini_roman(n % v[i]) if n >= v[i] else ''", "code_10": "def int_to_mini_roman(n):\n    d = {1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'}\n    return ''.join(d[k] * (n // k) for k in sorted(d, reverse=True)) + int_to_mini_roman(n % k) if n >= k else ''"}
{"task_id": "157", "prompt": "\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n", "code_1": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "code_2": "def right_angle_triangle(a, b, c):\n    return a*a + b*b == c*c or b*b + c*c == a*a or c*c + a*a == b*b", "code_3": "def right_angle_triangle(a, b, c):\n    return (a**2 + b**2 == c**2) or (b**2 + c**2 == a**2) or (c**2 + a**2 == b**2)", "code_4": "def right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2", "code_5": "def right_angle_triangle(a, b, c):\n    return any(x**2 + y**2 == z**2 for x, y, z in permutations([a, b, c], 3))", "code_6": "def right_angle_triangle(a, b, c):\n    return sum(sorted([a, b, c])[:2])**2 == sorted([a, b, c])[2]**2", "code_7": "def right_angle_triangle(a, b, c):\n    return (a < b and a < c and a*a + b*b == c*c) or (b < a and b < c and a*a + b*b == c*c) or (c < a and c < b and a*a + b*b == c*c)", "code_8": "def right_angle_triangle(a, b, c):\n    return (a*a == b*b + c*c) or (b*b == a*a + c*c) or (c*c == a*a + b*b)", "code_9": "def right_angle_triangle(a, b, c):\n    return (a**2 + b**2 == c**2) or (a**2 + c**2 == b**2) or (b**2 + c**2 == a**2)", "code_10": "def right_angle_triangle(a, b, c):\n    return (a*a + b*b == c*c) or (a*a + c*c == b*b) or (b*b + c*c == a*a)"}
{"task_id": "158", "prompt": "\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n", "code_1": "def find_max(words):\n    return max(words, key=lambda x: (len(set(x)), x))", "code_2": "def find_max(words):\n    return min(words, key=lambda x: (-len(set(x)), x))", "code_3": "def find_max(words):\n    return sorted(words, key=lambda x: (-len(set(x)), x))[0]", "code_4": "def find_max(words):\n    return sorted(words, key=lambda x: (len(set(x)), x), reverse=True)[0]", "code_5": "def find_max(words):\n    return max(sorted(words), key=lambda x: len(set(x)))", "code_6": "def find_max(words):\n    return min(sorted(words, reverse=True), key=lambda x: -len(set(x)))", "code_7": "def find_max(words):\n    return min(words, key=lambda x: (len(set(x)), -ord(x[0])))", "code_8": "def find_max(words):\n    return max(words, key=lambda x: (len(set(x)), ord(x[0])))", "code_9": "def find_max(words):\n    return sorted(words, key=lambda x: (len(set(x)), ord(x[0])), reverse=True)[0]", "code_10": "def find_max(words):\n    return sorted(words, key=lambda x: (-len(set(x)), -ord(x[0])))[0]"}
{"task_id": "159", "prompt": "\ndef eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n", "code_1": "def eat(number, need, remaining):\n    eaten = min(number + need, number + remaining)\n    return [eaten, max(0, remaining - (need - (eaten - number)))]", "code_2": "def eat(number, need, remaining):\n    total_eaten = min(number + need, number + remaining)\n    return [total_eaten, max(0, remaining - (need - total_eaten + number))]", "code_3": "def eat(number, need, remaining):\n    total_eaten = min(number + need, number + remaining)\n    return [total_eaten, max(0, remaining - need + number - total_eaten)]", "code_4": "def eat(number, need, remaining):\n    total_eaten = min(number + need, number + remaining)\n    return [total_eaten, max(0, remaining - need + total_eaten - number)]", "code_5": "def eat(number, need, remaining):\n    total_eaten = min(number + need, number + remaining)\n    return [total_eaten, max(0, remaining + number - need - total_eaten)]", "code_6": "def eat(number, need, remaining):\n    total_eaten = min(number + need, number + remaining)\n    return [total_eaten, max(0, remaining - need + total_eaten - number)]", "code_7": "def eat(number, need, remaining):\n    total_eaten = min(number + need, number + remaining)\n    return [total_eaten, max(0, remaining - need + total_eaten - number)]", "code_8": "def eat(number, need, remaining):\n    total_eaten = min(number + need, number + remaining)\n    return [total_eaten, max(0, remaining - need + number + total_eaten)]", "code_9": "def eat(number, need, remaining):\n    total_eaten = min(number + need, number + remaining)\n    return [total_eaten, max(0, remaining - need + number + total_eaten)]", "code_10": "def eat(number, need, remaining):\n    total_eaten = min(number + need, number + remaining)\n    return [total_eaten, max(0, remaining - need + number + total_eaten)]"}
{"task_id": "160", "prompt": "\ndef do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n", "code_1": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result", "code_2": "def do_algebra(operator, operand):\n    operations = {'+': lambda x, y: x + y, '-': lambda x, y: x - y, '*': lambda x, y: x * y, '//': lambda x, y: x // y, '**': lambda x, y: x ** y}\n    result = operand[0]\n    for op, num in zip(operator, operand[1:]):\n        result = operations[op](result, num)\n    return result", "code_3": "def do_algebra(operator, operand):\n    from operator import add, sub, mul, floordiv, pow\n    operations = {'+': add, '-': sub, '*': mul, '//': floordiv, '**': pow}\n    result = operand[0]\n    for op, num in zip(operator, operand[1:]):\n        result = operations[op](result, num)\n    return result", "code_4": "def do_algebra(operator, operand):\n    result = operand[0]\n    for op, num in zip(operator, operand[1:]):\n        if op == '+':\n            result = add(result, num)\n        elif op == '-':\n            result = sub(result, num)\n        elif op == '*':\n            result = mul(result, num)\n        elif op == '//':\n            result = floordiv(result, num)\n        elif op == '**':\n            result = pow(result, num)\n    return result", "code_5": "def do_algebra(operator, operand):\n    result = operand[0]\n    for op, num in zip(operator, operand[1:]):\n        result = eval(f\"{result} {op} {num}\")\n    return result", "code_6": "def do_algebra(operator, operand):\n    import operator as op\n    operations = {'+': op.add, '-': op.sub, '*': op.mul, '//': op.floordiv, '**': op.pow}\n    result = operand[0]\n    for op, num in zip(operator, operand[1:]):\n        result = operations[op](result, num)\n    return result", "code_7": "def do_algebra(operator, operand):\n    result = operand[0]\n    for op, num in zip(operator, operand[1:]):\n        result = {\n            '+': result + num,\n            '-': result - num,\n            '*': result * num,\n            '//': result // num,\n            '**': result ** num\n        }[op]\n    return result", "code_8": "def do_algebra(operator, operand):\n    result = operand[0]\n    for op, num in zip(operator, operand[1:]):\n        result = result.__add__(num) if op == '+' else result.__sub__(num) if op == '-' else result.__mul__(num) if op == '*' else result.__floordiv__(num) if op == '//' else result.__pow__(num)\n    return result", "code_9": "def do_algebra(operator, operand):\n    result = operand[0]\n    for op, num in zip(operator, operand[1:]):\n        result = {\n            '+': lambda x, y: x + y,\n            '-': lambda x, y: x - y,\n            '*': lambda x, y: x * y,\n            '//': lambda x, y: x // y,\n            '**': lambda x, y: x ** y\n        }[op](result, num)\n    return result", "code_10": "def do_algebra(operator, operand):\n    result = operand[0]\n    for op, num in zip(operator, operand[1:]):\n        result = {\n            '+': add,\n            '-': sub,\n            '*': mul,\n            '//': floordiv,\n            '**': pow\n        }[op](result, num)\n    return result"}
{"task_id": "161", "prompt": "\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n", "code_1": "def solve(s):\n    return ''.join([c.swapcase() if c.isalpha() else c for c in s[::-1]]) if s.isalpha() else s[::-1]", "code_2": "def solve(s):\n    return ''.join(c.swapcase() if c.isalpha() else c for c in reversed(s)) if s.isalpha() else s[::-1]", "code_3": "def solve(s):\n    return ''.join(map(lambda c: c.swapcase() if c.isalpha() else c, s[::-1])) if s.isalpha() else s[::-1]", "code_4": "def solve(s):\n    return ''.join(reversed([c.swapcase() if c.isalpha() else c for c in s])) if s.isalpha() else s[::-1]", "code_5": "def solve(s):\n    return ''.join(reversed(list(map(lambda c: c.swapcase() if c.isalpha() else c, s)))) if s.isalpha() else s[::-1]", "code_6": "def solve(s):\n    return ''.join(reversed(list(c.swapcase() if c.isalpha() else c for c in s))) if s.isalpha() else s[::-1]", "code_7": "def solve(s):\n    return ''.join(c.swapcase() if c.isalpha() else c for c in s)[::-1] if s.isalpha() else s[::-1]", "code_8": "def solve(s):\n    return ''.join(map(lambda c: c.swapcase() if c.isalpha() else c, reversed(s))) if s.isalpha() else s[::-1]", "code_9": "def solve(s):\n    return ''.join(reversed(list(c.swapcase() if c.isalpha() else c for c in s))) if s.isalpha() else s[::-1]", "code_10": "def solve(s):\n    return ''.join(c.swapcase() if c.isalpha() else c for c in reversed(s)) if s.isalpha() else s[::-1]"}
{"task_id": "162", "prompt": "\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n", "code_1": "import hashlib\ndef string_to_md5(text):\n    return hashlib.md5(text.encode()).hexdigest() if text else None", "code_2": "import hashlib\ndef string_to_md5(text):\n    return text and hashlib.md5(text.encode()).hexdigest()", "code_3": "from hashlib import md5\ndef string_to_md5(text):\n    return md5(text.encode()).hexdigest() if text else None", "code_4": "from hashlib import md5\ndef string_to_md5(text):\n    return text and md5(text.encode()).hexdigest()", "code_5": "import hashlib\ndef string_to_md5(text):\n    return None if not text else hashlib.md5(text.encode()).hexdigest()", "code_6": "from hashlib import md5\ndef string_to_md5(text):\n    return None if not text else md5(text.encode()).hexdigest()", "code_7": "import hashlib\ndef string_to_md5(text):\n    return (lambda x: hashlib.md5(x.encode()).hexdigest())(text) if text else None", "code_8": "from hashlib import md5\ndef string_to_md5(text):\n    return (lambda x: md5(x.encode()).hexdigest())(text) if text else None", "code_9": "import hashlib\ndef string_to_md5(text):\n    return hashlib.md5(text.encode()).hexdigest() or None", "code_10": "from hashlib import md5\ndef string_to_md5(text):\n    return md5(text.encode()).hexdigest() or None"}
{"task_id": "163", "prompt": "\ndef generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n", "code_1": "def generate_integers(a, b):\n    return [i for i in range(min(a, b), max(a, b) + 1) if i % 2 == 0]", "code_2": "def generate_integers(a, b):\n    return list(filter(lambda x: x % 2 == 0, range(min(a, b), max(a, b) + 1)))", "code_3": "def generate_integers(a, b):\n    return [i for i in range(a, b + 1, 2)] if a < b else [i for i in range(b, a + 1, 2)]", "code_4": "def generate_integers(a, b):\n    return list(range(a, b + 1, 2)) if a < b else list(range(b, a + 1, 2))[::-1]", "code_5": "def generate_integers(a, b):\n    return [i for i in range(a, b - 1, 2)] + [b] if a < b and b % 2 == 0 else []", "code_6": "def generate_integers(a, b):\n    return [i for i in range(a + (a % 2), b + 1, 2)] if a < b else [i for i in range(b + (b % 2), a + 1, 2)]", "code_7": "def generate_integers(a, b):\n    return [i for i in range(a, b - (b % 2), 2)] + [b] if a < b else [i for i in range(b, a - (a % 2), 2)] + [a]", "code_8": "def generate_integers(a, b):\n    return [i for i in range(a + (a % 2), b - (b % 2) + 1, 2)] if a < b else [i for i in range(b + (b % 2), a - (a % 2) + 1, 2)]", "code_9": "def generate_integers(a, b):\n    return [i for i in range(a, b + 1) if i % 2 == 0][::-1] if a > b else [i for i in range(a, b + 1) if i % 2 == 0]", "code_10": "def generate_integers(a, b):\n    return [i for i in range(a, b - 1, 2)] + [b] if a < b and b % 2 == 0 else [i for i in range(b, a - 1, 2)] + [a] if a > b and a % 2 == 0 else []"}
